(* Source: https://www.scss.tcd.ie/~waldroj/3d1/arm_arm.pdf *)

type word = 32 bit
type halfword = 16 bit
type doubleword = 64 bit
type byte = 8 bit
type register = word loc
type doubleregister = doubleword loc

(*CPSR current program status register*)
letstate CPSR: register = 0x00000000 

(*SPSR saved program status register*)
letstate SPSR: register = 0x00000000 
(*
letstate N: 1 bit loc = 0b0 (*negative result; bit 31*)
letstate Z: 1 bit loc = 0b0 (*result is 0; bit 30*)
letstate C: 1 bit loc = 0b0 (*unsigned overflow; bit 29*)
letstate V: 1 bit loc = 0b0 (*signed overflow; bit 28*)
letstate Q: 1 bit loc = 0b0 (*sticky flag; bit 27*)
letstate J: 1 bit loc = 0b0 (*jazelle state bit; bit 24*)
letstate GE: 4 bit loc = 0b0000 (*greater than or equal to; bit 19-16*)
letstate E: 1 bit loc = 0b0 (*Endian load/store; bit 9*)
letstate A: 1 bit loc = 0b0 (*imprecise abort mask; bit 8*)
letstate I: 1 bit loc = 0b0 (*IRQ interrupt mask; bit 7*)
letstate F: 1 bit loc = 0b0 (*FIQ interrupt mask; bit 6*)
letstate T: 1 bit loc = 0b0 (*thumb state flag; bit 5*)
letstate Mode: 5 bit loc = 0b00000 (*Processor mode; bit 4-0*)
*)

(* unprivileged (user mode) registers *)
(*unbanked register*)
letstate R0: register = 0x00000000  (* first function argument *)
letstate R1: register = 0x00000000  (* second function argument *)
letstate R2: register = 0x00000000  (* third function argument *)
letstate R3: register = 0x00000000  (* fourth function argument *)
letstate R4: register = 0x00000000  (* register variable *)
letstate R5: register = 0x00000000  (* register variable *)
letstate R6: register = 0x00000000  (* register variable *)
letstate R7: register = 0x00000000  (* register variable *)
(*banked register*)
letstate R8: register = 0x00000000  (* register variable *)
letstate R9: register = 0x00000000  
letstate R10: register = 0x00000000 
letstate R11: register = 0x00000000  
letstate R12: register = 0x00000000  
letstate R13: register = 0x00000000 (* stack pointer *)
letstate R14: register = 0x00000000 (* link register *)
letstate R15: register = 0x00000000 (* pc *)

(*floating point registers*)
(*
letstate D0: doubleregister = 0x0000000000000000
letstate D1: doubleregister = 0x0000000000000000
letstate D2: doubleregister = 0x0000000000000000
letstate D3: doubleregister = 0x0000000000000000
letstate D4: doubleregister = 0x0000000000000000
letstate D5: doubleregister = 0x0000000000000000
letstate D6: doubleregister = 0x0000000000000000
letstate D7: doubleregister = 0x0000000000000000
letstate D8: doubleregister = 0x0000000000000000
letstate D9: doubleregister = 0x0000000000000000
letstate D10: doubleregister = 0x0000000000000000
letstate D11: doubleregister = 0x0000000000000000
letstate D12: doubleregister = 0x0000000000000000
letstate D13: doubleregister = 0x0000000000000000
letstate D14: doubleregister = 0x0000000000000000
letstate D15: doubleregister = 0x0000000000000000
letstate D16: doubleregister = 0x0000000000000000
letstate D17: doubleregister = 0x0000000000000000
letstate D18: doubleregister = 0x0000000000000000
letstate D19: doubleregister = 0x0000000000000000
letstate D20: doubleregister = 0x0000000000000000
letstate D21: doubleregister = 0x0000000000000000
letstate D22: doubleregister = 0x0000000000000000
letstate D23: doubleregister = 0x0000000000000000
letstate D24: doubleregister = 0x0000000000000000
letstate D25: doubleregister = 0x0000000000000000
letstate D26: doubleregister = 0x0000000000000000
letstate D27: doubleregister = 0x0000000000000000
letstate D28: doubleregister = 0x0000000000000000
letstate D29: doubleregister = 0x0000000000000000
letstate D30: doubleregister = 0x0000000000000000
letstate D31: doubleregister = 0x0000000000000000
*)
def arm32_16touint bv:16 bit -> int =
  	bv_to_uint(bv)

def arm32_16tosint bv:16 bit -> int =
	let upart : 15 bit = bv[0:15] in
	let base : int = bv_to_uint(upart) in
	let neg : bool = bv[15] in
	let negbase : int = base - 32768 in
	neg ? negbase : base

def arm32_wordtoint bv:32 bit -> int =
	bv_to_uint(bv)

def arm32_inttoword i:int -> 32 bit =
	uint_to_bv_l(32, i)

def getreg i: int -> register =
  let i0: bool = i == 0 in
  let i1: bool = i == 1 in
  let i2: bool = i == 2 in
  let i3: bool = i == 3 in
  let i4: bool = i == 4 in
  let i5: bool = i == 5 in
  let i6: bool = i == 6 in
  let i7: bool = i == 7 in
  let i8: bool = i == 8 in
  let i9: bool = i == 9 in
  let i10: bool = i == 10 in
  let i11: bool = i == 11 in
  let i12: bool = i == 12 in
  let i13: bool = i == 13 in
  let i14: bool = i == 14 in
  let i15: bool = i == 15 in
	if i0 then R0
	else
		if i1 then R1
	else 
		if i2 then R2
	else 
		if i3 then R3
	else 
		if i4 then R4
	else 
		if i5 then R5
	else 
		if i6 then R6
	else 
		if i7 then R7
	else 
		if i8 then R8
	else 
		if i9 then R9
	else 
		if i10 then R10
	else 
		if i11 then R11
	else 
		if i12 then R12
	else 
		if i13 then R13
	else 
		if i14 then R14
	else 
		if i15 then R15
  else R0

(*
def getfpreg64 i: int -> doubleregister = 
  let i0: bool = i == 0 in
  let i1: bool = i == 1 in
  let i2: bool = i == 2 in
  let i3: bool = i == 3 in
  let i4: bool = i == 4 in
  let i5: bool = i == 5 in
  let i6: bool = i == 6 in
  let i7: bool = i == 7 in
  let i8: bool = i == 8 in
  let i9: bool = i == 9 in
  let i10: bool = i == 10 in
  let i11: bool = i == 11 in
  let i12: bool = i == 12 in
  let i13: bool = i == 13 in
  let i14: bool = i == 14 in
  let i15: bool = i == 15 in
  let i16: bool = i == 16 in
  let i17: bool = i == 17 in
  let i18: bool = i == 18 in
  let i19: bool = i == 19 in
  let i20: bool = i == 20 in
  let i21: bool = i == 21 in
  let i22: bool = i == 22 in
  let i23: bool = i == 23 in
  let i24: bool = i == 24 in
  let i25: bool = i == 25 in
  let i26: bool = i == 26 in
  let i27: bool = i == 27 in
  let i28: bool = i == 28 in
  let i29: bool = i == 29 in
  let i30: bool = i == 30 in
  let i31: bool = i == 31 in
	if i0 then D0
	else
		if i1 then D1
	else 
		if i2 then D2
	else 
		if i3 then D3
	else 
		if i4 then D4
	else 
		if i5 then D5
	else 
		if i6 then D6
	else 
		if i7 then D7
	else 
		if i8 then D8
	else 
		if i9 then D9
	else 
		if i10 then D10
	else 
		if i11 then D11
	else 
		if i12 then D12
	else 
		if i13 then D13
	else 
		if i14 then D14
	else 
		if i15 then D15
	else
		if i16 then D16
	else
		if i17 then D17
	else 
		if i18 then D18
	else 
		if i19 then D19
	else 
		if i20 then D20
	else 
		if i21 then D21
	else 
		if i22 then D22
	else 
		if i23 then D23
	else 
		if i24 then D24
	else 
		if i25 then D25
	else 
		if i26 then D26
	else 
		if i27 then D27
	else 
		if i28 then D28
	else 
		if i29 then D29
	else 
		if i30 then D30
	else 
		if i31 then D31
  else D0
*)
(*******************************************************************************)
(***************************** Basic Instructions ******************************)
(*******************************************************************************)

(* manual Page 158 *)
defop ANDS Rd: register Rn: register Imm: 32 bit {
	txt = "" (*ANDS Rd, Rn, #Imm*),
	sem = [
		let dRn: word = *Rn in
		let and_word: word = dRn & Imm in
		let and_int: int = arm32_wordtoint(and_word) in
		let iszero: bool = and_int == 0 in
		(*update CPSR*)
		(*
		*N <- and_word[31:32];
		*Z <- iszero? 0b1 : 0b0
		*)
		let dCPSR: word = *CPSR in
		let NZ_mask: word = 0x3FFFFFFF in
		let dCPSR_unset: word = dCPSR & NZ_mask in
		let N_bit: word = and_word & 0x80000000 in
		let Z_bit: word = iszero ? 0x40000000 : 0x00000000 in
		(*C flag = shifter_carry_out*)
		let dCPSR_N: word = dCPSR_unset | N_bit in
		let dCPSR_NZ: word = dCPSR_N | Z_bit in
		*CPSR <- dCPSR_NZ;
		*Rd <- and_word
	]
}

(* manual Page 156*)
defop ADD_imm Rd: register Rn: register Imm: 12 bit {
	txt = "" (*ADD Rd, Rn, #Imm*),
	sem = [
		let dRn: word = *Rn in
		let dRn_int: int = arm32_wordtoint(dRn) in
		let Imm_int: int = bv_to_uint(Imm) in
		let sum_int: int = dRn_int + Imm_int in
		let sum_word: word = arm32_inttoword(sum_int) in
		*Rd <- sum_word
		(*if ADDS, we need to update CPSR flags*)
	]
}

defop ADD_reg Rd: register Rn: register Rm: register {
	txt = "" (*ADD Rd, Rn, Rm*),
	sem = [
		let dRn: word = *Rn in
		let dRn_int: int = arm32_wordtoint(dRn) in
		let dRm: word = *Rm in
		let dRm_int: int = arm32_wordtoint(dRm) in
		let sum_int: int = dRn_int + dRm_int in
		let sum_word: word = arm32_inttoword(sum_int) in
		*Rd <- sum_word
		(*if ADDS, we need to update CPSR flags*)
	]
}

(*manual Page 358*)
defop SUB_imm Rd: register Rn: register Imm: 12 bit {
	txt = "" (*SUB Rd, Rn, #Imm*),
	sem = [
		let dRn: word = *Rn in
		let dRn_int: int = arm32_wordtoint(dRn) in
		let Imm_int: int = bv_to_uint(Imm) in
		let sub_int: int = dRn_int - Imm_int in
		let sub_word: word = arm32_inttoword(sub_int) in
		*Rd <- sub_word
		(*if SUBS, we need to update CPSR flags*)
	]
}

defop SUB_reg Rd: register Rn: register Rm: register {
	txt = "" (*ADD Rd, Rn, Rm*),
	sem = [
		let dRn: word = *Rn in
		let dRn_int: int = arm32_wordtoint(dRn) in
		let dRm: word = *Rm in
		let dRm_int: int = arm32_wordtoint(dRm) in
		let sum_int: int = dRn_int - dRm_int in
		let sum_word: word = arm32_inttoword(sum_int) in
		*Rd <- sum_word
		(*if SUBS, we need to update CPSR flags*)
	]
}

(*manual Page 218*)
defop MOV_reg Rd: register Rs: register {
	txt = "" (*MOV Rd Rs*),
	sem = [
		let dRs: word = *Rs in
		*Rd <- dRs
	]
}

defop MOV_Imm Rd: register Imm: 12 bit {
	txt = "" (*MOV Rd #Imm*),
	sem = [
		let Imm_word: word = bv_to_len(32, Imm)  in
		*Rd <- Imm_word
	]
}


defop MOVS_reg Rd: register Rs: register {
	txt = "" (*MOV Rd Rs*),
	sem = [
		let dRs: word = *Rs in
		let dRs_int: int = arm32_wordtoint(dRs) in
		let iszero: bool = dRs_int == 0 in

		(*update CPSR*)
		(*
		*N <- dRs[31:32];
		*Z <- iszero ? 0b1 : 0b0;
		*)
		let dCPSR: word = *CPSR in
		let NZ_mask: word = 0x3FFFFFFF in
		let dCPSR_unset: word = dCPSR & NZ_mask in
		let bit31: bool = dRs[31] in
		let N_bit: word = bit31 ? 0x80000000 : 0x00000000 in
		(*
		let N_mask: word = 0x80000000 in
		let N_bit: word = dRs & N_mask in
		*)
		let Z_bit: word = iszero ? 0x40000000 : 0x00000000 in
		(*C flag = shifter_carry_out*)
		let dCPSR_N: word = dCPSR_unset | N_bit in
		let dCPSR_NZ: word = dCPSR_N | Z_bit in
		*CPSR <- dCPSR_NZ;
		*Rd <- dRs
	]
}

(*******************************************************************************)
(************************* Data Transfer Instructions **************************)
(*******************************************************************************)

(* reference: https://www.heyrick.co.uk/armwiki/LDR *)
defop LDR_direct Rd: register Rn: register {
	txt = "" (*LDR Rd, [Rn]*),
	sem = [
		let dRn: word = *Rn in
		let data_Rn: word = *dRn in
		*Rd <- data_Rn
	]
}

defop LDR_imm Rd: register Rn: register Imm: 12 bit {
	txt = "" (*LDR Rd, [Rn, #Imm]*),
	sem = [
		let dRn: word = *Rn in
		let dRn_int: int = arm32_wordtoint(dRn) in
		let Imm_int: int = bv_to_uint(Imm) in
		let sum_int: int = dRn_int + Imm_int in
		let sum_word: word = arm32_inttoword(sum_int) in
		let cont: word = *sum_word in
		*Rd <- cont
	]
}

defop LDR_reg Rd: register Rn: register Rm: register {
	txt = "" (*LDR Rd, [Rn, Rm]*),
	sem = [
		let dRn: word = *Rn in
		let dRn_int: int = arm32_wordtoint(dRn) in
		let dRm: word = *Rm in
		let dRm_int: int = arm32_wordtoint(dRm) in
		let sum_int: int = dRn_int + dRm_int in
		let sum_word: word = arm32_inttoword(sum_int) in
		let cont: word = *sum_word in
		*Rd <- cont
	]
}

(* manual Page 193, 468*)
(* access to arrays with automatic update of the base register *)
defop LDR_imm_post Rd: register Rn: register Imm: 12 bit {
	txt = "" (*LDR Rd, [Rn], #Imm*),
	sem = [
		let dRn: word = *Rn in
		let data_Rn: word = *dRn in
		*Rd <- data_Rn;
		let dRn_int: int = arm32_wordtoint(dRn) in
		let Imm_int: int = bv_to_uint(Imm) in
		let sum_int: int = dRn_int + Imm_int in
		let sum_word: word = arm32_inttoword(sum_int) in
		*Rn <- sum_word
	]
}

defop LDRB_imm Rd: register Rn: register Imm: 12 bit {
	txt = "" (*LDRB Rd, [Rn, #Imm]*),
	sem = [
		let dRn: word = *Rn in
		let dRn_int: int = arm32_wordtoint(dRn) in
		let Imm_int: int = bv_to_uint(Imm) in
		let sum_int: int = dRn_int + Imm_int in
		let sum_word: word = arm32_inttoword(sum_int) in
		(* NOTE: memory problem *)
		(* it should be let cont_byte: 8 bit = *sum_word in *)
		let cont_word: word = *sum_word in
		let cont_byte: 8 bit = bv_to_len(8, cont_word) in
		let cont: word = bv_to_len(32, cont_byte) in
		*Rd <- cont
	]

}
(* reference: https://www.heyrick.co.uk/armwiki/STR *)
defop STR_direct Rd: register Rn: register {
	txt = "" (*STR Rd, [Rn]*),
	sem = [
		let dRn: word = *Rn in
		let dRd: word = *Rd in
		*dRn <- dRd
	]
}
defop STR_imm Rd: register Rn: register Imm: 12 bit {
	txt = "" (*STR Rd, [Rn, #Imm]*),
	sem = [
		let dRn: word = *Rn in
		let dRn_int: int = arm32_wordtoint(dRn) in
		let Imm_int: int = bv_to_uint(Imm) in
		let sum_int: int = dRn_int + Imm_int in
		let sum_word: word = arm32_inttoword(sum_int) in
		let dRd: word = *Rd in
		*sum_word <- dRd
	]
}

(*******************************************************************************)
(********************** Multiple Data Transfer Instructions ********************)
(*******************************************************************************)

(* manual Page 190 - LDM*)
(* NOTE: based on Page 190 and 191, this register list must include the PC *)
defop LDMIA_wtback Rn: register Num: int bv: 16 bit {
	txt = "" (*ldmia Rn!, {<Register List>}*),
	sem = [
		for i in [0 ... 15] do
		(
			let addr: word = *Rn in
			let bvi: bool = bv[i] in
			if bvi then
			(
				let reg: register = getreg(i) in
				let addr_cont: word = *addr in
				*reg <- addr_cont;
				let addr_int: int = arm32_wordtoint(addr) in
				let addr4_int: int = addr_int + 4 in
				let addr4: word = arm32_inttoword(addr4_int) in
				*Rn <- addr4
			)
		);
		(* in forloop, we don't update PC, so do it here *)
		let addr: word = *Rn in
		let current_addr_cont: word = *addr in
		*R15 <- current_addr_cont;
		let addr_int: int = arm32_wordtoint(addr) in
		let addr4_int: int = addr_int + 4 in
		let addr4: word = arm32_inttoword(addr4_int) in
		*Rn <- addr4
	]
}

(*NOTE: don't know how to implement user mode registers*)
(* no writeback? NYI*)
(* defop LDMIA_usr Rn: register Num: int bv: 16 bit { *)

(* manual Page 339, 483*)
defop STMIA_wtback Rn: register Num: int bv: 16 bit {
	txt = "" (*stmia Rn!, {<Register List>}*),
	sem = [
		for i in [0 ... 16] do
			let addr: word = *Rn in
			let bvi: bool = bv[i] in
			if bvi then
			(
				let reg: register = getreg(i) in
				let reg_cont: word = *reg in
				*addr <- reg_cont;
				(*NOTE: signed, might overflow here*)
				let addr_int: int = arm32_wordtoint(addr) in
				let addr4_int: int = addr_int + 4 in
				let addr4: word = arm32_inttoword(addr4_int) in
				*Rn <- addr4
			)
	]
}

(*NOTE: don't know how to implement user mode registers*)
defop STMIA_wtback_usr Rn: register Num: int bv: 16 bit {
	txt = "" (*stmia Rn!, {<Register List>}^*),
	sem = [
		for i in [0 ... 16] do
			let addr: word = *Rn in
			let bvi: bool = bv[i] in
			if bvi then
			(
				let reg: register = getreg(i) in
				let reg_cont: word = *reg in
				*addr <- reg_cont;
				(*NOTE: signed, might overflow here*)
				let addr_int: int = arm32_wordtoint(addr) in
				let addr4_int: int = addr_int + 4 in
				let addr4: word = arm32_inttoword(addr4_int) in
				*Rn <- addr4
			)
	]
}

(* manual Page 339, 485*)
defop STMDA_wtback Rn: register Num: int bv: 16 bit {
	txt = "" (*stmda Rn!, {<Register List>}*),
	sem = [
		let dRn: word = *Rn in
		(*signed, might overflow here*)
		let dRn_int: int = arm32_wordtoint(dRn) in
		let Num4: int = Num * 4 in
		let start_addr_int_m4: int = dRn_int - Num4 in
		let start_addr_int: int = start_addr_int_m4 + 4 in
		let start_addr: word = arm32_inttoword(start_addr_int) in
		(*we can temporarily update Rn to get the start address*)
		*Rn <- start_addr;
		(
		for i in [0 ... 16] do
			let addr: word = *Rn in
			let bvi: bool = bv[i] in
			if bvi then
			(
				let reg: register = getreg(i) in
				let reg_cont: word = *reg in
				*addr <- reg_cont;
				let addr_int: int = arm32_wordtoint(addr) in
				let addr4_int: int = addr_int + 4 in
				let addr4: word = arm32_inttoword(addr4_int) in
				*Rn <- addr4
			)
		);
		(*then, we update it back*)
		let new_addr_int: int = dRn_int - Num4 in
		let new_addr: word = arm32_inttoword(new_addr_int) in
		(*we can temporarily update Rn to get the start address*)
		*Rn <- new_addr
	]
}

(* manual Page 598*)
(* NOTE: POP in a synonym for LDMIA sp!, <register_list> *)
defop POP bv: 8 bit {
	txt = "" (*POP {<Register List>}*),
	sem = [
		for i in [0 ... 8] do
			let addr: word = *R13 in
			let bvi: bool = bv[i] in
			if bvi then
			(
				let reg: register = getreg(i) in
				let cont: word = *addr in
				*reg <- cont;
				let addr_int: int = arm32_wordtoint(addr) in
				let addr4_int: int = addr_int + 4 in
				let addr4: word = arm32_inttoword(addr4_int) in
				*R13 <- addr4
			)
	]

}

(*******************************************************************************)
(*********************** VFP (floating-point) Instructions *********************)
(*******************************************************************************)
(*
(*reference: http://www.keil.com/support/man/docs/armasm/armasm_pge1423836087672.htm*)
(*I cannot find a reference that tells VLDMIA updates the PC as well*)
defop VLDMIA_wtback_64 Rn: register Num: int bv: 32 bit {
	txt = "" (*VLDMIA Rn!, {<Register List>}*),
	sem = [
		for i in [0 ... 32] do
			let addr: word = *Rn in
			let bvi: bool = bv[i] in
			if bvi then
			(
				let reg: register = getreg(i) in
				let addr_cont: word = *addr in
				*reg <- addr_cont;
				let addr_int: int = arm32_wordtoint(addr) in
				let addr8_int: int = addr_int + 8 in
				let addr8: word = arm32_inttoword(addr8_int) in
				*Rn <- addr8
			)
	]
}

(*reference: http://www.keil.com/support/man/docs/armasm/armasm_pge1423836295691.htm*)
defop VSTMIA_wtback_64 Rn: register Num: int bv: 32 bit {
	txt = "" (*VSTMIA Rn!, {<Register List>}*),
	sem = [
		for i in [0 ... 32] do
			let addr: word = *Rn in
			let bvi: bool = bv[i] in
			if bvi then
			(
				let reg: register = getfpreg64(i) in
				let reg_cont: word = *reg in
				*addr <- reg_cont;
				(*NOTE: signed, might overflow here*)
				let addr_int: int = arm32_wordtoint(addr) in
				(*NOTE: since we store double register, should we add 8 here?*)
				let addr8_int: int = addr_int + 8 in
				let addr8: word = arm32_inttoword(addr8_int) in
				*Rn <- addr8
			)
	]
}
*)
(*******************************************************************************)
(************************** MRS and MSR Instructions ***************************)
(*******************************************************************************)

(* manual Page 224*)
(* Rs should be either CPSR or SPSR*)
defop MRS Rd: register Rs: register {
	txt = "" (*MRS Rd Rs*),
	sem = [
		let dRs: word = *Rs in
		*Rd <- dRs
	]
}

(* manual Page 227*)
(* Rd should be either CPSR_<field> or SPSR_<field>*)
defop MSR_reg Rd: register Rs: register {
	txt = "" (*MSR Rd, Rs*),
	sem = [
		let dRs: word = *Rs in
		*Rd <- dRs
	]
}

(* Rd should be either CPSR_<field> or SPSR_<field>*)
(*MSR CPSR_c, Imm*)
defop MSR_CPSR_c Imm: 8 bit {
	txt = "" (*MSR CPSR_c, Imm*),
	sem = [
		let Imm_word: word = bv_to_len(32, Imm) in
		let byte_mask: word = 0x000000FF in
		(*
		let priv_mask: word = 0xF80F0200 | 0x000001DF in
		let mask: word = byte_mask & priv_mask in
		let notmask: word = ~ mask in
		let dCPSR: word = *CPSR in
		let dCPSR_mask: word = dCPSR & notmask in
		let Imm_mask: word = Imm_word & mask in
		*CPSR <- dCPSR_mask | Imm_mask
		*)
		let notmask: word = ~ byte_mask in
		let dCPSR: word = *CPSR in
		let dCPSR_mask: word = dCPSR & notmask in
		*CPSR <- dCPSR_mask | Imm_word
	]
}

defop MSR_CPSR_f Imm: 8 bit {
	txt = "" (*MSR CPSR_f, Imm*),
	sem = [
		let Imm_word: word = bv_to_len(32, Imm) in
		let byte_mask: word = 0xFF000000 in
		let Imm_shword: word = Imm_word << 6 in
		(*
		let priv_mask: word = 0xF80F0200 | 0x000001DF in
		let mask: word = byte_mask & priv_mask in
		let notmask: word = ~ mask in
		let dCPSR: word = *CPSR in
		let dCPSR_mask: word = dCPSR & notmask in
		let Imm_mask: word = Imm_word & mask in
		*CPSR <- dCPSR_mask | Imm_mask
		*)
		let notmask: word = ~ byte_mask in
		let dCPSR: word = *CPSR in
		let dCPSR_mask: word = dCPSR & notmask in
		*CPSR <- dCPSR_mask | Imm_shword
	]
}

(*manual Page 220 - MRC*)


(* Setters for registers, mem, cpsr bits below *)

defop SETREG Rd:register sh:word {
    txt = "" (*"SETREG" + Rd.txt + sh.txt*),
    sem = [
        *Rd <- sh
    ]
}

defop SETBIT B:1 bit loc val:1 bit {
    txt = "" (*"SETBIT" + B.txt + val.txt*),
    sem = [
        *B <- val
    ]
}
