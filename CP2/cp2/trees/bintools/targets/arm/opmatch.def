
############################################################
#                     "data-processing"                    #
############################################################

# {add,sub,rsb,adc,sbc,rsc,and,bic,eor,orr}<cond><s> reg, reg, anyshift
# {mov,mvn}<cond><s> reg, anyshift
# {cmp,cmn,tst,teq}<cond> reg, anyshift

# note that while the doc says the cond comes before the s, the
# other order is apparently also a thing.

# todo sometime: change the "register shifted by nothing"
# to call "dp_imm_noshift" and change the name of the macro in
# encoding.def accordingly.

#
# ADD
#

# immediate
add reg, reg, imm		= dp_imm(AL, ADD, NOFLAGS)
addeq reg, reg, imm		= dp_imm(EQ, ADD, NOFLAGS)
addne reg, reg, imm		= dp_imm(NE, ADD, NOFLAGS)
addcs reg, reg, imm		= dp_imm(CS, ADD, NOFLAGS)
addcc reg, reg, imm		= dp_imm(CC, ADD, NOFLAGS)
addmi reg, reg, imm		= dp_imm(MI, ADD, NOFLAGS)
addpl reg, reg, imm		= dp_imm(PL, ADD, NOFLAGS)
addvs reg, reg, imm		= dp_imm(VS, ADD, NOFLAGS)
addvc reg, reg, imm		= dp_imm(VC, ADD, NOFLAGS)
addhi reg, reg, imm		= dp_imm(HI, ADD, NOFLAGS)
addls reg, reg, imm		= dp_imm(LS, ADD, NOFLAGS)
addge reg, reg, imm		= dp_imm(GE, ADD, NOFLAGS)
addlt reg, reg, imm		= dp_imm(LT, ADD, NOFLAGS)
addgt reg, reg, imm		= dp_imm(GT, ADD, NOFLAGS)
addle reg, reg, imm		= dp_imm(LE, ADD, NOFLAGS)
addal reg, reg, imm		= dp_imm(AL, ADD, NOFLAGS)

# immediate with setflags
adds reg, reg, imm		= dp_imm(AL, ADD, SETFLAGS)
addseq reg, reg, imm		= dp_imm(EQ, ADD, SETFLAGS)
addeqs reg, reg, imm		= dp_imm(EQ, ADD, SETFLAGS)
addsne reg, reg, imm		= dp_imm(NE, ADD, SETFLAGS)
addnes reg, reg, imm		= dp_imm(NE, ADD, SETFLAGS)
addscs reg, reg, imm		= dp_imm(CS, ADD, SETFLAGS)
addcss reg, reg, imm		= dp_imm(CS, ADD, SETFLAGS)
addscc reg, reg, imm		= dp_imm(CC, ADD, SETFLAGS)
addccs reg, reg, imm		= dp_imm(CC, ADD, SETFLAGS)
addsmi reg, reg, imm		= dp_imm(MI, ADD, SETFLAGS)
addmis reg, reg, imm		= dp_imm(MI, ADD, SETFLAGS)
addspl reg, reg, imm		= dp_imm(PL, ADD, SETFLAGS)
addpls reg, reg, imm		= dp_imm(PL, ADD, SETFLAGS)
addsvs reg, reg, imm		= dp_imm(VS, ADD, SETFLAGS)
addvss reg, reg, imm		= dp_imm(VS, ADD, SETFLAGS)
addsvc reg, reg, imm		= dp_imm(VC, ADD, SETFLAGS)
addvcs reg, reg, imm		= dp_imm(VC, ADD, SETFLAGS)
addshi reg, reg, imm		= dp_imm(HI, ADD, SETFLAGS)
addhis reg, reg, imm		= dp_imm(HI, ADD, SETFLAGS)
addsls reg, reg, imm		= dp_imm(LS, ADD, SETFLAGS)
addlss reg, reg, imm		= dp_imm(LS, ADD, SETFLAGS)
addsge reg, reg, imm		= dp_imm(GE, ADD, SETFLAGS)
addges reg, reg, imm		= dp_imm(GE, ADD, SETFLAGS)
addslt reg, reg, imm		= dp_imm(LT, ADD, SETFLAGS)
addlts reg, reg, imm		= dp_imm(LT, ADD, SETFLAGS)
addsgt reg, reg, imm		= dp_imm(GT, ADD, SETFLAGS)
addgts reg, reg, imm		= dp_imm(GT, ADD, SETFLAGS)
addsle reg, reg, imm		= dp_imm(LE, ADD, SETFLAGS)
addles reg, reg, imm		= dp_imm(LE, ADD, SETFLAGS)
addsal reg, reg, imm		= dp_imm(AL, ADD, SETFLAGS)
addals reg, reg, imm		= dp_imm(AL, ADD, SETFLAGS)

# register shifted by nothing
add reg, reg, reg		= dp_reg_immshift(AL, ADD, NOFLAGS)
addeq reg, reg, reg		= dp_reg_immshift(EQ, ADD, NOFLAGS)
addne reg, reg, reg		= dp_reg_immshift(NE, ADD, NOFLAGS)
addcs reg, reg, reg		= dp_reg_immshift(CS, ADD, NOFLAGS)
addcc reg, reg, reg		= dp_reg_immshift(CC, ADD, NOFLAGS)
addmi reg, reg, reg		= dp_reg_immshift(MI, ADD, NOFLAGS)
addpl reg, reg, reg		= dp_reg_immshift(PL, ADD, NOFLAGS)
addvs reg, reg, reg		= dp_reg_immshift(VS, ADD, NOFLAGS)
addvc reg, reg, reg		= dp_reg_immshift(VC, ADD, NOFLAGS)
addhi reg, reg, reg		= dp_reg_immshift(HI, ADD, NOFLAGS)
addls reg, reg, reg		= dp_reg_immshift(LS, ADD, NOFLAGS)
addge reg, reg, reg		= dp_reg_immshift(GE, ADD, NOFLAGS)
addlt reg, reg, reg		= dp_reg_immshift(LT, ADD, NOFLAGS)
addgt reg, reg, reg		= dp_reg_immshift(GT, ADD, NOFLAGS)
addle reg, reg, reg		= dp_reg_immshift(LE, ADD, NOFLAGS)
addal reg, reg, reg		= dp_reg_immshift(AL, ADD, NOFLAGS)

# register shifted by nothing with setflags
adds reg, reg, reg		= dp_reg_immshift(AL, ADD, SETFLAGS)
addeqs reg, reg, reg		= dp_reg_immshift(EQ, ADD, SETFLAGS)
addseq reg, reg, reg		= dp_reg_immshift(EQ, ADD, SETFLAGS)
addnes reg, reg, reg		= dp_reg_immshift(NE, ADD, SETFLAGS)
addsne reg, reg, reg		= dp_reg_immshift(NE, ADD, SETFLAGS)
addcss reg, reg, reg		= dp_reg_immshift(CS, ADD, SETFLAGS)
addscs reg, reg, reg		= dp_reg_immshift(CS, ADD, SETFLAGS)
addccs reg, reg, reg		= dp_reg_immshift(CC, ADD, SETFLAGS)
addscc reg, reg, reg		= dp_reg_immshift(CC, ADD, SETFLAGS)
addmis reg, reg, reg		= dp_reg_immshift(MI, ADD, SETFLAGS)
addsmi reg, reg, reg		= dp_reg_immshift(MI, ADD, SETFLAGS)
addpls reg, reg, reg		= dp_reg_immshift(PL, ADD, SETFLAGS)
addspl reg, reg, reg		= dp_reg_immshift(PL, ADD, SETFLAGS)
addvss reg, reg, reg		= dp_reg_immshift(VS, ADD, SETFLAGS)
addsvs reg, reg, reg		= dp_reg_immshift(VS, ADD, SETFLAGS)
addvcs reg, reg, reg		= dp_reg_immshift(VC, ADD, SETFLAGS)
addsvc reg, reg, reg		= dp_reg_immshift(VC, ADD, SETFLAGS)
addhis reg, reg, reg		= dp_reg_immshift(HI, ADD, SETFLAGS)
addshi reg, reg, reg		= dp_reg_immshift(HI, ADD, SETFLAGS)
addlss reg, reg, reg		= dp_reg_immshift(LS, ADD, SETFLAGS)
addsls reg, reg, reg		= dp_reg_immshift(LS, ADD, SETFLAGS)
addges reg, reg, reg		= dp_reg_immshift(GE, ADD, SETFLAGS)
addsge reg, reg, reg		= dp_reg_immshift(GE, ADD, SETFLAGS)
addlts reg, reg, reg		= dp_reg_immshift(LT, ADD, SETFLAGS)
addslt reg, reg, reg		= dp_reg_immshift(LT, ADD, SETFLAGS)
addgts reg, reg, reg		= dp_reg_immshift(GT, ADD, SETFLAGS)
addsgt reg, reg, reg		= dp_reg_immshift(GT, ADD, SETFLAGS)
addles reg, reg, reg		= dp_reg_immshift(LE, ADD, SETFLAGS)
addsle reg, reg, reg		= dp_reg_immshift(LE, ADD, SETFLAGS)
addals reg, reg, reg		= dp_reg_immshift(AL, ADD, SETFLAGS)
addsal reg, reg, reg		= dp_reg_immshift(AL, ADD, SETFLAGS)

# register shifted by immediate
add reg, reg, reg, ishift	= dp_reg_immshift(AL, ADD, NOFLAGS)
addeq reg, reg, reg, ishift	= dp_reg_immshift(EQ, ADD, NOFLAGS)
addne reg, reg, reg, ishift	= dp_reg_immshift(NE, ADD, NOFLAGS)
addcs reg, reg, reg, ishift	= dp_reg_immshift(CS, ADD, NOFLAGS)
addcc reg, reg, reg, ishift	= dp_reg_immshift(CC, ADD, NOFLAGS)
addmi reg, reg, reg, ishift	= dp_reg_immshift(MI, ADD, NOFLAGS)
addpl reg, reg, reg, ishift	= dp_reg_immshift(PL, ADD, NOFLAGS)
addvs reg, reg, reg, ishift	= dp_reg_immshift(VS, ADD, NOFLAGS)
addvc reg, reg, reg, ishift	= dp_reg_immshift(VC, ADD, NOFLAGS)
addhi reg, reg, reg, ishift	= dp_reg_immshift(HI, ADD, NOFLAGS)
addls reg, reg, reg, ishift	= dp_reg_immshift(LS, ADD, NOFLAGS)
addge reg, reg, reg, ishift	= dp_reg_immshift(GE, ADD, NOFLAGS)
addlt reg, reg, reg, ishift	= dp_reg_immshift(LT, ADD, NOFLAGS)
addgt reg, reg, reg, ishift	= dp_reg_immshift(GT, ADD, NOFLAGS)
addle reg, reg, reg, ishift	= dp_reg_immshift(LE, ADD, NOFLAGS)
addal reg, reg, reg, ishift	= dp_reg_immshift(AL, ADD, NOFLAGS)

# register shifted by immediate with setflags
adds reg, reg, reg, ishift	= dp_reg_immshift(AL, ADD, SETFLAGS)
addeqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, ADD, SETFLAGS)
addseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, ADD, SETFLAGS)
addnes reg, reg, reg, ishift	= dp_reg_immshift(NE, ADD, SETFLAGS)
addsne reg, reg, reg, ishift	= dp_reg_immshift(NE, ADD, SETFLAGS)
addcss reg, reg, reg, ishift	= dp_reg_immshift(CS, ADD, SETFLAGS)
addscs reg, reg, reg, ishift	= dp_reg_immshift(CS, ADD, SETFLAGS)
addccs reg, reg, reg, ishift	= dp_reg_immshift(CC, ADD, SETFLAGS)
addscc reg, reg, reg, ishift	= dp_reg_immshift(CC, ADD, SETFLAGS)
addmis reg, reg, reg, ishift	= dp_reg_immshift(MI, ADD, SETFLAGS)
addsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, ADD, SETFLAGS)
addpls reg, reg, reg, ishift	= dp_reg_immshift(PL, ADD, SETFLAGS)
addspl reg, reg, reg, ishift	= dp_reg_immshift(PL, ADD, SETFLAGS)
addvss reg, reg, reg, ishift	= dp_reg_immshift(VS, ADD, SETFLAGS)
addsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, ADD, SETFLAGS)
addvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, ADD, SETFLAGS)
addsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, ADD, SETFLAGS)
addhis reg, reg, reg, ishift	= dp_reg_immshift(HI, ADD, SETFLAGS)
addshi reg, reg, reg, ishift	= dp_reg_immshift(HI, ADD, SETFLAGS)
addlss reg, reg, reg, ishift	= dp_reg_immshift(LS, ADD, SETFLAGS)
addsls reg, reg, reg, ishift	= dp_reg_immshift(LS, ADD, SETFLAGS)
addges reg, reg, reg, ishift	= dp_reg_immshift(GE, ADD, SETFLAGS)
addsge reg, reg, reg, ishift	= dp_reg_immshift(GE, ADD, SETFLAGS)
addlts reg, reg, reg, ishift	= dp_reg_immshift(LT, ADD, SETFLAGS)
addslt reg, reg, reg, ishift	= dp_reg_immshift(LT, ADD, SETFLAGS)
addgts reg, reg, reg, ishift	= dp_reg_immshift(GT, ADD, SETFLAGS)
addsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, ADD, SETFLAGS)
addles reg, reg, reg, ishift	= dp_reg_immshift(LE, ADD, SETFLAGS)
addsle reg, reg, reg, ishift	= dp_reg_immshift(LE, ADD, SETFLAGS)
addals reg, reg, reg, ishift	= dp_reg_immshift(AL, ADD, SETFLAGS)
addsal reg, reg, reg, ishift	= dp_reg_immshift(AL, ADD, SETFLAGS)

# register shifted by register
add reg, reg, reg, rshift	= dp_reg_regshift(AL, ADD, NOFLAGS)
addeq reg, reg, reg, rshift	= dp_reg_regshift(EQ, ADD, NOFLAGS)
addne reg, reg, reg, rshift	= dp_reg_regshift(NE, ADD, NOFLAGS)
addcs reg, reg, reg, rshift	= dp_reg_regshift(CS, ADD, NOFLAGS)
addcc reg, reg, reg, rshift	= dp_reg_regshift(CC, ADD, NOFLAGS)
addmi reg, reg, reg, rshift	= dp_reg_regshift(MI, ADD, NOFLAGS)
addpl reg, reg, reg, rshift	= dp_reg_regshift(PL, ADD, NOFLAGS)
addvs reg, reg, reg, rshift	= dp_reg_regshift(VS, ADD, NOFLAGS)
addvc reg, reg, reg, rshift	= dp_reg_regshift(VC, ADD, NOFLAGS)
addhi reg, reg, reg, rshift	= dp_reg_regshift(HI, ADD, NOFLAGS)
addls reg, reg, reg, rshift	= dp_reg_regshift(LS, ADD, NOFLAGS)
addge reg, reg, reg, rshift	= dp_reg_regshift(GE, ADD, NOFLAGS)
addlt reg, reg, reg, rshift	= dp_reg_regshift(LT, ADD, NOFLAGS)
addgt reg, reg, reg, rshift	= dp_reg_regshift(GT, ADD, NOFLAGS)
addle reg, reg, reg, rshift	= dp_reg_regshift(LE, ADD, NOFLAGS)
addal reg, reg, reg, rshift	= dp_reg_regshift(AL, ADD, NOFLAGS)

# register shifted by register with setflags
adds reg, reg, reg, rshift	= dp_reg_regshift(AL, ADD, SETFLAGS)
addeqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, ADD, SETFLAGS)
addseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, ADD, SETFLAGS)
addnes reg, reg, reg, rshift	= dp_reg_regshift(NE, ADD, SETFLAGS)
addsne reg, reg, reg, rshift	= dp_reg_regshift(NE, ADD, SETFLAGS)
addcss reg, reg, reg, rshift	= dp_reg_regshift(CS, ADD, SETFLAGS)
addscs reg, reg, reg, rshift	= dp_reg_regshift(CS, ADD, SETFLAGS)
addccs reg, reg, reg, rshift	= dp_reg_regshift(CC, ADD, SETFLAGS)
addscc reg, reg, reg, rshift	= dp_reg_regshift(CC, ADD, SETFLAGS)
addmis reg, reg, reg, rshift	= dp_reg_regshift(MI, ADD, SETFLAGS)
addsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, ADD, SETFLAGS)
addpls reg, reg, reg, rshift	= dp_reg_regshift(PL, ADD, SETFLAGS)
addspl reg, reg, reg, rshift	= dp_reg_regshift(PL, ADD, SETFLAGS)
addvss reg, reg, reg, rshift	= dp_reg_regshift(VS, ADD, SETFLAGS)
addsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, ADD, SETFLAGS)
addvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, ADD, SETFLAGS)
addsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, ADD, SETFLAGS)
addhis reg, reg, reg, rshift	= dp_reg_regshift(HI, ADD, SETFLAGS)
addshi reg, reg, reg, rshift	= dp_reg_regshift(HI, ADD, SETFLAGS)
addlss reg, reg, reg, rshift	= dp_reg_regshift(LS, ADD, SETFLAGS)
addsls reg, reg, reg, rshift	= dp_reg_regshift(LS, ADD, SETFLAGS)
addges reg, reg, reg, rshift	= dp_reg_regshift(GE, ADD, SETFLAGS)
addsge reg, reg, reg, rshift	= dp_reg_regshift(GE, ADD, SETFLAGS)
addlts reg, reg, reg, rshift	= dp_reg_regshift(LT, ADD, SETFLAGS)
addslt reg, reg, reg, rshift	= dp_reg_regshift(LT, ADD, SETFLAGS)
addgts reg, reg, reg, rshift	= dp_reg_regshift(GT, ADD, SETFLAGS)
addsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, ADD, SETFLAGS)
addles reg, reg, reg, rshift	= dp_reg_regshift(LE, ADD, SETFLAGS)
addsle reg, reg, reg, rshift	= dp_reg_regshift(LE, ADD, SETFLAGS)
addals reg, reg, reg, rshift	= dp_reg_regshift(AL, ADD, SETFLAGS)
addsal reg, reg, reg, rshift	= dp_reg_regshift(AL, ADD, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
add reg, imm			= dp_imm_DN(AL, ADD, NOFLAGS)
addeq reg, imm		= dp_imm_DN(EQ, ADD, NOFLAGS)
addne reg, imm		= dp_imm_DN(NE, ADD, NOFLAGS)
addcs reg, imm		= dp_imm_DN(CS, ADD, NOFLAGS)
addcc reg, imm		= dp_imm_DN(CC, ADD, NOFLAGS)
addmi reg, imm		= dp_imm_DN(MI, ADD, NOFLAGS)
addpl reg, imm		= dp_imm_DN(PL, ADD, NOFLAGS)
addvs reg, imm		= dp_imm_DN(VS, ADD, NOFLAGS)
addvc reg, imm		= dp_imm_DN(VC, ADD, NOFLAGS)
addhi reg, imm		= dp_imm_DN(HI, ADD, NOFLAGS)
addls reg, imm		= dp_imm_DN(LS, ADD, NOFLAGS)
addge reg, imm		= dp_imm_DN(GE, ADD, NOFLAGS)
addlt reg, imm		= dp_imm_DN(LT, ADD, NOFLAGS)
addgt reg, imm		= dp_imm_DN(GT, ADD, NOFLAGS)
addle reg, imm		= dp_imm_DN(LE, ADD, NOFLAGS)
addal reg, imm		= dp_imm_DN(AL, ADD, NOFLAGS)

# immediate with setflags with Rd == Rn
adds reg, imm		= dp_imm_DN(AL, ADD, SETFLAGS)
addseq reg, imm		= dp_imm_DN(EQ, ADD, SETFLAGS)
addeqs reg, imm		= dp_imm_DN(EQ, ADD, SETFLAGS)
addsne reg, imm		= dp_imm_DN(NE, ADD, SETFLAGS)
addnes reg, imm		= dp_imm_DN(NE, ADD, SETFLAGS)
addscs reg, imm		= dp_imm_DN(CS, ADD, SETFLAGS)
addcss reg, imm		= dp_imm_DN(CS, ADD, SETFLAGS)
addscc reg, imm		= dp_imm_DN(CC, ADD, SETFLAGS)
addccs reg, imm		= dp_imm_DN(CC, ADD, SETFLAGS)
addsmi reg, imm		= dp_imm_DN(MI, ADD, SETFLAGS)
addmis reg, imm		= dp_imm_DN(MI, ADD, SETFLAGS)
addspl reg, imm		= dp_imm_DN(PL, ADD, SETFLAGS)
addpls reg, imm		= dp_imm_DN(PL, ADD, SETFLAGS)
addsvs reg, imm		= dp_imm_DN(VS, ADD, SETFLAGS)
addvss reg, imm		= dp_imm_DN(VS, ADD, SETFLAGS)
addsvc reg, imm		= dp_imm_DN(VC, ADD, SETFLAGS)
addvcs reg, imm		= dp_imm_DN(VC, ADD, SETFLAGS)
addshi reg, imm		= dp_imm_DN(HI, ADD, SETFLAGS)
addhis reg, imm		= dp_imm_DN(HI, ADD, SETFLAGS)
addsls reg, imm		= dp_imm_DN(LS, ADD, SETFLAGS)
addlss reg, imm		= dp_imm_DN(LS, ADD, SETFLAGS)
addsge reg, imm		= dp_imm_DN(GE, ADD, SETFLAGS)
addges reg, imm		= dp_imm_DN(GE, ADD, SETFLAGS)
addslt reg, imm		= dp_imm_DN(LT, ADD, SETFLAGS)
addlts reg, imm		= dp_imm_DN(LT, ADD, SETFLAGS)
addsgt reg, imm		= dp_imm_DN(GT, ADD, SETFLAGS)
addgts reg, imm		= dp_imm_DN(GT, ADD, SETFLAGS)
addsle reg, imm		= dp_imm_DN(LE, ADD, SETFLAGS)
addles reg, imm		= dp_imm_DN(LE, ADD, SETFLAGS)
addsal reg, imm		= dp_imm_DN(AL, ADD, SETFLAGS)
addals reg, imm		= dp_imm_DN(AL, ADD, SETFLAGS)

# register shifted by nothing with Rd == Rn
add reg, reg			= dp_reg_immshift_DN(AL, ADD, NOFLAGS)
addeq reg, reg			= dp_reg_immshift_DN(EQ, ADD, NOFLAGS)
addne reg, reg			= dp_reg_immshift_DN(NE, ADD, NOFLAGS)
addcs reg, reg			= dp_reg_immshift_DN(CS, ADD, NOFLAGS)
addcc reg, reg			= dp_reg_immshift_DN(CC, ADD, NOFLAGS)
addmi reg, reg			= dp_reg_immshift_DN(MI, ADD, NOFLAGS)
addpl reg, reg			= dp_reg_immshift_DN(PL, ADD, NOFLAGS)
addvs reg, reg			= dp_reg_immshift_DN(VS, ADD, NOFLAGS)
addvc reg, reg			= dp_reg_immshift_DN(VC, ADD, NOFLAGS)
addhi reg, reg			= dp_reg_immshift_DN(HI, ADD, NOFLAGS)
addls reg, reg			= dp_reg_immshift_DN(LS, ADD, NOFLAGS)
addge reg, reg			= dp_reg_immshift_DN(GE, ADD, NOFLAGS)
addlt reg, reg			= dp_reg_immshift_DN(LT, ADD, NOFLAGS)
addgt reg, reg			= dp_reg_immshift_DN(GT, ADD, NOFLAGS)
addle reg, reg			= dp_reg_immshift_DN(LE, ADD, NOFLAGS)
addal reg, reg			= dp_reg_immshift_DN(AL, ADD, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
adds reg, reg			= dp_reg_immshift_DN(AL, ADD, SETFLAGS)
addeqs reg, reg			= dp_reg_immshift_DN(EQ, ADD, SETFLAGS)
addseq reg, reg			= dp_reg_immshift_DN(EQ, ADD, SETFLAGS)
addnes reg, reg			= dp_reg_immshift_DN(NE, ADD, SETFLAGS)
addsne reg, reg			= dp_reg_immshift_DN(NE, ADD, SETFLAGS)
addcss reg, reg			= dp_reg_immshift_DN(CS, ADD, SETFLAGS)
addscs reg, reg			= dp_reg_immshift_DN(CS, ADD, SETFLAGS)
addccs reg, reg			= dp_reg_immshift_DN(CC, ADD, SETFLAGS)
addscc reg, reg			= dp_reg_immshift_DN(CC, ADD, SETFLAGS)
addmis reg, reg			= dp_reg_immshift_DN(MI, ADD, SETFLAGS)
addsmi reg, reg			= dp_reg_immshift_DN(MI, ADD, SETFLAGS)
addpls reg, reg			= dp_reg_immshift_DN(PL, ADD, SETFLAGS)
addspl reg, reg			= dp_reg_immshift_DN(PL, ADD, SETFLAGS)
addvss reg, reg			= dp_reg_immshift_DN(VS, ADD, SETFLAGS)
addsvs reg, reg			= dp_reg_immshift_DN(VS, ADD, SETFLAGS)
addvcs reg, reg			= dp_reg_immshift_DN(VC, ADD, SETFLAGS)
addsvc reg, reg			= dp_reg_immshift_DN(VC, ADD, SETFLAGS)
addhis reg, reg			= dp_reg_immshift_DN(HI, ADD, SETFLAGS)
addshi reg, reg			= dp_reg_immshift_DN(HI, ADD, SETFLAGS)
addlss reg, reg			= dp_reg_immshift_DN(LS, ADD, SETFLAGS)
addsls reg, reg			= dp_reg_immshift_DN(LS, ADD, SETFLAGS)
addges reg, reg			= dp_reg_immshift_DN(GE, ADD, SETFLAGS)
addsge reg, reg			= dp_reg_immshift_DN(GE, ADD, SETFLAGS)
addlts reg, reg			= dp_reg_immshift_DN(LT, ADD, SETFLAGS)
addslt reg, reg			= dp_reg_immshift_DN(LT, ADD, SETFLAGS)
addgts reg, reg			= dp_reg_immshift_DN(GT, ADD, SETFLAGS)
addsgt reg, reg			= dp_reg_immshift_DN(GT, ADD, SETFLAGS)
addles reg, reg			= dp_reg_immshift_DN(LE, ADD, SETFLAGS)
addsle reg, reg			= dp_reg_immshift_DN(LE, ADD, SETFLAGS)
addals reg, reg			= dp_reg_immshift_DN(AL, ADD, SETFLAGS)
addsal reg, reg			= dp_reg_immshift_DN(AL, ADD, SETFLAGS)

# register shifted by immediate with Rd == Rn
add reg, reg, ishift		= dp_reg_immshift_DN(AL, ADD, NOFLAGS)
addeq reg, reg, ishift		= dp_reg_immshift_DN(EQ, ADD, NOFLAGS)
addne reg, reg, ishift		= dp_reg_immshift_DN(NE, ADD, NOFLAGS)
addcs reg, reg, ishift		= dp_reg_immshift_DN(CS, ADD, NOFLAGS)
addcc reg, reg, ishift		= dp_reg_immshift_DN(CC, ADD, NOFLAGS)
addmi reg, reg, ishift		= dp_reg_immshift_DN(MI, ADD, NOFLAGS)
addpl reg, reg, ishift		= dp_reg_immshift_DN(PL, ADD, NOFLAGS)
addvs reg, reg, ishift		= dp_reg_immshift_DN(VS, ADD, NOFLAGS)
addvc reg, reg, ishift		= dp_reg_immshift_DN(VC, ADD, NOFLAGS)
addhi reg, reg, ishift		= dp_reg_immshift_DN(HI, ADD, NOFLAGS)
addls reg, reg, ishift		= dp_reg_immshift_DN(LS, ADD, NOFLAGS)
addge reg, reg, ishift		= dp_reg_immshift_DN(GE, ADD, NOFLAGS)
addlt reg, reg, ishift		= dp_reg_immshift_DN(LT, ADD, NOFLAGS)
addgt reg, reg, ishift		= dp_reg_immshift_DN(GT, ADD, NOFLAGS)
addle reg, reg, ishift		= dp_reg_immshift_DN(LE, ADD, NOFLAGS)
addal reg, reg, ishift		= dp_reg_immshift_DN(AL, ADD, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
adds reg, reg, ishift		= dp_reg_immshift_DN(AL, ADD, SETFLAGS)
addeqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, ADD, SETFLAGS)
addseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, ADD, SETFLAGS)
addnes reg, reg, ishift		= dp_reg_immshift_DN(NE, ADD, SETFLAGS)
addsne reg, reg, ishift		= dp_reg_immshift_DN(NE, ADD, SETFLAGS)
addcss reg, reg, ishift		= dp_reg_immshift_DN(CS, ADD, SETFLAGS)
addscs reg, reg, ishift		= dp_reg_immshift_DN(CS, ADD, SETFLAGS)
addccs reg, reg, ishift		= dp_reg_immshift_DN(CC, ADD, SETFLAGS)
addscc reg, reg, ishift		= dp_reg_immshift_DN(CC, ADD, SETFLAGS)
addmis reg, reg, ishift		= dp_reg_immshift_DN(MI, ADD, SETFLAGS)
addsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, ADD, SETFLAGS)
addpls reg, reg, ishift		= dp_reg_immshift_DN(PL, ADD, SETFLAGS)
addspl reg, reg, ishift		= dp_reg_immshift_DN(PL, ADD, SETFLAGS)
addvss reg, reg, ishift		= dp_reg_immshift_DN(VS, ADD, SETFLAGS)
addsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, ADD, SETFLAGS)
addvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, ADD, SETFLAGS)
addsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, ADD, SETFLAGS)
addhis reg, reg, ishift		= dp_reg_immshift_DN(HI, ADD, SETFLAGS)
addshi reg, reg, ishift		= dp_reg_immshift_DN(HI, ADD, SETFLAGS)
addlss reg, reg, ishift		= dp_reg_immshift_DN(LS, ADD, SETFLAGS)
addsls reg, reg, ishift		= dp_reg_immshift_DN(LS, ADD, SETFLAGS)
addges reg, reg, ishift		= dp_reg_immshift_DN(GE, ADD, SETFLAGS)
addsge reg, reg, ishift		= dp_reg_immshift_DN(GE, ADD, SETFLAGS)
addlts reg, reg, ishift		= dp_reg_immshift_DN(LT, ADD, SETFLAGS)
addslt reg, reg, ishift		= dp_reg_immshift_DN(LT, ADD, SETFLAGS)
addgts reg, reg, ishift		= dp_reg_immshift_DN(GT, ADD, SETFLAGS)
addsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, ADD, SETFLAGS)
addles reg, reg, ishift		= dp_reg_immshift_DN(LE, ADD, SETFLAGS)
addsle reg, reg, ishift		= dp_reg_immshift_DN(LE, ADD, SETFLAGS)
addals reg, reg, ishift		= dp_reg_immshift_DN(AL, ADD, SETFLAGS)
addsal reg, reg, ishift		= dp_reg_immshift_DN(AL, ADD, SETFLAGS)

# register shifted by register with Rd == Rn
add reg, reg, rshift		= dp_reg_regshift_DN(AL, ADD, NOFLAGS)
addeq reg, reg, rshift		= dp_reg_regshift_DN(EQ, ADD, NOFLAGS)
addne reg, reg, rshift		= dp_reg_regshift_DN(NE, ADD, NOFLAGS)
addcs reg, reg, rshift		= dp_reg_regshift_DN(CS, ADD, NOFLAGS)
addcc reg, reg, rshift		= dp_reg_regshift_DN(CC, ADD, NOFLAGS)
addmi reg, reg, rshift		= dp_reg_regshift_DN(MI, ADD, NOFLAGS)
addpl reg, reg, rshift		= dp_reg_regshift_DN(PL, ADD, NOFLAGS)
addvs reg, reg, rshift		= dp_reg_regshift_DN(VS, ADD, NOFLAGS)
addvc reg, reg, rshift		= dp_reg_regshift_DN(VC, ADD, NOFLAGS)
addhi reg, reg, rshift		= dp_reg_regshift_DN(HI, ADD, NOFLAGS)
addls reg, reg, rshift		= dp_reg_regshift_DN(LS, ADD, NOFLAGS)
addge reg, reg, rshift		= dp_reg_regshift_DN(GE, ADD, NOFLAGS)
addlt reg, reg, rshift		= dp_reg_regshift_DN(LT, ADD, NOFLAGS)
addgt reg, reg, rshift		= dp_reg_regshift_DN(GT, ADD, NOFLAGS)
addle reg, reg, rshift		= dp_reg_regshift_DN(LE, ADD, NOFLAGS)
addal reg, reg, rshift		= dp_reg_regshift_DN(AL, ADD, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
adds reg, reg, rshift		= dp_reg_regshift_DN(AL, ADD, SETFLAGS)
addeqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, ADD, SETFLAGS)
addseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, ADD, SETFLAGS)
addnes reg, reg, rshift		= dp_reg_regshift_DN(NE, ADD, SETFLAGS)
addsne reg, reg, rshift		= dp_reg_regshift_DN(NE, ADD, SETFLAGS)
addcss reg, reg, rshift		= dp_reg_regshift_DN(CS, ADD, SETFLAGS)
addscs reg, reg, rshift		= dp_reg_regshift_DN(CS, ADD, SETFLAGS)
addccs reg, reg, rshift		= dp_reg_regshift_DN(CC, ADD, SETFLAGS)
addscc reg, reg, rshift		= dp_reg_regshift_DN(CC, ADD, SETFLAGS)
addmis reg, reg, rshift		= dp_reg_regshift_DN(MI, ADD, SETFLAGS)
addsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, ADD, SETFLAGS)
addpls reg, reg, rshift		= dp_reg_regshift_DN(PL, ADD, SETFLAGS)
addspl reg, reg, rshift		= dp_reg_regshift_DN(PL, ADD, SETFLAGS)
addvss reg, reg, rshift		= dp_reg_regshift_DN(VS, ADD, SETFLAGS)
addsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, ADD, SETFLAGS)
addvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, ADD, SETFLAGS)
addsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, ADD, SETFLAGS)
addhis reg, reg, rshift		= dp_reg_regshift_DN(HI, ADD, SETFLAGS)
addshi reg, reg, rshift		= dp_reg_regshift_DN(HI, ADD, SETFLAGS)
addlss reg, reg, rshift		= dp_reg_regshift_DN(LS, ADD, SETFLAGS)
addsls reg, reg, rshift		= dp_reg_regshift_DN(LS, ADD, SETFLAGS)
addges reg, reg, rshift		= dp_reg_regshift_DN(GE, ADD, SETFLAGS)
addsge reg, reg, rshift		= dp_reg_regshift_DN(GE, ADD, SETFLAGS)
addlts reg, reg, rshift		= dp_reg_regshift_DN(LT, ADD, SETFLAGS)
addslt reg, reg, rshift		= dp_reg_regshift_DN(LT, ADD, SETFLAGS)
addgts reg, reg, rshift		= dp_reg_regshift_DN(GT, ADD, SETFLAGS)
addsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, ADD, SETFLAGS)
addles reg, reg, rshift		= dp_reg_regshift_DN(LE, ADD, SETFLAGS)
addsle reg, reg, rshift		= dp_reg_regshift_DN(LE, ADD, SETFLAGS)
addals reg, reg, rshift		= dp_reg_regshift_DN(AL, ADD, SETFLAGS)
addsal reg, reg, rshift		= dp_reg_regshift_DN(AL, ADD, SETFLAGS)

#
# SUB
#

# immediate
sub reg, reg, imm		= dp_imm(AL, SUB, NOFLAGS)
subeq reg, reg, imm		= dp_imm(EQ, SUB, NOFLAGS)
subne reg, reg, imm		= dp_imm(NE, SUB, NOFLAGS)
subcs reg, reg, imm		= dp_imm(CS, SUB, NOFLAGS)
subcc reg, reg, imm		= dp_imm(CC, SUB, NOFLAGS)
submi reg, reg, imm		= dp_imm(MI, SUB, NOFLAGS)
subpl reg, reg, imm		= dp_imm(PL, SUB, NOFLAGS)
subvs reg, reg, imm		= dp_imm(VS, SUB, NOFLAGS)
subvc reg, reg, imm		= dp_imm(VC, SUB, NOFLAGS)
subhi reg, reg, imm		= dp_imm(HI, SUB, NOFLAGS)
subls reg, reg, imm		= dp_imm(LS, SUB, NOFLAGS)
subge reg, reg, imm		= dp_imm(GE, SUB, NOFLAGS)
sublt reg, reg, imm		= dp_imm(LT, SUB, NOFLAGS)
subgt reg, reg, imm		= dp_imm(GT, SUB, NOFLAGS)
suble reg, reg, imm		= dp_imm(LE, SUB, NOFLAGS)
subal reg, reg, imm		= dp_imm(AL, SUB, NOFLAGS)

# immediate with setflags
subs reg, reg, imm		= dp_imm(AL, SUB, SETFLAGS)
subseq reg, reg, imm		= dp_imm(EQ, SUB, SETFLAGS)
subeqs reg, reg, imm		= dp_imm(EQ, SUB, SETFLAGS)
subsne reg, reg, imm		= dp_imm(NE, SUB, SETFLAGS)
subnes reg, reg, imm		= dp_imm(NE, SUB, SETFLAGS)
subscs reg, reg, imm		= dp_imm(CS, SUB, SETFLAGS)
subcss reg, reg, imm		= dp_imm(CS, SUB, SETFLAGS)
subscc reg, reg, imm		= dp_imm(CC, SUB, SETFLAGS)
subccs reg, reg, imm		= dp_imm(CC, SUB, SETFLAGS)
subsmi reg, reg, imm		= dp_imm(MI, SUB, SETFLAGS)
submis reg, reg, imm		= dp_imm(MI, SUB, SETFLAGS)
subspl reg, reg, imm		= dp_imm(PL, SUB, SETFLAGS)
subpls reg, reg, imm		= dp_imm(PL, SUB, SETFLAGS)
subsvs reg, reg, imm		= dp_imm(VS, SUB, SETFLAGS)
subvss reg, reg, imm		= dp_imm(VS, SUB, SETFLAGS)
subsvc reg, reg, imm		= dp_imm(VC, SUB, SETFLAGS)
subvcs reg, reg, imm		= dp_imm(VC, SUB, SETFLAGS)
subshi reg, reg, imm		= dp_imm(HI, SUB, SETFLAGS)
subhis reg, reg, imm		= dp_imm(HI, SUB, SETFLAGS)
subsls reg, reg, imm		= dp_imm(LS, SUB, SETFLAGS)
sublss reg, reg, imm		= dp_imm(LS, SUB, SETFLAGS)
subsge reg, reg, imm		= dp_imm(GE, SUB, SETFLAGS)
subges reg, reg, imm		= dp_imm(GE, SUB, SETFLAGS)
subslt reg, reg, imm		= dp_imm(LT, SUB, SETFLAGS)
sublts reg, reg, imm		= dp_imm(LT, SUB, SETFLAGS)
subsgt reg, reg, imm		= dp_imm(GT, SUB, SETFLAGS)
subgts reg, reg, imm		= dp_imm(GT, SUB, SETFLAGS)
subsle reg, reg, imm		= dp_imm(LE, SUB, SETFLAGS)
subles reg, reg, imm		= dp_imm(LE, SUB, SETFLAGS)
subsal reg, reg, imm		= dp_imm(AL, SUB, SETFLAGS)
subals reg, reg, imm		= dp_imm(AL, SUB, SETFLAGS)

# register shifted by nothing
sub reg, reg, reg		= dp_reg_immshift(AL, SUB, NOFLAGS)
subeq reg, reg, reg		= dp_reg_immshift(EQ, SUB, NOFLAGS)
subne reg, reg, reg		= dp_reg_immshift(NE, SUB, NOFLAGS)
subcs reg, reg, reg		= dp_reg_immshift(CS, SUB, NOFLAGS)
subcc reg, reg, reg		= dp_reg_immshift(CC, SUB, NOFLAGS)
submi reg, reg, reg		= dp_reg_immshift(MI, SUB, NOFLAGS)
subpl reg, reg, reg		= dp_reg_immshift(PL, SUB, NOFLAGS)
subvs reg, reg, reg		= dp_reg_immshift(VS, SUB, NOFLAGS)
subvc reg, reg, reg		= dp_reg_immshift(VC, SUB, NOFLAGS)
subhi reg, reg, reg		= dp_reg_immshift(HI, SUB, NOFLAGS)
subls reg, reg, reg		= dp_reg_immshift(LS, SUB, NOFLAGS)
subge reg, reg, reg		= dp_reg_immshift(GE, SUB, NOFLAGS)
sublt reg, reg, reg		= dp_reg_immshift(LT, SUB, NOFLAGS)
subgt reg, reg, reg		= dp_reg_immshift(GT, SUB, NOFLAGS)
suble reg, reg, reg		= dp_reg_immshift(LE, SUB, NOFLAGS)
subal reg, reg, reg		= dp_reg_immshift(AL, SUB, NOFLAGS)

# register shifted by nothing with setflags
subs reg, reg, reg		= dp_reg_immshift(AL, SUB, SETFLAGS)
subeqs reg, reg, reg		= dp_reg_immshift(EQ, SUB, SETFLAGS)
subseq reg, reg, reg		= dp_reg_immshift(EQ, SUB, SETFLAGS)
subnes reg, reg, reg		= dp_reg_immshift(NE, SUB, SETFLAGS)
subsne reg, reg, reg		= dp_reg_immshift(NE, SUB, SETFLAGS)
subcss reg, reg, reg		= dp_reg_immshift(CS, SUB, SETFLAGS)
subscs reg, reg, reg		= dp_reg_immshift(CS, SUB, SETFLAGS)
subccs reg, reg, reg		= dp_reg_immshift(CC, SUB, SETFLAGS)
subscc reg, reg, reg		= dp_reg_immshift(CC, SUB, SETFLAGS)
submis reg, reg, reg		= dp_reg_immshift(MI, SUB, SETFLAGS)
subsmi reg, reg, reg		= dp_reg_immshift(MI, SUB, SETFLAGS)
subpls reg, reg, reg		= dp_reg_immshift(PL, SUB, SETFLAGS)
subspl reg, reg, reg		= dp_reg_immshift(PL, SUB, SETFLAGS)
subvss reg, reg, reg		= dp_reg_immshift(VS, SUB, SETFLAGS)
subsvs reg, reg, reg		= dp_reg_immshift(VS, SUB, SETFLAGS)
subvcs reg, reg, reg		= dp_reg_immshift(VC, SUB, SETFLAGS)
subsvc reg, reg, reg		= dp_reg_immshift(VC, SUB, SETFLAGS)
subhis reg, reg, reg		= dp_reg_immshift(HI, SUB, SETFLAGS)
subshi reg, reg, reg		= dp_reg_immshift(HI, SUB, SETFLAGS)
sublss reg, reg, reg		= dp_reg_immshift(LS, SUB, SETFLAGS)
subsls reg, reg, reg		= dp_reg_immshift(LS, SUB, SETFLAGS)
subges reg, reg, reg		= dp_reg_immshift(GE, SUB, SETFLAGS)
subsge reg, reg, reg		= dp_reg_immshift(GE, SUB, SETFLAGS)
sublts reg, reg, reg		= dp_reg_immshift(LT, SUB, SETFLAGS)
subslt reg, reg, reg		= dp_reg_immshift(LT, SUB, SETFLAGS)
subgts reg, reg, reg		= dp_reg_immshift(GT, SUB, SETFLAGS)
subsgt reg, reg, reg		= dp_reg_immshift(GT, SUB, SETFLAGS)
subles reg, reg, reg		= dp_reg_immshift(LE, SUB, SETFLAGS)
subsle reg, reg, reg		= dp_reg_immshift(LE, SUB, SETFLAGS)
subals reg, reg, reg		= dp_reg_immshift(AL, SUB, SETFLAGS)
subsal reg, reg, reg		= dp_reg_immshift(AL, SUB, SETFLAGS)

# register shifted by immediate
sub reg, reg, reg, ishift	= dp_reg_immshift(AL, SUB, NOFLAGS)
subeq reg, reg, reg, ishift	= dp_reg_immshift(EQ, SUB, NOFLAGS)
subne reg, reg, reg, ishift	= dp_reg_immshift(NE, SUB, NOFLAGS)
subcs reg, reg, reg, ishift	= dp_reg_immshift(CS, SUB, NOFLAGS)
subcc reg, reg, reg, ishift	= dp_reg_immshift(CC, SUB, NOFLAGS)
submi reg, reg, reg, ishift	= dp_reg_immshift(MI, SUB, NOFLAGS)
subpl reg, reg, reg, ishift	= dp_reg_immshift(PL, SUB, NOFLAGS)
subvs reg, reg, reg, ishift	= dp_reg_immshift(VS, SUB, NOFLAGS)
subvc reg, reg, reg, ishift	= dp_reg_immshift(VC, SUB, NOFLAGS)
subhi reg, reg, reg, ishift	= dp_reg_immshift(HI, SUB, NOFLAGS)
subls reg, reg, reg, ishift	= dp_reg_immshift(LS, SUB, NOFLAGS)
subge reg, reg, reg, ishift	= dp_reg_immshift(GE, SUB, NOFLAGS)
sublt reg, reg, reg, ishift	= dp_reg_immshift(LT, SUB, NOFLAGS)
subgt reg, reg, reg, ishift	= dp_reg_immshift(GT, SUB, NOFLAGS)
suble reg, reg, reg, ishift	= dp_reg_immshift(LE, SUB, NOFLAGS)
subal reg, reg, reg, ishift	= dp_reg_immshift(AL, SUB, NOFLAGS)

# register shifted by immediate with setflags
subs reg, reg, reg, ishift	= dp_reg_immshift(AL, SUB, SETFLAGS)
subeqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, SUB, SETFLAGS)
subseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, SUB, SETFLAGS)
subnes reg, reg, reg, ishift	= dp_reg_immshift(NE, SUB, SETFLAGS)
subsne reg, reg, reg, ishift	= dp_reg_immshift(NE, SUB, SETFLAGS)
subcss reg, reg, reg, ishift	= dp_reg_immshift(CS, SUB, SETFLAGS)
subscs reg, reg, reg, ishift	= dp_reg_immshift(CS, SUB, SETFLAGS)
subccs reg, reg, reg, ishift	= dp_reg_immshift(CC, SUB, SETFLAGS)
subscc reg, reg, reg, ishift	= dp_reg_immshift(CC, SUB, SETFLAGS)
submis reg, reg, reg, ishift	= dp_reg_immshift(MI, SUB, SETFLAGS)
subsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, SUB, SETFLAGS)
subpls reg, reg, reg, ishift	= dp_reg_immshift(PL, SUB, SETFLAGS)
subspl reg, reg, reg, ishift	= dp_reg_immshift(PL, SUB, SETFLAGS)
subvss reg, reg, reg, ishift	= dp_reg_immshift(VS, SUB, SETFLAGS)
subsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, SUB, SETFLAGS)
subvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, SUB, SETFLAGS)
subsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, SUB, SETFLAGS)
subhis reg, reg, reg, ishift	= dp_reg_immshift(HI, SUB, SETFLAGS)
subshi reg, reg, reg, ishift	= dp_reg_immshift(HI, SUB, SETFLAGS)
sublss reg, reg, reg, ishift	= dp_reg_immshift(LS, SUB, SETFLAGS)
subsls reg, reg, reg, ishift	= dp_reg_immshift(LS, SUB, SETFLAGS)
subges reg, reg, reg, ishift	= dp_reg_immshift(GE, SUB, SETFLAGS)
subsge reg, reg, reg, ishift	= dp_reg_immshift(GE, SUB, SETFLAGS)
sublts reg, reg, reg, ishift	= dp_reg_immshift(LT, SUB, SETFLAGS)
subslt reg, reg, reg, ishift	= dp_reg_immshift(LT, SUB, SETFLAGS)
subgts reg, reg, reg, ishift	= dp_reg_immshift(GT, SUB, SETFLAGS)
subsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, SUB, SETFLAGS)
subles reg, reg, reg, ishift	= dp_reg_immshift(LE, SUB, SETFLAGS)
subsle reg, reg, reg, ishift	= dp_reg_immshift(LE, SUB, SETFLAGS)
subals reg, reg, reg, ishift	= dp_reg_immshift(AL, SUB, SETFLAGS)
subsal reg, reg, reg, ishift	= dp_reg_immshift(AL, SUB, SETFLAGS)

# register shifted by register
sub reg, reg, reg, rshift	= dp_reg_regshift(AL, SUB, NOFLAGS)
subeq reg, reg, reg, rshift	= dp_reg_regshift(EQ, SUB, NOFLAGS)
subne reg, reg, reg, rshift	= dp_reg_regshift(NE, SUB, NOFLAGS)
subcs reg, reg, reg, rshift	= dp_reg_regshift(CS, SUB, NOFLAGS)
subcc reg, reg, reg, rshift	= dp_reg_regshift(CC, SUB, NOFLAGS)
submi reg, reg, reg, rshift	= dp_reg_regshift(MI, SUB, NOFLAGS)
subpl reg, reg, reg, rshift	= dp_reg_regshift(PL, SUB, NOFLAGS)
subvs reg, reg, reg, rshift	= dp_reg_regshift(VS, SUB, NOFLAGS)
subvc reg, reg, reg, rshift	= dp_reg_regshift(VC, SUB, NOFLAGS)
subhi reg, reg, reg, rshift	= dp_reg_regshift(HI, SUB, NOFLAGS)
subls reg, reg, reg, rshift	= dp_reg_regshift(LS, SUB, NOFLAGS)
subge reg, reg, reg, rshift	= dp_reg_regshift(GE, SUB, NOFLAGS)
sublt reg, reg, reg, rshift	= dp_reg_regshift(LT, SUB, NOFLAGS)
subgt reg, reg, reg, rshift	= dp_reg_regshift(GT, SUB, NOFLAGS)
suble reg, reg, reg, rshift	= dp_reg_regshift(LE, SUB, NOFLAGS)
subal reg, reg, reg, rshift	= dp_reg_regshift(AL, SUB, NOFLAGS)

# register shifted by register with setflags
subs reg, reg, reg, rshift	= dp_reg_regshift(AL, SUB, SETFLAGS)
subeqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, SUB, SETFLAGS)
subseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, SUB, SETFLAGS)
subnes reg, reg, reg, rshift	= dp_reg_regshift(NE, SUB, SETFLAGS)
subsne reg, reg, reg, rshift	= dp_reg_regshift(NE, SUB, SETFLAGS)
subcss reg, reg, reg, rshift	= dp_reg_regshift(CS, SUB, SETFLAGS)
subscs reg, reg, reg, rshift	= dp_reg_regshift(CS, SUB, SETFLAGS)
subccs reg, reg, reg, rshift	= dp_reg_regshift(CC, SUB, SETFLAGS)
subscc reg, reg, reg, rshift	= dp_reg_regshift(CC, SUB, SETFLAGS)
submis reg, reg, reg, rshift	= dp_reg_regshift(MI, SUB, SETFLAGS)
subsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, SUB, SETFLAGS)
subpls reg, reg, reg, rshift	= dp_reg_regshift(PL, SUB, SETFLAGS)
subspl reg, reg, reg, rshift	= dp_reg_regshift(PL, SUB, SETFLAGS)
subvss reg, reg, reg, rshift	= dp_reg_regshift(VS, SUB, SETFLAGS)
subsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, SUB, SETFLAGS)
subvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, SUB, SETFLAGS)
subsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, SUB, SETFLAGS)
subhis reg, reg, reg, rshift	= dp_reg_regshift(HI, SUB, SETFLAGS)
subshi reg, reg, reg, rshift	= dp_reg_regshift(HI, SUB, SETFLAGS)
sublss reg, reg, reg, rshift	= dp_reg_regshift(LS, SUB, SETFLAGS)
subsls reg, reg, reg, rshift	= dp_reg_regshift(LS, SUB, SETFLAGS)
subges reg, reg, reg, rshift	= dp_reg_regshift(GE, SUB, SETFLAGS)
subsge reg, reg, reg, rshift	= dp_reg_regshift(GE, SUB, SETFLAGS)
sublts reg, reg, reg, rshift	= dp_reg_regshift(LT, SUB, SETFLAGS)
subslt reg, reg, reg, rshift	= dp_reg_regshift(LT, SUB, SETFLAGS)
subgts reg, reg, reg, rshift	= dp_reg_regshift(GT, SUB, SETFLAGS)
subsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, SUB, SETFLAGS)
subles reg, reg, reg, rshift	= dp_reg_regshift(LE, SUB, SETFLAGS)
subsle reg, reg, reg, rshift	= dp_reg_regshift(LE, SUB, SETFLAGS)
subals reg, reg, reg, rshift	= dp_reg_regshift(AL, SUB, SETFLAGS)
subsal reg, reg, reg, rshift	= dp_reg_regshift(AL, SUB, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
sub reg, imm			= dp_imm_DN(AL, SUB, NOFLAGS)
subeq reg, imm		= dp_imm_DN(EQ, SUB, NOFLAGS)
subne reg, imm		= dp_imm_DN(NE, SUB, NOFLAGS)
subcs reg, imm		= dp_imm_DN(CS, SUB, NOFLAGS)
subcc reg, imm		= dp_imm_DN(CC, SUB, NOFLAGS)
submi reg, imm		= dp_imm_DN(MI, SUB, NOFLAGS)
subpl reg, imm		= dp_imm_DN(PL, SUB, NOFLAGS)
subvs reg, imm		= dp_imm_DN(VS, SUB, NOFLAGS)
subvc reg, imm		= dp_imm_DN(VC, SUB, NOFLAGS)
subhi reg, imm		= dp_imm_DN(HI, SUB, NOFLAGS)
subls reg, imm		= dp_imm_DN(LS, SUB, NOFLAGS)
subge reg, imm		= dp_imm_DN(GE, SUB, NOFLAGS)
sublt reg, imm		= dp_imm_DN(LT, SUB, NOFLAGS)
subgt reg, imm		= dp_imm_DN(GT, SUB, NOFLAGS)
suble reg, imm		= dp_imm_DN(LE, SUB, NOFLAGS)
subal reg, imm		= dp_imm_DN(AL, SUB, NOFLAGS)

# immediate with setflags with Rd == Rn
subs reg, imm		= dp_imm_DN(AL, SUB, SETFLAGS)
subseq reg, imm		= dp_imm_DN(EQ, SUB, SETFLAGS)
subeqs reg, imm		= dp_imm_DN(EQ, SUB, SETFLAGS)
subsne reg, imm		= dp_imm_DN(NE, SUB, SETFLAGS)
subnes reg, imm		= dp_imm_DN(NE, SUB, SETFLAGS)
subscs reg, imm		= dp_imm_DN(CS, SUB, SETFLAGS)
subcss reg, imm		= dp_imm_DN(CS, SUB, SETFLAGS)
subscc reg, imm		= dp_imm_DN(CC, SUB, SETFLAGS)
subccs reg, imm		= dp_imm_DN(CC, SUB, SETFLAGS)
subsmi reg, imm		= dp_imm_DN(MI, SUB, SETFLAGS)
submis reg, imm		= dp_imm_DN(MI, SUB, SETFLAGS)
subspl reg, imm		= dp_imm_DN(PL, SUB, SETFLAGS)
subpls reg, imm		= dp_imm_DN(PL, SUB, SETFLAGS)
subsvs reg, imm		= dp_imm_DN(VS, SUB, SETFLAGS)
subvss reg, imm		= dp_imm_DN(VS, SUB, SETFLAGS)
subsvc reg, imm		= dp_imm_DN(VC, SUB, SETFLAGS)
subvcs reg, imm		= dp_imm_DN(VC, SUB, SETFLAGS)
subshi reg, imm		= dp_imm_DN(HI, SUB, SETFLAGS)
subhis reg, imm		= dp_imm_DN(HI, SUB, SETFLAGS)
subsls reg, imm		= dp_imm_DN(LS, SUB, SETFLAGS)
sublss reg, imm		= dp_imm_DN(LS, SUB, SETFLAGS)
subsge reg, imm		= dp_imm_DN(GE, SUB, SETFLAGS)
subges reg, imm		= dp_imm_DN(GE, SUB, SETFLAGS)
subslt reg, imm		= dp_imm_DN(LT, SUB, SETFLAGS)
sublts reg, imm		= dp_imm_DN(LT, SUB, SETFLAGS)
subsgt reg, imm		= dp_imm_DN(GT, SUB, SETFLAGS)
subgts reg, imm		= dp_imm_DN(GT, SUB, SETFLAGS)
subsle reg, imm		= dp_imm_DN(LE, SUB, SETFLAGS)
subles reg, imm		= dp_imm_DN(LE, SUB, SETFLAGS)
subsal reg, imm		= dp_imm_DN(AL, SUB, SETFLAGS)
subals reg, imm		= dp_imm_DN(AL, SUB, SETFLAGS)

# register shifted by nothing with Rd == Rn
sub reg, reg			= dp_reg_immshift_DN(AL, SUB, NOFLAGS)
subeq reg, reg			= dp_reg_immshift_DN(EQ, SUB, NOFLAGS)
subne reg, reg			= dp_reg_immshift_DN(NE, SUB, NOFLAGS)
subcs reg, reg			= dp_reg_immshift_DN(CS, SUB, NOFLAGS)
subcc reg, reg			= dp_reg_immshift_DN(CC, SUB, NOFLAGS)
submi reg, reg			= dp_reg_immshift_DN(MI, SUB, NOFLAGS)
subpl reg, reg			= dp_reg_immshift_DN(PL, SUB, NOFLAGS)
subvs reg, reg			= dp_reg_immshift_DN(VS, SUB, NOFLAGS)
subvc reg, reg			= dp_reg_immshift_DN(VC, SUB, NOFLAGS)
subhi reg, reg			= dp_reg_immshift_DN(HI, SUB, NOFLAGS)
subls reg, reg			= dp_reg_immshift_DN(LS, SUB, NOFLAGS)
subge reg, reg			= dp_reg_immshift_DN(GE, SUB, NOFLAGS)
sublt reg, reg			= dp_reg_immshift_DN(LT, SUB, NOFLAGS)
subgt reg, reg			= dp_reg_immshift_DN(GT, SUB, NOFLAGS)
suble reg, reg			= dp_reg_immshift_DN(LE, SUB, NOFLAGS)
subal reg, reg			= dp_reg_immshift_DN(AL, SUB, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
subs reg, reg			= dp_reg_immshift_DN(AL, SUB, SETFLAGS)
subeqs reg, reg			= dp_reg_immshift_DN(EQ, SUB, SETFLAGS)
subseq reg, reg			= dp_reg_immshift_DN(EQ, SUB, SETFLAGS)
subnes reg, reg			= dp_reg_immshift_DN(NE, SUB, SETFLAGS)
subsne reg, reg			= dp_reg_immshift_DN(NE, SUB, SETFLAGS)
subcss reg, reg			= dp_reg_immshift_DN(CS, SUB, SETFLAGS)
subscs reg, reg			= dp_reg_immshift_DN(CS, SUB, SETFLAGS)
subccs reg, reg			= dp_reg_immshift_DN(CC, SUB, SETFLAGS)
subscc reg, reg			= dp_reg_immshift_DN(CC, SUB, SETFLAGS)
submis reg, reg			= dp_reg_immshift_DN(MI, SUB, SETFLAGS)
subsmi reg, reg			= dp_reg_immshift_DN(MI, SUB, SETFLAGS)
subpls reg, reg			= dp_reg_immshift_DN(PL, SUB, SETFLAGS)
subspl reg, reg			= dp_reg_immshift_DN(PL, SUB, SETFLAGS)
subvss reg, reg			= dp_reg_immshift_DN(VS, SUB, SETFLAGS)
subsvs reg, reg			= dp_reg_immshift_DN(VS, SUB, SETFLAGS)
subvcs reg, reg			= dp_reg_immshift_DN(VC, SUB, SETFLAGS)
subsvc reg, reg			= dp_reg_immshift_DN(VC, SUB, SETFLAGS)
subhis reg, reg			= dp_reg_immshift_DN(HI, SUB, SETFLAGS)
subshi reg, reg			= dp_reg_immshift_DN(HI, SUB, SETFLAGS)
sublss reg, reg			= dp_reg_immshift_DN(LS, SUB, SETFLAGS)
subsls reg, reg			= dp_reg_immshift_DN(LS, SUB, SETFLAGS)
subges reg, reg			= dp_reg_immshift_DN(GE, SUB, SETFLAGS)
subsge reg, reg			= dp_reg_immshift_DN(GE, SUB, SETFLAGS)
sublts reg, reg			= dp_reg_immshift_DN(LT, SUB, SETFLAGS)
subslt reg, reg			= dp_reg_immshift_DN(LT, SUB, SETFLAGS)
subgts reg, reg			= dp_reg_immshift_DN(GT, SUB, SETFLAGS)
subsgt reg, reg			= dp_reg_immshift_DN(GT, SUB, SETFLAGS)
subles reg, reg			= dp_reg_immshift_DN(LE, SUB, SETFLAGS)
subsle reg, reg			= dp_reg_immshift_DN(LE, SUB, SETFLAGS)
subals reg, reg			= dp_reg_immshift_DN(AL, SUB, SETFLAGS)
subsal reg, reg			= dp_reg_immshift_DN(AL, SUB, SETFLAGS)

# register shifted by immediate with Rd == Rn
sub reg, reg, ishift		= dp_reg_immshift_DN(AL, SUB, NOFLAGS)
subeq reg, reg, ishift		= dp_reg_immshift_DN(EQ, SUB, NOFLAGS)
subne reg, reg, ishift		= dp_reg_immshift_DN(NE, SUB, NOFLAGS)
subcs reg, reg, ishift		= dp_reg_immshift_DN(CS, SUB, NOFLAGS)
subcc reg, reg, ishift		= dp_reg_immshift_DN(CC, SUB, NOFLAGS)
submi reg, reg, ishift		= dp_reg_immshift_DN(MI, SUB, NOFLAGS)
subpl reg, reg, ishift		= dp_reg_immshift_DN(PL, SUB, NOFLAGS)
subvs reg, reg, ishift		= dp_reg_immshift_DN(VS, SUB, NOFLAGS)
subvc reg, reg, ishift		= dp_reg_immshift_DN(VC, SUB, NOFLAGS)
subhi reg, reg, ishift		= dp_reg_immshift_DN(HI, SUB, NOFLAGS)
subls reg, reg, ishift		= dp_reg_immshift_DN(LS, SUB, NOFLAGS)
subge reg, reg, ishift		= dp_reg_immshift_DN(GE, SUB, NOFLAGS)
sublt reg, reg, ishift		= dp_reg_immshift_DN(LT, SUB, NOFLAGS)
subgt reg, reg, ishift		= dp_reg_immshift_DN(GT, SUB, NOFLAGS)
suble reg, reg, ishift		= dp_reg_immshift_DN(LE, SUB, NOFLAGS)
subal reg, reg, ishift		= dp_reg_immshift_DN(AL, SUB, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
subs reg, reg, ishift		= dp_reg_immshift_DN(AL, SUB, SETFLAGS)
subeqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, SUB, SETFLAGS)
subseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, SUB, SETFLAGS)
subnes reg, reg, ishift		= dp_reg_immshift_DN(NE, SUB, SETFLAGS)
subsne reg, reg, ishift		= dp_reg_immshift_DN(NE, SUB, SETFLAGS)
subcss reg, reg, ishift		= dp_reg_immshift_DN(CS, SUB, SETFLAGS)
subscs reg, reg, ishift		= dp_reg_immshift_DN(CS, SUB, SETFLAGS)
subccs reg, reg, ishift		= dp_reg_immshift_DN(CC, SUB, SETFLAGS)
subscc reg, reg, ishift		= dp_reg_immshift_DN(CC, SUB, SETFLAGS)
submis reg, reg, ishift		= dp_reg_immshift_DN(MI, SUB, SETFLAGS)
subsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, SUB, SETFLAGS)
subpls reg, reg, ishift		= dp_reg_immshift_DN(PL, SUB, SETFLAGS)
subspl reg, reg, ishift		= dp_reg_immshift_DN(PL, SUB, SETFLAGS)
subvss reg, reg, ishift		= dp_reg_immshift_DN(VS, SUB, SETFLAGS)
subsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, SUB, SETFLAGS)
subvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, SUB, SETFLAGS)
subsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, SUB, SETFLAGS)
subhis reg, reg, ishift		= dp_reg_immshift_DN(HI, SUB, SETFLAGS)
subshi reg, reg, ishift		= dp_reg_immshift_DN(HI, SUB, SETFLAGS)
sublss reg, reg, ishift		= dp_reg_immshift_DN(LS, SUB, SETFLAGS)
subsls reg, reg, ishift		= dp_reg_immshift_DN(LS, SUB, SETFLAGS)
subges reg, reg, ishift		= dp_reg_immshift_DN(GE, SUB, SETFLAGS)
subsge reg, reg, ishift		= dp_reg_immshift_DN(GE, SUB, SETFLAGS)
sublts reg, reg, ishift		= dp_reg_immshift_DN(LT, SUB, SETFLAGS)
subslt reg, reg, ishift		= dp_reg_immshift_DN(LT, SUB, SETFLAGS)
subgts reg, reg, ishift		= dp_reg_immshift_DN(GT, SUB, SETFLAGS)
subsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, SUB, SETFLAGS)
subles reg, reg, ishift		= dp_reg_immshift_DN(LE, SUB, SETFLAGS)
subsle reg, reg, ishift		= dp_reg_immshift_DN(LE, SUB, SETFLAGS)
subals reg, reg, ishift		= dp_reg_immshift_DN(AL, SUB, SETFLAGS)
subsal reg, reg, ishift		= dp_reg_immshift_DN(AL, SUB, SETFLAGS)

# register shifted by register with Rd == Rn
sub reg, reg, rshift		= dp_reg_regshift_DN(AL, SUB, NOFLAGS)
subeq reg, reg, rshift		= dp_reg_regshift_DN(EQ, SUB, NOFLAGS)
subne reg, reg, rshift		= dp_reg_regshift_DN(NE, SUB, NOFLAGS)
subcs reg, reg, rshift		= dp_reg_regshift_DN(CS, SUB, NOFLAGS)
subcc reg, reg, rshift		= dp_reg_regshift_DN(CC, SUB, NOFLAGS)
submi reg, reg, rshift		= dp_reg_regshift_DN(MI, SUB, NOFLAGS)
subpl reg, reg, rshift		= dp_reg_regshift_DN(PL, SUB, NOFLAGS)
subvs reg, reg, rshift		= dp_reg_regshift_DN(VS, SUB, NOFLAGS)
subvc reg, reg, rshift		= dp_reg_regshift_DN(VC, SUB, NOFLAGS)
subhi reg, reg, rshift		= dp_reg_regshift_DN(HI, SUB, NOFLAGS)
subls reg, reg, rshift		= dp_reg_regshift_DN(LS, SUB, NOFLAGS)
subge reg, reg, rshift		= dp_reg_regshift_DN(GE, SUB, NOFLAGS)
sublt reg, reg, rshift		= dp_reg_regshift_DN(LT, SUB, NOFLAGS)
subgt reg, reg, rshift		= dp_reg_regshift_DN(GT, SUB, NOFLAGS)
suble reg, reg, rshift		= dp_reg_regshift_DN(LE, SUB, NOFLAGS)
subal reg, reg, rshift		= dp_reg_regshift_DN(AL, SUB, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
subs reg, reg, rshift		= dp_reg_regshift_DN(AL, SUB, SETFLAGS)
subeqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, SUB, SETFLAGS)
subseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, SUB, SETFLAGS)
subnes reg, reg, rshift		= dp_reg_regshift_DN(NE, SUB, SETFLAGS)
subsne reg, reg, rshift		= dp_reg_regshift_DN(NE, SUB, SETFLAGS)
subcss reg, reg, rshift		= dp_reg_regshift_DN(CS, SUB, SETFLAGS)
subscs reg, reg, rshift		= dp_reg_regshift_DN(CS, SUB, SETFLAGS)
subccs reg, reg, rshift		= dp_reg_regshift_DN(CC, SUB, SETFLAGS)
subscc reg, reg, rshift		= dp_reg_regshift_DN(CC, SUB, SETFLAGS)
submis reg, reg, rshift		= dp_reg_regshift_DN(MI, SUB, SETFLAGS)
subsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, SUB, SETFLAGS)
subpls reg, reg, rshift		= dp_reg_regshift_DN(PL, SUB, SETFLAGS)
subspl reg, reg, rshift		= dp_reg_regshift_DN(PL, SUB, SETFLAGS)
subvss reg, reg, rshift		= dp_reg_regshift_DN(VS, SUB, SETFLAGS)
subsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, SUB, SETFLAGS)
subvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, SUB, SETFLAGS)
subsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, SUB, SETFLAGS)
subhis reg, reg, rshift		= dp_reg_regshift_DN(HI, SUB, SETFLAGS)
subshi reg, reg, rshift		= dp_reg_regshift_DN(HI, SUB, SETFLAGS)
sublss reg, reg, rshift		= dp_reg_regshift_DN(LS, SUB, SETFLAGS)
subsls reg, reg, rshift		= dp_reg_regshift_DN(LS, SUB, SETFLAGS)
subges reg, reg, rshift		= dp_reg_regshift_DN(GE, SUB, SETFLAGS)
subsge reg, reg, rshift		= dp_reg_regshift_DN(GE, SUB, SETFLAGS)
sublts reg, reg, rshift		= dp_reg_regshift_DN(LT, SUB, SETFLAGS)
subslt reg, reg, rshift		= dp_reg_regshift_DN(LT, SUB, SETFLAGS)
subgts reg, reg, rshift		= dp_reg_regshift_DN(GT, SUB, SETFLAGS)
subsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, SUB, SETFLAGS)
subles reg, reg, rshift		= dp_reg_regshift_DN(LE, SUB, SETFLAGS)
subsle reg, reg, rshift		= dp_reg_regshift_DN(LE, SUB, SETFLAGS)
subals reg, reg, rshift		= dp_reg_regshift_DN(AL, SUB, SETFLAGS)
subsal reg, reg, rshift		= dp_reg_regshift_DN(AL, SUB, SETFLAGS)

#
# RSB
#

# immediate
rsb reg, reg, imm		= dp_imm(AL, RSB, NOFLAGS)
rsbeq reg, reg, imm		= dp_imm(EQ, RSB, NOFLAGS)
rsbne reg, reg, imm		= dp_imm(NE, RSB, NOFLAGS)
rsbcs reg, reg, imm		= dp_imm(CS, RSB, NOFLAGS)
rsbcc reg, reg, imm		= dp_imm(CC, RSB, NOFLAGS)
rsbmi reg, reg, imm		= dp_imm(MI, RSB, NOFLAGS)
rsbpl reg, reg, imm		= dp_imm(PL, RSB, NOFLAGS)
rsbvs reg, reg, imm		= dp_imm(VS, RSB, NOFLAGS)
rsbvc reg, reg, imm		= dp_imm(VC, RSB, NOFLAGS)
rsbhi reg, reg, imm		= dp_imm(HI, RSB, NOFLAGS)
rsbls reg, reg, imm		= dp_imm(LS, RSB, NOFLAGS)
rsbge reg, reg, imm		= dp_imm(GE, RSB, NOFLAGS)
rsblt reg, reg, imm		= dp_imm(LT, RSB, NOFLAGS)
rsbgt reg, reg, imm		= dp_imm(GT, RSB, NOFLAGS)
rsble reg, reg, imm		= dp_imm(LE, RSB, NOFLAGS)
rsbal reg, reg, imm		= dp_imm(AL, RSB, NOFLAGS)

# immediate with setflags
rsbs reg, reg, imm		= dp_imm(AL, RSB, SETFLAGS)
rsbseq reg, reg, imm		= dp_imm(EQ, RSB, SETFLAGS)
rsbeqs reg, reg, imm		= dp_imm(EQ, RSB, SETFLAGS)
rsbsne reg, reg, imm		= dp_imm(NE, RSB, SETFLAGS)
rsbnes reg, reg, imm		= dp_imm(NE, RSB, SETFLAGS)
rsbscs reg, reg, imm		= dp_imm(CS, RSB, SETFLAGS)
rsbcss reg, reg, imm		= dp_imm(CS, RSB, SETFLAGS)
rsbscc reg, reg, imm		= dp_imm(CC, RSB, SETFLAGS)
rsbccs reg, reg, imm		= dp_imm(CC, RSB, SETFLAGS)
rsbsmi reg, reg, imm		= dp_imm(MI, RSB, SETFLAGS)
rsbmis reg, reg, imm		= dp_imm(MI, RSB, SETFLAGS)
rsbspl reg, reg, imm		= dp_imm(PL, RSB, SETFLAGS)
rsbpls reg, reg, imm		= dp_imm(PL, RSB, SETFLAGS)
rsbsvs reg, reg, imm		= dp_imm(VS, RSB, SETFLAGS)
rsbvss reg, reg, imm		= dp_imm(VS, RSB, SETFLAGS)
rsbsvc reg, reg, imm		= dp_imm(VC, RSB, SETFLAGS)
rsbvcs reg, reg, imm		= dp_imm(VC, RSB, SETFLAGS)
rsbshi reg, reg, imm		= dp_imm(HI, RSB, SETFLAGS)
rsbhis reg, reg, imm		= dp_imm(HI, RSB, SETFLAGS)
rsbsls reg, reg, imm		= dp_imm(LS, RSB, SETFLAGS)
rsblss reg, reg, imm		= dp_imm(LS, RSB, SETFLAGS)
rsbsge reg, reg, imm		= dp_imm(GE, RSB, SETFLAGS)
rsbges reg, reg, imm		= dp_imm(GE, RSB, SETFLAGS)
rsbslt reg, reg, imm		= dp_imm(LT, RSB, SETFLAGS)
rsblts reg, reg, imm		= dp_imm(LT, RSB, SETFLAGS)
rsbsgt reg, reg, imm		= dp_imm(GT, RSB, SETFLAGS)
rsbgts reg, reg, imm		= dp_imm(GT, RSB, SETFLAGS)
rsbsle reg, reg, imm		= dp_imm(LE, RSB, SETFLAGS)
rsbles reg, reg, imm		= dp_imm(LE, RSB, SETFLAGS)
rsbsal reg, reg, imm		= dp_imm(AL, RSB, SETFLAGS)
rsbals reg, reg, imm		= dp_imm(AL, RSB, SETFLAGS)

# register shifted by nothing
rsb reg, reg, reg		= dp_reg_immshift(AL, RSB, NOFLAGS)
rsbeq reg, reg, reg		= dp_reg_immshift(EQ, RSB, NOFLAGS)
rsbne reg, reg, reg		= dp_reg_immshift(NE, RSB, NOFLAGS)
rsbcs reg, reg, reg		= dp_reg_immshift(CS, RSB, NOFLAGS)
rsbcc reg, reg, reg		= dp_reg_immshift(CC, RSB, NOFLAGS)
rsbmi reg, reg, reg		= dp_reg_immshift(MI, RSB, NOFLAGS)
rsbpl reg, reg, reg		= dp_reg_immshift(PL, RSB, NOFLAGS)
rsbvs reg, reg, reg		= dp_reg_immshift(VS, RSB, NOFLAGS)
rsbvc reg, reg, reg		= dp_reg_immshift(VC, RSB, NOFLAGS)
rsbhi reg, reg, reg		= dp_reg_immshift(HI, RSB, NOFLAGS)
rsbls reg, reg, reg		= dp_reg_immshift(LS, RSB, NOFLAGS)
rsbge reg, reg, reg		= dp_reg_immshift(GE, RSB, NOFLAGS)
rsblt reg, reg, reg		= dp_reg_immshift(LT, RSB, NOFLAGS)
rsbgt reg, reg, reg		= dp_reg_immshift(GT, RSB, NOFLAGS)
rsble reg, reg, reg		= dp_reg_immshift(LE, RSB, NOFLAGS)
rsbal reg, reg, reg		= dp_reg_immshift(AL, RSB, NOFLAGS)

# register shifted by nothing with setflags
rsbs reg, reg, reg		= dp_reg_immshift(AL, RSB, SETFLAGS)
rsbeqs reg, reg, reg		= dp_reg_immshift(EQ, RSB, SETFLAGS)
rsbseq reg, reg, reg		= dp_reg_immshift(EQ, RSB, SETFLAGS)
rsbnes reg, reg, reg		= dp_reg_immshift(NE, RSB, SETFLAGS)
rsbsne reg, reg, reg		= dp_reg_immshift(NE, RSB, SETFLAGS)
rsbcss reg, reg, reg		= dp_reg_immshift(CS, RSB, SETFLAGS)
rsbscs reg, reg, reg		= dp_reg_immshift(CS, RSB, SETFLAGS)
rsbccs reg, reg, reg		= dp_reg_immshift(CC, RSB, SETFLAGS)
rsbscc reg, reg, reg		= dp_reg_immshift(CC, RSB, SETFLAGS)
rsbmis reg, reg, reg		= dp_reg_immshift(MI, RSB, SETFLAGS)
rsbsmi reg, reg, reg		= dp_reg_immshift(MI, RSB, SETFLAGS)
rsbpls reg, reg, reg		= dp_reg_immshift(PL, RSB, SETFLAGS)
rsbspl reg, reg, reg		= dp_reg_immshift(PL, RSB, SETFLAGS)
rsbvss reg, reg, reg		= dp_reg_immshift(VS, RSB, SETFLAGS)
rsbsvs reg, reg, reg		= dp_reg_immshift(VS, RSB, SETFLAGS)
rsbvcs reg, reg, reg		= dp_reg_immshift(VC, RSB, SETFLAGS)
rsbsvc reg, reg, reg		= dp_reg_immshift(VC, RSB, SETFLAGS)
rsbhis reg, reg, reg		= dp_reg_immshift(HI, RSB, SETFLAGS)
rsbshi reg, reg, reg		= dp_reg_immshift(HI, RSB, SETFLAGS)
rsblss reg, reg, reg		= dp_reg_immshift(LS, RSB, SETFLAGS)
rsbsls reg, reg, reg		= dp_reg_immshift(LS, RSB, SETFLAGS)
rsbges reg, reg, reg		= dp_reg_immshift(GE, RSB, SETFLAGS)
rsbsge reg, reg, reg		= dp_reg_immshift(GE, RSB, SETFLAGS)
rsblts reg, reg, reg		= dp_reg_immshift(LT, RSB, SETFLAGS)
rsbslt reg, reg, reg		= dp_reg_immshift(LT, RSB, SETFLAGS)
rsbgts reg, reg, reg		= dp_reg_immshift(GT, RSB, SETFLAGS)
rsbsgt reg, reg, reg		= dp_reg_immshift(GT, RSB, SETFLAGS)
rsbles reg, reg, reg		= dp_reg_immshift(LE, RSB, SETFLAGS)
rsbsle reg, reg, reg		= dp_reg_immshift(LE, RSB, SETFLAGS)
rsbals reg, reg, reg		= dp_reg_immshift(AL, RSB, SETFLAGS)
rsbsal reg, reg, reg		= dp_reg_immshift(AL, RSB, SETFLAGS)

# register shifted by immediate
rsb reg, reg, reg, ishift	= dp_reg_immshift(AL, RSB, NOFLAGS)
rsbeq reg, reg, reg, ishift	= dp_reg_immshift(EQ, RSB, NOFLAGS)
rsbne reg, reg, reg, ishift	= dp_reg_immshift(NE, RSB, NOFLAGS)
rsbcs reg, reg, reg, ishift	= dp_reg_immshift(CS, RSB, NOFLAGS)
rsbcc reg, reg, reg, ishift	= dp_reg_immshift(CC, RSB, NOFLAGS)
rsbmi reg, reg, reg, ishift	= dp_reg_immshift(MI, RSB, NOFLAGS)
rsbpl reg, reg, reg, ishift	= dp_reg_immshift(PL, RSB, NOFLAGS)
rsbvs reg, reg, reg, ishift	= dp_reg_immshift(VS, RSB, NOFLAGS)
rsbvc reg, reg, reg, ishift	= dp_reg_immshift(VC, RSB, NOFLAGS)
rsbhi reg, reg, reg, ishift	= dp_reg_immshift(HI, RSB, NOFLAGS)
rsbls reg, reg, reg, ishift	= dp_reg_immshift(LS, RSB, NOFLAGS)
rsbge reg, reg, reg, ishift	= dp_reg_immshift(GE, RSB, NOFLAGS)
rsblt reg, reg, reg, ishift	= dp_reg_immshift(LT, RSB, NOFLAGS)
rsbgt reg, reg, reg, ishift	= dp_reg_immshift(GT, RSB, NOFLAGS)
rsble reg, reg, reg, ishift	= dp_reg_immshift(LE, RSB, NOFLAGS)
rsbal reg, reg, reg, ishift	= dp_reg_immshift(AL, RSB, NOFLAGS)

# register shifted by immediate with setflags
rsbs reg, reg, reg, ishift	= dp_reg_immshift(AL, RSB, SETFLAGS)
rsbeqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, RSB, SETFLAGS)
rsbseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, RSB, SETFLAGS)
rsbnes reg, reg, reg, ishift	= dp_reg_immshift(NE, RSB, SETFLAGS)
rsbsne reg, reg, reg, ishift	= dp_reg_immshift(NE, RSB, SETFLAGS)
rsbcss reg, reg, reg, ishift	= dp_reg_immshift(CS, RSB, SETFLAGS)
rsbscs reg, reg, reg, ishift	= dp_reg_immshift(CS, RSB, SETFLAGS)
rsbccs reg, reg, reg, ishift	= dp_reg_immshift(CC, RSB, SETFLAGS)
rsbscc reg, reg, reg, ishift	= dp_reg_immshift(CC, RSB, SETFLAGS)
rsbmis reg, reg, reg, ishift	= dp_reg_immshift(MI, RSB, SETFLAGS)
rsbsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, RSB, SETFLAGS)
rsbpls reg, reg, reg, ishift	= dp_reg_immshift(PL, RSB, SETFLAGS)
rsbspl reg, reg, reg, ishift	= dp_reg_immshift(PL, RSB, SETFLAGS)
rsbvss reg, reg, reg, ishift	= dp_reg_immshift(VS, RSB, SETFLAGS)
rsbsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, RSB, SETFLAGS)
rsbvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, RSB, SETFLAGS)
rsbsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, RSB, SETFLAGS)
rsbhis reg, reg, reg, ishift	= dp_reg_immshift(HI, RSB, SETFLAGS)
rsbshi reg, reg, reg, ishift	= dp_reg_immshift(HI, RSB, SETFLAGS)
rsblss reg, reg, reg, ishift	= dp_reg_immshift(LS, RSB, SETFLAGS)
rsbsls reg, reg, reg, ishift	= dp_reg_immshift(LS, RSB, SETFLAGS)
rsbges reg, reg, reg, ishift	= dp_reg_immshift(GE, RSB, SETFLAGS)
rsbsge reg, reg, reg, ishift	= dp_reg_immshift(GE, RSB, SETFLAGS)
rsblts reg, reg, reg, ishift	= dp_reg_immshift(LT, RSB, SETFLAGS)
rsbslt reg, reg, reg, ishift	= dp_reg_immshift(LT, RSB, SETFLAGS)
rsbgts reg, reg, reg, ishift	= dp_reg_immshift(GT, RSB, SETFLAGS)
rsbsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, RSB, SETFLAGS)
rsbles reg, reg, reg, ishift	= dp_reg_immshift(LE, RSB, SETFLAGS)
rsbsle reg, reg, reg, ishift	= dp_reg_immshift(LE, RSB, SETFLAGS)
rsbals reg, reg, reg, ishift	= dp_reg_immshift(AL, RSB, SETFLAGS)
rsbsal reg, reg, reg, ishift	= dp_reg_immshift(AL, RSB, SETFLAGS)

# register shifted by register
rsb reg, reg, reg, rshift	= dp_reg_regshift(AL, RSB, NOFLAGS)
rsbeq reg, reg, reg, rshift	= dp_reg_regshift(EQ, RSB, NOFLAGS)
rsbne reg, reg, reg, rshift	= dp_reg_regshift(NE, RSB, NOFLAGS)
rsbcs reg, reg, reg, rshift	= dp_reg_regshift(CS, RSB, NOFLAGS)
rsbcc reg, reg, reg, rshift	= dp_reg_regshift(CC, RSB, NOFLAGS)
rsbmi reg, reg, reg, rshift	= dp_reg_regshift(MI, RSB, NOFLAGS)
rsbpl reg, reg, reg, rshift	= dp_reg_regshift(PL, RSB, NOFLAGS)
rsbvs reg, reg, reg, rshift	= dp_reg_regshift(VS, RSB, NOFLAGS)
rsbvc reg, reg, reg, rshift	= dp_reg_regshift(VC, RSB, NOFLAGS)
rsbhi reg, reg, reg, rshift	= dp_reg_regshift(HI, RSB, NOFLAGS)
rsbls reg, reg, reg, rshift	= dp_reg_regshift(LS, RSB, NOFLAGS)
rsbge reg, reg, reg, rshift	= dp_reg_regshift(GE, RSB, NOFLAGS)
rsblt reg, reg, reg, rshift	= dp_reg_regshift(LT, RSB, NOFLAGS)
rsbgt reg, reg, reg, rshift	= dp_reg_regshift(GT, RSB, NOFLAGS)
rsble reg, reg, reg, rshift	= dp_reg_regshift(LE, RSB, NOFLAGS)
rsbal reg, reg, reg, rshift	= dp_reg_regshift(AL, RSB, NOFLAGS)

# register shifted by register with setflags
rsbs reg, reg, reg, rshift	= dp_reg_regshift(AL, RSB, SETFLAGS)
rsbeqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, RSB, SETFLAGS)
rsbseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, RSB, SETFLAGS)
rsbnes reg, reg, reg, rshift	= dp_reg_regshift(NE, RSB, SETFLAGS)
rsbsne reg, reg, reg, rshift	= dp_reg_regshift(NE, RSB, SETFLAGS)
rsbcss reg, reg, reg, rshift	= dp_reg_regshift(CS, RSB, SETFLAGS)
rsbscs reg, reg, reg, rshift	= dp_reg_regshift(CS, RSB, SETFLAGS)
rsbccs reg, reg, reg, rshift	= dp_reg_regshift(CC, RSB, SETFLAGS)
rsbscc reg, reg, reg, rshift	= dp_reg_regshift(CC, RSB, SETFLAGS)
rsbmis reg, reg, reg, rshift	= dp_reg_regshift(MI, RSB, SETFLAGS)
rsbsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, RSB, SETFLAGS)
rsbpls reg, reg, reg, rshift	= dp_reg_regshift(PL, RSB, SETFLAGS)
rsbspl reg, reg, reg, rshift	= dp_reg_regshift(PL, RSB, SETFLAGS)
rsbvss reg, reg, reg, rshift	= dp_reg_regshift(VS, RSB, SETFLAGS)
rsbsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, RSB, SETFLAGS)
rsbvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, RSB, SETFLAGS)
rsbsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, RSB, SETFLAGS)
rsbhis reg, reg, reg, rshift	= dp_reg_regshift(HI, RSB, SETFLAGS)
rsbshi reg, reg, reg, rshift	= dp_reg_regshift(HI, RSB, SETFLAGS)
rsblss reg, reg, reg, rshift	= dp_reg_regshift(LS, RSB, SETFLAGS)
rsbsls reg, reg, reg, rshift	= dp_reg_regshift(LS, RSB, SETFLAGS)
rsbges reg, reg, reg, rshift	= dp_reg_regshift(GE, RSB, SETFLAGS)
rsbsge reg, reg, reg, rshift	= dp_reg_regshift(GE, RSB, SETFLAGS)
rsblts reg, reg, reg, rshift	= dp_reg_regshift(LT, RSB, SETFLAGS)
rsbslt reg, reg, reg, rshift	= dp_reg_regshift(LT, RSB, SETFLAGS)
rsbgts reg, reg, reg, rshift	= dp_reg_regshift(GT, RSB, SETFLAGS)
rsbsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, RSB, SETFLAGS)
rsbles reg, reg, reg, rshift	= dp_reg_regshift(LE, RSB, SETFLAGS)
rsbsle reg, reg, reg, rshift	= dp_reg_regshift(LE, RSB, SETFLAGS)
rsbals reg, reg, reg, rshift	= dp_reg_regshift(AL, RSB, SETFLAGS)
rsbsal reg, reg, reg, rshift	= dp_reg_regshift(AL, RSB, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
rsb reg, imm			= dp_imm_DN(AL, RSB, NOFLAGS)
rsbeq reg, imm		= dp_imm_DN(EQ, RSB, NOFLAGS)
rsbne reg, imm		= dp_imm_DN(NE, RSB, NOFLAGS)
rsbcs reg, imm		= dp_imm_DN(CS, RSB, NOFLAGS)
rsbcc reg, imm		= dp_imm_DN(CC, RSB, NOFLAGS)
rsbmi reg, imm		= dp_imm_DN(MI, RSB, NOFLAGS)
rsbpl reg, imm		= dp_imm_DN(PL, RSB, NOFLAGS)
rsbvs reg, imm		= dp_imm_DN(VS, RSB, NOFLAGS)
rsbvc reg, imm		= dp_imm_DN(VC, RSB, NOFLAGS)
rsbhi reg, imm		= dp_imm_DN(HI, RSB, NOFLAGS)
rsbls reg, imm		= dp_imm_DN(LS, RSB, NOFLAGS)
rsbge reg, imm		= dp_imm_DN(GE, RSB, NOFLAGS)
rsblt reg, imm		= dp_imm_DN(LT, RSB, NOFLAGS)
rsbgt reg, imm		= dp_imm_DN(GT, RSB, NOFLAGS)
rsble reg, imm		= dp_imm_DN(LE, RSB, NOFLAGS)
rsbal reg, imm		= dp_imm_DN(AL, RSB, NOFLAGS)

# immediate with setflags with Rd == Rn
rsbs reg, imm		= dp_imm_DN(AL, RSB, SETFLAGS)
rsbseq reg, imm		= dp_imm_DN(EQ, RSB, SETFLAGS)
rsbeqs reg, imm		= dp_imm_DN(EQ, RSB, SETFLAGS)
rsbsne reg, imm		= dp_imm_DN(NE, RSB, SETFLAGS)
rsbnes reg, imm		= dp_imm_DN(NE, RSB, SETFLAGS)
rsbscs reg, imm		= dp_imm_DN(CS, RSB, SETFLAGS)
rsbcss reg, imm		= dp_imm_DN(CS, RSB, SETFLAGS)
rsbscc reg, imm		= dp_imm_DN(CC, RSB, SETFLAGS)
rsbccs reg, imm		= dp_imm_DN(CC, RSB, SETFLAGS)
rsbsmi reg, imm		= dp_imm_DN(MI, RSB, SETFLAGS)
rsbmis reg, imm		= dp_imm_DN(MI, RSB, SETFLAGS)
rsbspl reg, imm		= dp_imm_DN(PL, RSB, SETFLAGS)
rsbpls reg, imm		= dp_imm_DN(PL, RSB, SETFLAGS)
rsbsvs reg, imm		= dp_imm_DN(VS, RSB, SETFLAGS)
rsbvss reg, imm		= dp_imm_DN(VS, RSB, SETFLAGS)
rsbsvc reg, imm		= dp_imm_DN(VC, RSB, SETFLAGS)
rsbvcs reg, imm		= dp_imm_DN(VC, RSB, SETFLAGS)
rsbshi reg, imm		= dp_imm_DN(HI, RSB, SETFLAGS)
rsbhis reg, imm		= dp_imm_DN(HI, RSB, SETFLAGS)
rsbsls reg, imm		= dp_imm_DN(LS, RSB, SETFLAGS)
rsblss reg, imm		= dp_imm_DN(LS, RSB, SETFLAGS)
rsbsge reg, imm		= dp_imm_DN(GE, RSB, SETFLAGS)
rsbges reg, imm		= dp_imm_DN(GE, RSB, SETFLAGS)
rsbslt reg, imm		= dp_imm_DN(LT, RSB, SETFLAGS)
rsblts reg, imm		= dp_imm_DN(LT, RSB, SETFLAGS)
rsbsgt reg, imm		= dp_imm_DN(GT, RSB, SETFLAGS)
rsbgts reg, imm		= dp_imm_DN(GT, RSB, SETFLAGS)
rsbsle reg, imm		= dp_imm_DN(LE, RSB, SETFLAGS)
rsbles reg, imm		= dp_imm_DN(LE, RSB, SETFLAGS)
rsbsal reg, imm		= dp_imm_DN(AL, RSB, SETFLAGS)
rsbals reg, imm		= dp_imm_DN(AL, RSB, SETFLAGS)

# register shifted by nothing with Rd == Rn
rsb reg, reg			= dp_reg_immshift_DN(AL, RSB, NOFLAGS)
rsbeq reg, reg			= dp_reg_immshift_DN(EQ, RSB, NOFLAGS)
rsbne reg, reg			= dp_reg_immshift_DN(NE, RSB, NOFLAGS)
rsbcs reg, reg			= dp_reg_immshift_DN(CS, RSB, NOFLAGS)
rsbcc reg, reg			= dp_reg_immshift_DN(CC, RSB, NOFLAGS)
rsbmi reg, reg			= dp_reg_immshift_DN(MI, RSB, NOFLAGS)
rsbpl reg, reg			= dp_reg_immshift_DN(PL, RSB, NOFLAGS)
rsbvs reg, reg			= dp_reg_immshift_DN(VS, RSB, NOFLAGS)
rsbvc reg, reg			= dp_reg_immshift_DN(VC, RSB, NOFLAGS)
rsbhi reg, reg			= dp_reg_immshift_DN(HI, RSB, NOFLAGS)
rsbls reg, reg			= dp_reg_immshift_DN(LS, RSB, NOFLAGS)
rsbge reg, reg			= dp_reg_immshift_DN(GE, RSB, NOFLAGS)
rsblt reg, reg			= dp_reg_immshift_DN(LT, RSB, NOFLAGS)
rsbgt reg, reg			= dp_reg_immshift_DN(GT, RSB, NOFLAGS)
rsble reg, reg			= dp_reg_immshift_DN(LE, RSB, NOFLAGS)
rsbal reg, reg			= dp_reg_immshift_DN(AL, RSB, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
rsbs reg, reg			= dp_reg_immshift_DN(AL, RSB, SETFLAGS)
rsbeqs reg, reg			= dp_reg_immshift_DN(EQ, RSB, SETFLAGS)
rsbseq reg, reg			= dp_reg_immshift_DN(EQ, RSB, SETFLAGS)
rsbnes reg, reg			= dp_reg_immshift_DN(NE, RSB, SETFLAGS)
rsbsne reg, reg			= dp_reg_immshift_DN(NE, RSB, SETFLAGS)
rsbcss reg, reg			= dp_reg_immshift_DN(CS, RSB, SETFLAGS)
rsbscs reg, reg			= dp_reg_immshift_DN(CS, RSB, SETFLAGS)
rsbccs reg, reg			= dp_reg_immshift_DN(CC, RSB, SETFLAGS)
rsbscc reg, reg			= dp_reg_immshift_DN(CC, RSB, SETFLAGS)
rsbmis reg, reg			= dp_reg_immshift_DN(MI, RSB, SETFLAGS)
rsbsmi reg, reg			= dp_reg_immshift_DN(MI, RSB, SETFLAGS)
rsbpls reg, reg			= dp_reg_immshift_DN(PL, RSB, SETFLAGS)
rsbspl reg, reg			= dp_reg_immshift_DN(PL, RSB, SETFLAGS)
rsbvss reg, reg			= dp_reg_immshift_DN(VS, RSB, SETFLAGS)
rsbsvs reg, reg			= dp_reg_immshift_DN(VS, RSB, SETFLAGS)
rsbvcs reg, reg			= dp_reg_immshift_DN(VC, RSB, SETFLAGS)
rsbsvc reg, reg			= dp_reg_immshift_DN(VC, RSB, SETFLAGS)
rsbhis reg, reg			= dp_reg_immshift_DN(HI, RSB, SETFLAGS)
rsbshi reg, reg			= dp_reg_immshift_DN(HI, RSB, SETFLAGS)
rsblss reg, reg			= dp_reg_immshift_DN(LS, RSB, SETFLAGS)
rsbsls reg, reg			= dp_reg_immshift_DN(LS, RSB, SETFLAGS)
rsbges reg, reg			= dp_reg_immshift_DN(GE, RSB, SETFLAGS)
rsbsge reg, reg			= dp_reg_immshift_DN(GE, RSB, SETFLAGS)
rsblts reg, reg			= dp_reg_immshift_DN(LT, RSB, SETFLAGS)
rsbslt reg, reg			= dp_reg_immshift_DN(LT, RSB, SETFLAGS)
rsbgts reg, reg			= dp_reg_immshift_DN(GT, RSB, SETFLAGS)
rsbsgt reg, reg			= dp_reg_immshift_DN(GT, RSB, SETFLAGS)
rsbles reg, reg			= dp_reg_immshift_DN(LE, RSB, SETFLAGS)
rsbsle reg, reg			= dp_reg_immshift_DN(LE, RSB, SETFLAGS)
rsbals reg, reg			= dp_reg_immshift_DN(AL, RSB, SETFLAGS)
rsbsal reg, reg			= dp_reg_immshift_DN(AL, RSB, SETFLAGS)

# register shifted by immediate with Rd == Rn
rsb reg, reg, ishift		= dp_reg_immshift_DN(AL, RSB, NOFLAGS)
rsbeq reg, reg, ishift		= dp_reg_immshift_DN(EQ, RSB, NOFLAGS)
rsbne reg, reg, ishift		= dp_reg_immshift_DN(NE, RSB, NOFLAGS)
rsbcs reg, reg, ishift		= dp_reg_immshift_DN(CS, RSB, NOFLAGS)
rsbcc reg, reg, ishift		= dp_reg_immshift_DN(CC, RSB, NOFLAGS)
rsbmi reg, reg, ishift		= dp_reg_immshift_DN(MI, RSB, NOFLAGS)
rsbpl reg, reg, ishift		= dp_reg_immshift_DN(PL, RSB, NOFLAGS)
rsbvs reg, reg, ishift		= dp_reg_immshift_DN(VS, RSB, NOFLAGS)
rsbvc reg, reg, ishift		= dp_reg_immshift_DN(VC, RSB, NOFLAGS)
rsbhi reg, reg, ishift		= dp_reg_immshift_DN(HI, RSB, NOFLAGS)
rsbls reg, reg, ishift		= dp_reg_immshift_DN(LS, RSB, NOFLAGS)
rsbge reg, reg, ishift		= dp_reg_immshift_DN(GE, RSB, NOFLAGS)
rsblt reg, reg, ishift		= dp_reg_immshift_DN(LT, RSB, NOFLAGS)
rsbgt reg, reg, ishift		= dp_reg_immshift_DN(GT, RSB, NOFLAGS)
rsble reg, reg, ishift		= dp_reg_immshift_DN(LE, RSB, NOFLAGS)
rsbal reg, reg, ishift		= dp_reg_immshift_DN(AL, RSB, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
rsbs reg, reg, ishift		= dp_reg_immshift_DN(AL, RSB, SETFLAGS)
rsbeqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, RSB, SETFLAGS)
rsbseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, RSB, SETFLAGS)
rsbnes reg, reg, ishift		= dp_reg_immshift_DN(NE, RSB, SETFLAGS)
rsbsne reg, reg, ishift		= dp_reg_immshift_DN(NE, RSB, SETFLAGS)
rsbcss reg, reg, ishift		= dp_reg_immshift_DN(CS, RSB, SETFLAGS)
rsbscs reg, reg, ishift		= dp_reg_immshift_DN(CS, RSB, SETFLAGS)
rsbccs reg, reg, ishift		= dp_reg_immshift_DN(CC, RSB, SETFLAGS)
rsbscc reg, reg, ishift		= dp_reg_immshift_DN(CC, RSB, SETFLAGS)
rsbmis reg, reg, ishift		= dp_reg_immshift_DN(MI, RSB, SETFLAGS)
rsbsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, RSB, SETFLAGS)
rsbpls reg, reg, ishift		= dp_reg_immshift_DN(PL, RSB, SETFLAGS)
rsbspl reg, reg, ishift		= dp_reg_immshift_DN(PL, RSB, SETFLAGS)
rsbvss reg, reg, ishift		= dp_reg_immshift_DN(VS, RSB, SETFLAGS)
rsbsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, RSB, SETFLAGS)
rsbvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, RSB, SETFLAGS)
rsbsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, RSB, SETFLAGS)
rsbhis reg, reg, ishift		= dp_reg_immshift_DN(HI, RSB, SETFLAGS)
rsbshi reg, reg, ishift		= dp_reg_immshift_DN(HI, RSB, SETFLAGS)
rsblss reg, reg, ishift		= dp_reg_immshift_DN(LS, RSB, SETFLAGS)
rsbsls reg, reg, ishift		= dp_reg_immshift_DN(LS, RSB, SETFLAGS)
rsbges reg, reg, ishift		= dp_reg_immshift_DN(GE, RSB, SETFLAGS)
rsbsge reg, reg, ishift		= dp_reg_immshift_DN(GE, RSB, SETFLAGS)
rsblts reg, reg, ishift		= dp_reg_immshift_DN(LT, RSB, SETFLAGS)
rsbslt reg, reg, ishift		= dp_reg_immshift_DN(LT, RSB, SETFLAGS)
rsbgts reg, reg, ishift		= dp_reg_immshift_DN(GT, RSB, SETFLAGS)
rsbsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, RSB, SETFLAGS)
rsbles reg, reg, ishift		= dp_reg_immshift_DN(LE, RSB, SETFLAGS)
rsbsle reg, reg, ishift		= dp_reg_immshift_DN(LE, RSB, SETFLAGS)
rsbals reg, reg, ishift		= dp_reg_immshift_DN(AL, RSB, SETFLAGS)
rsbsal reg, reg, ishift		= dp_reg_immshift_DN(AL, RSB, SETFLAGS)

# register shifted by register with Rd == Rn
rsb reg, reg, rshift		= dp_reg_regshift_DN(AL, RSB, NOFLAGS)
rsbeq reg, reg, rshift		= dp_reg_regshift_DN(EQ, RSB, NOFLAGS)
rsbne reg, reg, rshift		= dp_reg_regshift_DN(NE, RSB, NOFLAGS)
rsbcs reg, reg, rshift		= dp_reg_regshift_DN(CS, RSB, NOFLAGS)
rsbcc reg, reg, rshift		= dp_reg_regshift_DN(CC, RSB, NOFLAGS)
rsbmi reg, reg, rshift		= dp_reg_regshift_DN(MI, RSB, NOFLAGS)
rsbpl reg, reg, rshift		= dp_reg_regshift_DN(PL, RSB, NOFLAGS)
rsbvs reg, reg, rshift		= dp_reg_regshift_DN(VS, RSB, NOFLAGS)
rsbvc reg, reg, rshift		= dp_reg_regshift_DN(VC, RSB, NOFLAGS)
rsbhi reg, reg, rshift		= dp_reg_regshift_DN(HI, RSB, NOFLAGS)
rsbls reg, reg, rshift		= dp_reg_regshift_DN(LS, RSB, NOFLAGS)
rsbge reg, reg, rshift		= dp_reg_regshift_DN(GE, RSB, NOFLAGS)
rsblt reg, reg, rshift		= dp_reg_regshift_DN(LT, RSB, NOFLAGS)
rsbgt reg, reg, rshift		= dp_reg_regshift_DN(GT, RSB, NOFLAGS)
rsble reg, reg, rshift		= dp_reg_regshift_DN(LE, RSB, NOFLAGS)
rsbal reg, reg, rshift		= dp_reg_regshift_DN(AL, RSB, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
rsbs reg, reg, rshift		= dp_reg_regshift_DN(AL, RSB, SETFLAGS)
rsbeqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, RSB, SETFLAGS)
rsbseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, RSB, SETFLAGS)
rsbnes reg, reg, rshift		= dp_reg_regshift_DN(NE, RSB, SETFLAGS)
rsbsne reg, reg, rshift		= dp_reg_regshift_DN(NE, RSB, SETFLAGS)
rsbcss reg, reg, rshift		= dp_reg_regshift_DN(CS, RSB, SETFLAGS)
rsbscs reg, reg, rshift		= dp_reg_regshift_DN(CS, RSB, SETFLAGS)
rsbccs reg, reg, rshift		= dp_reg_regshift_DN(CC, RSB, SETFLAGS)
rsbscc reg, reg, rshift		= dp_reg_regshift_DN(CC, RSB, SETFLAGS)
rsbmis reg, reg, rshift		= dp_reg_regshift_DN(MI, RSB, SETFLAGS)
rsbsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, RSB, SETFLAGS)
rsbpls reg, reg, rshift		= dp_reg_regshift_DN(PL, RSB, SETFLAGS)
rsbspl reg, reg, rshift		= dp_reg_regshift_DN(PL, RSB, SETFLAGS)
rsbvss reg, reg, rshift		= dp_reg_regshift_DN(VS, RSB, SETFLAGS)
rsbsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, RSB, SETFLAGS)
rsbvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, RSB, SETFLAGS)
rsbsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, RSB, SETFLAGS)
rsbhis reg, reg, rshift		= dp_reg_regshift_DN(HI, RSB, SETFLAGS)
rsbshi reg, reg, rshift		= dp_reg_regshift_DN(HI, RSB, SETFLAGS)
rsblss reg, reg, rshift		= dp_reg_regshift_DN(LS, RSB, SETFLAGS)
rsbsls reg, reg, rshift		= dp_reg_regshift_DN(LS, RSB, SETFLAGS)
rsbges reg, reg, rshift		= dp_reg_regshift_DN(GE, RSB, SETFLAGS)
rsbsge reg, reg, rshift		= dp_reg_regshift_DN(GE, RSB, SETFLAGS)
rsblts reg, reg, rshift		= dp_reg_regshift_DN(LT, RSB, SETFLAGS)
rsbslt reg, reg, rshift		= dp_reg_regshift_DN(LT, RSB, SETFLAGS)
rsbgts reg, reg, rshift		= dp_reg_regshift_DN(GT, RSB, SETFLAGS)
rsbsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, RSB, SETFLAGS)
rsbles reg, reg, rshift		= dp_reg_regshift_DN(LE, RSB, SETFLAGS)
rsbsle reg, reg, rshift		= dp_reg_regshift_DN(LE, RSB, SETFLAGS)
rsbals reg, reg, rshift		= dp_reg_regshift_DN(AL, RSB, SETFLAGS)
rsbsal reg, reg, rshift		= dp_reg_regshift_DN(AL, RSB, SETFLAGS)

#
# ADC
#

# immediate
adc reg, reg, imm		= dp_imm(AL, ADC, NOFLAGS)
adceq reg, reg, imm		= dp_imm(EQ, ADC, NOFLAGS)
adcne reg, reg, imm		= dp_imm(NE, ADC, NOFLAGS)
adccs reg, reg, imm		= dp_imm(CS, ADC, NOFLAGS)
adccc reg, reg, imm		= dp_imm(CC, ADC, NOFLAGS)
adcmi reg, reg, imm		= dp_imm(MI, ADC, NOFLAGS)
adcpl reg, reg, imm		= dp_imm(PL, ADC, NOFLAGS)
adcvs reg, reg, imm		= dp_imm(VS, ADC, NOFLAGS)
adcvc reg, reg, imm		= dp_imm(VC, ADC, NOFLAGS)
adchi reg, reg, imm		= dp_imm(HI, ADC, NOFLAGS)
adcls reg, reg, imm		= dp_imm(LS, ADC, NOFLAGS)
adcge reg, reg, imm		= dp_imm(GE, ADC, NOFLAGS)
adclt reg, reg, imm		= dp_imm(LT, ADC, NOFLAGS)
adcgt reg, reg, imm		= dp_imm(GT, ADC, NOFLAGS)
adcle reg, reg, imm		= dp_imm(LE, ADC, NOFLAGS)
adcal reg, reg, imm		= dp_imm(AL, ADC, NOFLAGS)

# immediate with setflags
adcs reg, reg, imm		= dp_imm(AL, ADC, SETFLAGS)
adcseq reg, reg, imm		= dp_imm(EQ, ADC, SETFLAGS)
adceqs reg, reg, imm		= dp_imm(EQ, ADC, SETFLAGS)
adcsne reg, reg, imm		= dp_imm(NE, ADC, SETFLAGS)
adcnes reg, reg, imm		= dp_imm(NE, ADC, SETFLAGS)
adcscs reg, reg, imm		= dp_imm(CS, ADC, SETFLAGS)
adccss reg, reg, imm		= dp_imm(CS, ADC, SETFLAGS)
adcscc reg, reg, imm		= dp_imm(CC, ADC, SETFLAGS)
adcccs reg, reg, imm		= dp_imm(CC, ADC, SETFLAGS)
adcsmi reg, reg, imm		= dp_imm(MI, ADC, SETFLAGS)
adcmis reg, reg, imm		= dp_imm(MI, ADC, SETFLAGS)
adcspl reg, reg, imm		= dp_imm(PL, ADC, SETFLAGS)
adcpls reg, reg, imm		= dp_imm(PL, ADC, SETFLAGS)
adcsvs reg, reg, imm		= dp_imm(VS, ADC, SETFLAGS)
adcvss reg, reg, imm		= dp_imm(VS, ADC, SETFLAGS)
adcsvc reg, reg, imm		= dp_imm(VC, ADC, SETFLAGS)
adcvcs reg, reg, imm		= dp_imm(VC, ADC, SETFLAGS)
adcshi reg, reg, imm		= dp_imm(HI, ADC, SETFLAGS)
adchis reg, reg, imm		= dp_imm(HI, ADC, SETFLAGS)
adcsls reg, reg, imm		= dp_imm(LS, ADC, SETFLAGS)
adclss reg, reg, imm		= dp_imm(LS, ADC, SETFLAGS)
adcsge reg, reg, imm		= dp_imm(GE, ADC, SETFLAGS)
adcges reg, reg, imm		= dp_imm(GE, ADC, SETFLAGS)
adcslt reg, reg, imm		= dp_imm(LT, ADC, SETFLAGS)
adclts reg, reg, imm		= dp_imm(LT, ADC, SETFLAGS)
adcsgt reg, reg, imm		= dp_imm(GT, ADC, SETFLAGS)
adcgts reg, reg, imm		= dp_imm(GT, ADC, SETFLAGS)
adcsle reg, reg, imm		= dp_imm(LE, ADC, SETFLAGS)
adcles reg, reg, imm		= dp_imm(LE, ADC, SETFLAGS)
adcsal reg, reg, imm		= dp_imm(AL, ADC, SETFLAGS)
adcals reg, reg, imm		= dp_imm(AL, ADC, SETFLAGS)

# register shifted by nothing
adc reg, reg, reg		= dp_reg_immshift(AL, ADC, NOFLAGS)
adceq reg, reg, reg		= dp_reg_immshift(EQ, ADC, NOFLAGS)
adcne reg, reg, reg		= dp_reg_immshift(NE, ADC, NOFLAGS)
adccs reg, reg, reg		= dp_reg_immshift(CS, ADC, NOFLAGS)
adccc reg, reg, reg		= dp_reg_immshift(CC, ADC, NOFLAGS)
adcmi reg, reg, reg		= dp_reg_immshift(MI, ADC, NOFLAGS)
adcpl reg, reg, reg		= dp_reg_immshift(PL, ADC, NOFLAGS)
adcvs reg, reg, reg		= dp_reg_immshift(VS, ADC, NOFLAGS)
adcvc reg, reg, reg		= dp_reg_immshift(VC, ADC, NOFLAGS)
adchi reg, reg, reg		= dp_reg_immshift(HI, ADC, NOFLAGS)
adcls reg, reg, reg		= dp_reg_immshift(LS, ADC, NOFLAGS)
adcge reg, reg, reg		= dp_reg_immshift(GE, ADC, NOFLAGS)
adclt reg, reg, reg		= dp_reg_immshift(LT, ADC, NOFLAGS)
adcgt reg, reg, reg		= dp_reg_immshift(GT, ADC, NOFLAGS)
adcle reg, reg, reg		= dp_reg_immshift(LE, ADC, NOFLAGS)
adcal reg, reg, reg		= dp_reg_immshift(AL, ADC, NOFLAGS)

# register shifted by nothing with setflags
adcs reg, reg, reg		= dp_reg_immshift(AL, ADC, SETFLAGS)
adceqs reg, reg, reg		= dp_reg_immshift(EQ, ADC, SETFLAGS)
adcseq reg, reg, reg		= dp_reg_immshift(EQ, ADC, SETFLAGS)
adcnes reg, reg, reg		= dp_reg_immshift(NE, ADC, SETFLAGS)
adcsne reg, reg, reg		= dp_reg_immshift(NE, ADC, SETFLAGS)
adccss reg, reg, reg		= dp_reg_immshift(CS, ADC, SETFLAGS)
adcscs reg, reg, reg		= dp_reg_immshift(CS, ADC, SETFLAGS)
adcccs reg, reg, reg		= dp_reg_immshift(CC, ADC, SETFLAGS)
adcscc reg, reg, reg		= dp_reg_immshift(CC, ADC, SETFLAGS)
adcmis reg, reg, reg		= dp_reg_immshift(MI, ADC, SETFLAGS)
adcsmi reg, reg, reg		= dp_reg_immshift(MI, ADC, SETFLAGS)
adcpls reg, reg, reg		= dp_reg_immshift(PL, ADC, SETFLAGS)
adcspl reg, reg, reg		= dp_reg_immshift(PL, ADC, SETFLAGS)
adcvss reg, reg, reg		= dp_reg_immshift(VS, ADC, SETFLAGS)
adcsvs reg, reg, reg		= dp_reg_immshift(VS, ADC, SETFLAGS)
adcvcs reg, reg, reg		= dp_reg_immshift(VC, ADC, SETFLAGS)
adcsvc reg, reg, reg		= dp_reg_immshift(VC, ADC, SETFLAGS)
adchis reg, reg, reg		= dp_reg_immshift(HI, ADC, SETFLAGS)
adcshi reg, reg, reg		= dp_reg_immshift(HI, ADC, SETFLAGS)
adclss reg, reg, reg		= dp_reg_immshift(LS, ADC, SETFLAGS)
adcsls reg, reg, reg		= dp_reg_immshift(LS, ADC, SETFLAGS)
adcges reg, reg, reg		= dp_reg_immshift(GE, ADC, SETFLAGS)
adcsge reg, reg, reg		= dp_reg_immshift(GE, ADC, SETFLAGS)
adclts reg, reg, reg		= dp_reg_immshift(LT, ADC, SETFLAGS)
adcslt reg, reg, reg		= dp_reg_immshift(LT, ADC, SETFLAGS)
adcgts reg, reg, reg		= dp_reg_immshift(GT, ADC, SETFLAGS)
adcsgt reg, reg, reg		= dp_reg_immshift(GT, ADC, SETFLAGS)
adcles reg, reg, reg		= dp_reg_immshift(LE, ADC, SETFLAGS)
adcsle reg, reg, reg		= dp_reg_immshift(LE, ADC, SETFLAGS)
adcals reg, reg, reg		= dp_reg_immshift(AL, ADC, SETFLAGS)
adcsal reg, reg, reg		= dp_reg_immshift(AL, ADC, SETFLAGS)

# register shifted by immediate
adc reg, reg, reg, ishift	= dp_reg_immshift(AL, ADC, NOFLAGS)
adceq reg, reg, reg, ishift	= dp_reg_immshift(EQ, ADC, NOFLAGS)
adcne reg, reg, reg, ishift	= dp_reg_immshift(NE, ADC, NOFLAGS)
adccs reg, reg, reg, ishift	= dp_reg_immshift(CS, ADC, NOFLAGS)
adccc reg, reg, reg, ishift	= dp_reg_immshift(CC, ADC, NOFLAGS)
adcmi reg, reg, reg, ishift	= dp_reg_immshift(MI, ADC, NOFLAGS)
adcpl reg, reg, reg, ishift	= dp_reg_immshift(PL, ADC, NOFLAGS)
adcvs reg, reg, reg, ishift	= dp_reg_immshift(VS, ADC, NOFLAGS)
adcvc reg, reg, reg, ishift	= dp_reg_immshift(VC, ADC, NOFLAGS)
adchi reg, reg, reg, ishift	= dp_reg_immshift(HI, ADC, NOFLAGS)
adcls reg, reg, reg, ishift	= dp_reg_immshift(LS, ADC, NOFLAGS)
adcge reg, reg, reg, ishift	= dp_reg_immshift(GE, ADC, NOFLAGS)
adclt reg, reg, reg, ishift	= dp_reg_immshift(LT, ADC, NOFLAGS)
adcgt reg, reg, reg, ishift	= dp_reg_immshift(GT, ADC, NOFLAGS)
adcle reg, reg, reg, ishift	= dp_reg_immshift(LE, ADC, NOFLAGS)
adcal reg, reg, reg, ishift	= dp_reg_immshift(AL, ADC, NOFLAGS)

# register shifted by immediate with setflags
adcs reg, reg, reg, ishift	= dp_reg_immshift(AL, ADC, SETFLAGS)
adceqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, ADC, SETFLAGS)
adcseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, ADC, SETFLAGS)
adcnes reg, reg, reg, ishift	= dp_reg_immshift(NE, ADC, SETFLAGS)
adcsne reg, reg, reg, ishift	= dp_reg_immshift(NE, ADC, SETFLAGS)
adccss reg, reg, reg, ishift	= dp_reg_immshift(CS, ADC, SETFLAGS)
adcscs reg, reg, reg, ishift	= dp_reg_immshift(CS, ADC, SETFLAGS)
adcccs reg, reg, reg, ishift	= dp_reg_immshift(CC, ADC, SETFLAGS)
adcscc reg, reg, reg, ishift	= dp_reg_immshift(CC, ADC, SETFLAGS)
adcmis reg, reg, reg, ishift	= dp_reg_immshift(MI, ADC, SETFLAGS)
adcsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, ADC, SETFLAGS)
adcpls reg, reg, reg, ishift	= dp_reg_immshift(PL, ADC, SETFLAGS)
adcspl reg, reg, reg, ishift	= dp_reg_immshift(PL, ADC, SETFLAGS)
adcvss reg, reg, reg, ishift	= dp_reg_immshift(VS, ADC, SETFLAGS)
adcsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, ADC, SETFLAGS)
adcvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, ADC, SETFLAGS)
adcsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, ADC, SETFLAGS)
adchis reg, reg, reg, ishift	= dp_reg_immshift(HI, ADC, SETFLAGS)
adcshi reg, reg, reg, ishift	= dp_reg_immshift(HI, ADC, SETFLAGS)
adclss reg, reg, reg, ishift	= dp_reg_immshift(LS, ADC, SETFLAGS)
adcsls reg, reg, reg, ishift	= dp_reg_immshift(LS, ADC, SETFLAGS)
adcges reg, reg, reg, ishift	= dp_reg_immshift(GE, ADC, SETFLAGS)
adcsge reg, reg, reg, ishift	= dp_reg_immshift(GE, ADC, SETFLAGS)
adclts reg, reg, reg, ishift	= dp_reg_immshift(LT, ADC, SETFLAGS)
adcslt reg, reg, reg, ishift	= dp_reg_immshift(LT, ADC, SETFLAGS)
adcgts reg, reg, reg, ishift	= dp_reg_immshift(GT, ADC, SETFLAGS)
adcsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, ADC, SETFLAGS)
adcles reg, reg, reg, ishift	= dp_reg_immshift(LE, ADC, SETFLAGS)
adcsle reg, reg, reg, ishift	= dp_reg_immshift(LE, ADC, SETFLAGS)
adcals reg, reg, reg, ishift	= dp_reg_immshift(AL, ADC, SETFLAGS)
adcsal reg, reg, reg, ishift	= dp_reg_immshift(AL, ADC, SETFLAGS)

# register shifted by register
adc reg, reg, reg, rshift	= dp_reg_regshift(AL, ADC, NOFLAGS)
adceq reg, reg, reg, rshift	= dp_reg_regshift(EQ, ADC, NOFLAGS)
adcne reg, reg, reg, rshift	= dp_reg_regshift(NE, ADC, NOFLAGS)
adccs reg, reg, reg, rshift	= dp_reg_regshift(CS, ADC, NOFLAGS)
adccc reg, reg, reg, rshift	= dp_reg_regshift(CC, ADC, NOFLAGS)
adcmi reg, reg, reg, rshift	= dp_reg_regshift(MI, ADC, NOFLAGS)
adcpl reg, reg, reg, rshift	= dp_reg_regshift(PL, ADC, NOFLAGS)
adcvs reg, reg, reg, rshift	= dp_reg_regshift(VS, ADC, NOFLAGS)
adcvc reg, reg, reg, rshift	= dp_reg_regshift(VC, ADC, NOFLAGS)
adchi reg, reg, reg, rshift	= dp_reg_regshift(HI, ADC, NOFLAGS)
adcls reg, reg, reg, rshift	= dp_reg_regshift(LS, ADC, NOFLAGS)
adcge reg, reg, reg, rshift	= dp_reg_regshift(GE, ADC, NOFLAGS)
adclt reg, reg, reg, rshift	= dp_reg_regshift(LT, ADC, NOFLAGS)
adcgt reg, reg, reg, rshift	= dp_reg_regshift(GT, ADC, NOFLAGS)
adcle reg, reg, reg, rshift	= dp_reg_regshift(LE, ADC, NOFLAGS)
adcal reg, reg, reg, rshift	= dp_reg_regshift(AL, ADC, NOFLAGS)

# register shifted by register with setflags
adcs reg, reg, reg, rshift	= dp_reg_regshift(AL, ADC, SETFLAGS)
adceqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, ADC, SETFLAGS)
adcseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, ADC, SETFLAGS)
adcnes reg, reg, reg, rshift	= dp_reg_regshift(NE, ADC, SETFLAGS)
adcsne reg, reg, reg, rshift	= dp_reg_regshift(NE, ADC, SETFLAGS)
adccss reg, reg, reg, rshift	= dp_reg_regshift(CS, ADC, SETFLAGS)
adcscs reg, reg, reg, rshift	= dp_reg_regshift(CS, ADC, SETFLAGS)
adcccs reg, reg, reg, rshift	= dp_reg_regshift(CC, ADC, SETFLAGS)
adcscc reg, reg, reg, rshift	= dp_reg_regshift(CC, ADC, SETFLAGS)
adcmis reg, reg, reg, rshift	= dp_reg_regshift(MI, ADC, SETFLAGS)
adcsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, ADC, SETFLAGS)
adcpls reg, reg, reg, rshift	= dp_reg_regshift(PL, ADC, SETFLAGS)
adcspl reg, reg, reg, rshift	= dp_reg_regshift(PL, ADC, SETFLAGS)
adcvss reg, reg, reg, rshift	= dp_reg_regshift(VS, ADC, SETFLAGS)
adcsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, ADC, SETFLAGS)
adcvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, ADC, SETFLAGS)
adcsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, ADC, SETFLAGS)
adchis reg, reg, reg, rshift	= dp_reg_regshift(HI, ADC, SETFLAGS)
adcshi reg, reg, reg, rshift	= dp_reg_regshift(HI, ADC, SETFLAGS)
adclss reg, reg, reg, rshift	= dp_reg_regshift(LS, ADC, SETFLAGS)
adcsls reg, reg, reg, rshift	= dp_reg_regshift(LS, ADC, SETFLAGS)
adcges reg, reg, reg, rshift	= dp_reg_regshift(GE, ADC, SETFLAGS)
adcsge reg, reg, reg, rshift	= dp_reg_regshift(GE, ADC, SETFLAGS)
adclts reg, reg, reg, rshift	= dp_reg_regshift(LT, ADC, SETFLAGS)
adcslt reg, reg, reg, rshift	= dp_reg_regshift(LT, ADC, SETFLAGS)
adcgts reg, reg, reg, rshift	= dp_reg_regshift(GT, ADC, SETFLAGS)
adcsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, ADC, SETFLAGS)
adcles reg, reg, reg, rshift	= dp_reg_regshift(LE, ADC, SETFLAGS)
adcsle reg, reg, reg, rshift	= dp_reg_regshift(LE, ADC, SETFLAGS)
adcals reg, reg, reg, rshift	= dp_reg_regshift(AL, ADC, SETFLAGS)
adcsal reg, reg, reg, rshift	= dp_reg_regshift(AL, ADC, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
adc reg, imm			= dp_imm_DN(AL, ADC, NOFLAGS)
adceq reg, imm		= dp_imm_DN(EQ, ADC, NOFLAGS)
adcne reg, imm		= dp_imm_DN(NE, ADC, NOFLAGS)
adccs reg, imm		= dp_imm_DN(CS, ADC, NOFLAGS)
adccc reg, imm		= dp_imm_DN(CC, ADC, NOFLAGS)
adcmi reg, imm		= dp_imm_DN(MI, ADC, NOFLAGS)
adcpl reg, imm		= dp_imm_DN(PL, ADC, NOFLAGS)
adcvs reg, imm		= dp_imm_DN(VS, ADC, NOFLAGS)
adcvc reg, imm		= dp_imm_DN(VC, ADC, NOFLAGS)
adchi reg, imm		= dp_imm_DN(HI, ADC, NOFLAGS)
adcls reg, imm		= dp_imm_DN(LS, ADC, NOFLAGS)
adcge reg, imm		= dp_imm_DN(GE, ADC, NOFLAGS)
adclt reg, imm		= dp_imm_DN(LT, ADC, NOFLAGS)
adcgt reg, imm		= dp_imm_DN(GT, ADC, NOFLAGS)
adcle reg, imm		= dp_imm_DN(LE, ADC, NOFLAGS)
adcal reg, imm		= dp_imm_DN(AL, ADC, NOFLAGS)

# immediate with setflags with Rd == Rn
adcs reg, imm		= dp_imm_DN(AL, ADC, SETFLAGS)
adcseq reg, imm		= dp_imm_DN(EQ, ADC, SETFLAGS)
adceqs reg, imm		= dp_imm_DN(EQ, ADC, SETFLAGS)
adcsne reg, imm		= dp_imm_DN(NE, ADC, SETFLAGS)
adcnes reg, imm		= dp_imm_DN(NE, ADC, SETFLAGS)
adcscs reg, imm		= dp_imm_DN(CS, ADC, SETFLAGS)
adccss reg, imm		= dp_imm_DN(CS, ADC, SETFLAGS)
adcscc reg, imm		= dp_imm_DN(CC, ADC, SETFLAGS)
adcccs reg, imm		= dp_imm_DN(CC, ADC, SETFLAGS)
adcsmi reg, imm		= dp_imm_DN(MI, ADC, SETFLAGS)
adcmis reg, imm		= dp_imm_DN(MI, ADC, SETFLAGS)
adcspl reg, imm		= dp_imm_DN(PL, ADC, SETFLAGS)
adcpls reg, imm		= dp_imm_DN(PL, ADC, SETFLAGS)
adcsvs reg, imm		= dp_imm_DN(VS, ADC, SETFLAGS)
adcvss reg, imm		= dp_imm_DN(VS, ADC, SETFLAGS)
adcsvc reg, imm		= dp_imm_DN(VC, ADC, SETFLAGS)
adcvcs reg, imm		= dp_imm_DN(VC, ADC, SETFLAGS)
adcshi reg, imm		= dp_imm_DN(HI, ADC, SETFLAGS)
adchis reg, imm		= dp_imm_DN(HI, ADC, SETFLAGS)
adcsls reg, imm		= dp_imm_DN(LS, ADC, SETFLAGS)
adclss reg, imm		= dp_imm_DN(LS, ADC, SETFLAGS)
adcsge reg, imm		= dp_imm_DN(GE, ADC, SETFLAGS)
adcges reg, imm		= dp_imm_DN(GE, ADC, SETFLAGS)
adcslt reg, imm		= dp_imm_DN(LT, ADC, SETFLAGS)
adclts reg, imm		= dp_imm_DN(LT, ADC, SETFLAGS)
adcsgt reg, imm		= dp_imm_DN(GT, ADC, SETFLAGS)
adcgts reg, imm		= dp_imm_DN(GT, ADC, SETFLAGS)
adcsle reg, imm		= dp_imm_DN(LE, ADC, SETFLAGS)
adcles reg, imm		= dp_imm_DN(LE, ADC, SETFLAGS)
adcsal reg, imm		= dp_imm_DN(AL, ADC, SETFLAGS)
adcals reg, imm		= dp_imm_DN(AL, ADC, SETFLAGS)

# register shifted by nothing with Rd == Rn
adc reg, reg			= dp_reg_immshift_DN(AL, ADC, NOFLAGS)
adceq reg, reg			= dp_reg_immshift_DN(EQ, ADC, NOFLAGS)
adcne reg, reg			= dp_reg_immshift_DN(NE, ADC, NOFLAGS)
adccs reg, reg			= dp_reg_immshift_DN(CS, ADC, NOFLAGS)
adccc reg, reg			= dp_reg_immshift_DN(CC, ADC, NOFLAGS)
adcmi reg, reg			= dp_reg_immshift_DN(MI, ADC, NOFLAGS)
adcpl reg, reg			= dp_reg_immshift_DN(PL, ADC, NOFLAGS)
adcvs reg, reg			= dp_reg_immshift_DN(VS, ADC, NOFLAGS)
adcvc reg, reg			= dp_reg_immshift_DN(VC, ADC, NOFLAGS)
adchi reg, reg			= dp_reg_immshift_DN(HI, ADC, NOFLAGS)
adcls reg, reg			= dp_reg_immshift_DN(LS, ADC, NOFLAGS)
adcge reg, reg			= dp_reg_immshift_DN(GE, ADC, NOFLAGS)
adclt reg, reg			= dp_reg_immshift_DN(LT, ADC, NOFLAGS)
adcgt reg, reg			= dp_reg_immshift_DN(GT, ADC, NOFLAGS)
adcle reg, reg			= dp_reg_immshift_DN(LE, ADC, NOFLAGS)
adcal reg, reg			= dp_reg_immshift_DN(AL, ADC, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
adcs reg, reg			= dp_reg_immshift_DN(AL, ADC, SETFLAGS)
adceqs reg, reg			= dp_reg_immshift_DN(EQ, ADC, SETFLAGS)
adcseq reg, reg			= dp_reg_immshift_DN(EQ, ADC, SETFLAGS)
adcnes reg, reg			= dp_reg_immshift_DN(NE, ADC, SETFLAGS)
adcsne reg, reg			= dp_reg_immshift_DN(NE, ADC, SETFLAGS)
adccss reg, reg			= dp_reg_immshift_DN(CS, ADC, SETFLAGS)
adcscs reg, reg			= dp_reg_immshift_DN(CS, ADC, SETFLAGS)
adcccs reg, reg			= dp_reg_immshift_DN(CC, ADC, SETFLAGS)
adcscc reg, reg			= dp_reg_immshift_DN(CC, ADC, SETFLAGS)
adcmis reg, reg			= dp_reg_immshift_DN(MI, ADC, SETFLAGS)
adcsmi reg, reg			= dp_reg_immshift_DN(MI, ADC, SETFLAGS)
adcpls reg, reg			= dp_reg_immshift_DN(PL, ADC, SETFLAGS)
adcspl reg, reg			= dp_reg_immshift_DN(PL, ADC, SETFLAGS)
adcvss reg, reg			= dp_reg_immshift_DN(VS, ADC, SETFLAGS)
adcsvs reg, reg			= dp_reg_immshift_DN(VS, ADC, SETFLAGS)
adcvcs reg, reg			= dp_reg_immshift_DN(VC, ADC, SETFLAGS)
adcsvc reg, reg			= dp_reg_immshift_DN(VC, ADC, SETFLAGS)
adchis reg, reg			= dp_reg_immshift_DN(HI, ADC, SETFLAGS)
adcshi reg, reg			= dp_reg_immshift_DN(HI, ADC, SETFLAGS)
adclss reg, reg			= dp_reg_immshift_DN(LS, ADC, SETFLAGS)
adcsls reg, reg			= dp_reg_immshift_DN(LS, ADC, SETFLAGS)
adcges reg, reg			= dp_reg_immshift_DN(GE, ADC, SETFLAGS)
adcsge reg, reg			= dp_reg_immshift_DN(GE, ADC, SETFLAGS)
adclts reg, reg			= dp_reg_immshift_DN(LT, ADC, SETFLAGS)
adcslt reg, reg			= dp_reg_immshift_DN(LT, ADC, SETFLAGS)
adcgts reg, reg			= dp_reg_immshift_DN(GT, ADC, SETFLAGS)
adcsgt reg, reg			= dp_reg_immshift_DN(GT, ADC, SETFLAGS)
adcles reg, reg			= dp_reg_immshift_DN(LE, ADC, SETFLAGS)
adcsle reg, reg			= dp_reg_immshift_DN(LE, ADC, SETFLAGS)
adcals reg, reg			= dp_reg_immshift_DN(AL, ADC, SETFLAGS)
adcsal reg, reg			= dp_reg_immshift_DN(AL, ADC, SETFLAGS)

# register shifted by immediate with Rd == Rn
adc reg, reg, ishift		= dp_reg_immshift_DN(AL, ADC, NOFLAGS)
adceq reg, reg, ishift		= dp_reg_immshift_DN(EQ, ADC, NOFLAGS)
adcne reg, reg, ishift		= dp_reg_immshift_DN(NE, ADC, NOFLAGS)
adccs reg, reg, ishift		= dp_reg_immshift_DN(CS, ADC, NOFLAGS)
adccc reg, reg, ishift		= dp_reg_immshift_DN(CC, ADC, NOFLAGS)
adcmi reg, reg, ishift		= dp_reg_immshift_DN(MI, ADC, NOFLAGS)
adcpl reg, reg, ishift		= dp_reg_immshift_DN(PL, ADC, NOFLAGS)
adcvs reg, reg, ishift		= dp_reg_immshift_DN(VS, ADC, NOFLAGS)
adcvc reg, reg, ishift		= dp_reg_immshift_DN(VC, ADC, NOFLAGS)
adchi reg, reg, ishift		= dp_reg_immshift_DN(HI, ADC, NOFLAGS)
adcls reg, reg, ishift		= dp_reg_immshift_DN(LS, ADC, NOFLAGS)
adcge reg, reg, ishift		= dp_reg_immshift_DN(GE, ADC, NOFLAGS)
adclt reg, reg, ishift		= dp_reg_immshift_DN(LT, ADC, NOFLAGS)
adcgt reg, reg, ishift		= dp_reg_immshift_DN(GT, ADC, NOFLAGS)
adcle reg, reg, ishift		= dp_reg_immshift_DN(LE, ADC, NOFLAGS)
adcal reg, reg, ishift		= dp_reg_immshift_DN(AL, ADC, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
adcs reg, reg, ishift		= dp_reg_immshift_DN(AL, ADC, SETFLAGS)
adceqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, ADC, SETFLAGS)
adcseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, ADC, SETFLAGS)
adcnes reg, reg, ishift		= dp_reg_immshift_DN(NE, ADC, SETFLAGS)
adcsne reg, reg, ishift		= dp_reg_immshift_DN(NE, ADC, SETFLAGS)
adccss reg, reg, ishift		= dp_reg_immshift_DN(CS, ADC, SETFLAGS)
adcscs reg, reg, ishift		= dp_reg_immshift_DN(CS, ADC, SETFLAGS)
adcccs reg, reg, ishift		= dp_reg_immshift_DN(CC, ADC, SETFLAGS)
adcscc reg, reg, ishift		= dp_reg_immshift_DN(CC, ADC, SETFLAGS)
adcmis reg, reg, ishift		= dp_reg_immshift_DN(MI, ADC, SETFLAGS)
adcsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, ADC, SETFLAGS)
adcpls reg, reg, ishift		= dp_reg_immshift_DN(PL, ADC, SETFLAGS)
adcspl reg, reg, ishift		= dp_reg_immshift_DN(PL, ADC, SETFLAGS)
adcvss reg, reg, ishift		= dp_reg_immshift_DN(VS, ADC, SETFLAGS)
adcsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, ADC, SETFLAGS)
adcvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, ADC, SETFLAGS)
adcsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, ADC, SETFLAGS)
adchis reg, reg, ishift		= dp_reg_immshift_DN(HI, ADC, SETFLAGS)
adcshi reg, reg, ishift		= dp_reg_immshift_DN(HI, ADC, SETFLAGS)
adclss reg, reg, ishift		= dp_reg_immshift_DN(LS, ADC, SETFLAGS)
adcsls reg, reg, ishift		= dp_reg_immshift_DN(LS, ADC, SETFLAGS)
adcges reg, reg, ishift		= dp_reg_immshift_DN(GE, ADC, SETFLAGS)
adcsge reg, reg, ishift		= dp_reg_immshift_DN(GE, ADC, SETFLAGS)
adclts reg, reg, ishift		= dp_reg_immshift_DN(LT, ADC, SETFLAGS)
adcslt reg, reg, ishift		= dp_reg_immshift_DN(LT, ADC, SETFLAGS)
adcgts reg, reg, ishift		= dp_reg_immshift_DN(GT, ADC, SETFLAGS)
adcsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, ADC, SETFLAGS)
adcles reg, reg, ishift		= dp_reg_immshift_DN(LE, ADC, SETFLAGS)
adcsle reg, reg, ishift		= dp_reg_immshift_DN(LE, ADC, SETFLAGS)
adcals reg, reg, ishift		= dp_reg_immshift_DN(AL, ADC, SETFLAGS)
adcsal reg, reg, ishift		= dp_reg_immshift_DN(AL, ADC, SETFLAGS)

# register shifted by register with Rd == Rn
adc reg, reg, rshift		= dp_reg_regshift_DN(AL, ADC, NOFLAGS)
adceq reg, reg, rshift		= dp_reg_regshift_DN(EQ, ADC, NOFLAGS)
adcne reg, reg, rshift		= dp_reg_regshift_DN(NE, ADC, NOFLAGS)
adccs reg, reg, rshift		= dp_reg_regshift_DN(CS, ADC, NOFLAGS)
adccc reg, reg, rshift		= dp_reg_regshift_DN(CC, ADC, NOFLAGS)
adcmi reg, reg, rshift		= dp_reg_regshift_DN(MI, ADC, NOFLAGS)
adcpl reg, reg, rshift		= dp_reg_regshift_DN(PL, ADC, NOFLAGS)
adcvs reg, reg, rshift		= dp_reg_regshift_DN(VS, ADC, NOFLAGS)
adcvc reg, reg, rshift		= dp_reg_regshift_DN(VC, ADC, NOFLAGS)
adchi reg, reg, rshift		= dp_reg_regshift_DN(HI, ADC, NOFLAGS)
adcls reg, reg, rshift		= dp_reg_regshift_DN(LS, ADC, NOFLAGS)
adcge reg, reg, rshift		= dp_reg_regshift_DN(GE, ADC, NOFLAGS)
adclt reg, reg, rshift		= dp_reg_regshift_DN(LT, ADC, NOFLAGS)
adcgt reg, reg, rshift		= dp_reg_regshift_DN(GT, ADC, NOFLAGS)
adcle reg, reg, rshift		= dp_reg_regshift_DN(LE, ADC, NOFLAGS)
adcal reg, reg, rshift		= dp_reg_regshift_DN(AL, ADC, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
adcs reg, reg, rshift		= dp_reg_regshift_DN(AL, ADC, SETFLAGS)
adceqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, ADC, SETFLAGS)
adcseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, ADC, SETFLAGS)
adcnes reg, reg, rshift		= dp_reg_regshift_DN(NE, ADC, SETFLAGS)
adcsne reg, reg, rshift		= dp_reg_regshift_DN(NE, ADC, SETFLAGS)
adccss reg, reg, rshift		= dp_reg_regshift_DN(CS, ADC, SETFLAGS)
adcscs reg, reg, rshift		= dp_reg_regshift_DN(CS, ADC, SETFLAGS)
adcccs reg, reg, rshift		= dp_reg_regshift_DN(CC, ADC, SETFLAGS)
adcscc reg, reg, rshift		= dp_reg_regshift_DN(CC, ADC, SETFLAGS)
adcmis reg, reg, rshift		= dp_reg_regshift_DN(MI, ADC, SETFLAGS)
adcsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, ADC, SETFLAGS)
adcpls reg, reg, rshift		= dp_reg_regshift_DN(PL, ADC, SETFLAGS)
adcspl reg, reg, rshift		= dp_reg_regshift_DN(PL, ADC, SETFLAGS)
adcvss reg, reg, rshift		= dp_reg_regshift_DN(VS, ADC, SETFLAGS)
adcsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, ADC, SETFLAGS)
adcvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, ADC, SETFLAGS)
adcsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, ADC, SETFLAGS)
adchis reg, reg, rshift		= dp_reg_regshift_DN(HI, ADC, SETFLAGS)
adcshi reg, reg, rshift		= dp_reg_regshift_DN(HI, ADC, SETFLAGS)
adclss reg, reg, rshift		= dp_reg_regshift_DN(LS, ADC, SETFLAGS)
adcsls reg, reg, rshift		= dp_reg_regshift_DN(LS, ADC, SETFLAGS)
adcges reg, reg, rshift		= dp_reg_regshift_DN(GE, ADC, SETFLAGS)
adcsge reg, reg, rshift		= dp_reg_regshift_DN(GE, ADC, SETFLAGS)
adclts reg, reg, rshift		= dp_reg_regshift_DN(LT, ADC, SETFLAGS)
adcslt reg, reg, rshift		= dp_reg_regshift_DN(LT, ADC, SETFLAGS)
adcgts reg, reg, rshift		= dp_reg_regshift_DN(GT, ADC, SETFLAGS)
adcsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, ADC, SETFLAGS)
adcles reg, reg, rshift		= dp_reg_regshift_DN(LE, ADC, SETFLAGS)
adcsle reg, reg, rshift		= dp_reg_regshift_DN(LE, ADC, SETFLAGS)
adcals reg, reg, rshift		= dp_reg_regshift_DN(AL, ADC, SETFLAGS)
adcsal reg, reg, rshift		= dp_reg_regshift_DN(AL, ADC, SETFLAGS)

#
# SBC
#

# immediate
sbc reg, reg, imm		= dp_imm(AL, SBC, NOFLAGS)
sbceq reg, reg, imm		= dp_imm(EQ, SBC, NOFLAGS)
sbcne reg, reg, imm		= dp_imm(NE, SBC, NOFLAGS)
sbccs reg, reg, imm		= dp_imm(CS, SBC, NOFLAGS)
sbccc reg, reg, imm		= dp_imm(CC, SBC, NOFLAGS)
sbcmi reg, reg, imm		= dp_imm(MI, SBC, NOFLAGS)
sbcpl reg, reg, imm		= dp_imm(PL, SBC, NOFLAGS)
sbcvs reg, reg, imm		= dp_imm(VS, SBC, NOFLAGS)
sbcvc reg, reg, imm		= dp_imm(VC, SBC, NOFLAGS)
sbchi reg, reg, imm		= dp_imm(HI, SBC, NOFLAGS)
sbcls reg, reg, imm		= dp_imm(LS, SBC, NOFLAGS)
sbcge reg, reg, imm		= dp_imm(GE, SBC, NOFLAGS)
sbclt reg, reg, imm		= dp_imm(LT, SBC, NOFLAGS)
sbcgt reg, reg, imm		= dp_imm(GT, SBC, NOFLAGS)
sbcle reg, reg, imm		= dp_imm(LE, SBC, NOFLAGS)
sbcal reg, reg, imm		= dp_imm(AL, SBC, NOFLAGS)

# immediate with setflags
sbcs reg, reg, imm		= dp_imm(AL, SBC, SETFLAGS)
sbcseq reg, reg, imm		= dp_imm(EQ, SBC, SETFLAGS)
sbceqs reg, reg, imm		= dp_imm(EQ, SBC, SETFLAGS)
sbcsne reg, reg, imm		= dp_imm(NE, SBC, SETFLAGS)
sbcnes reg, reg, imm		= dp_imm(NE, SBC, SETFLAGS)
sbcscs reg, reg, imm		= dp_imm(CS, SBC, SETFLAGS)
sbccss reg, reg, imm		= dp_imm(CS, SBC, SETFLAGS)
sbcscc reg, reg, imm		= dp_imm(CC, SBC, SETFLAGS)
sbcccs reg, reg, imm		= dp_imm(CC, SBC, SETFLAGS)
sbcsmi reg, reg, imm		= dp_imm(MI, SBC, SETFLAGS)
sbcmis reg, reg, imm		= dp_imm(MI, SBC, SETFLAGS)
sbcspl reg, reg, imm		= dp_imm(PL, SBC, SETFLAGS)
sbcpls reg, reg, imm		= dp_imm(PL, SBC, SETFLAGS)
sbcsvs reg, reg, imm		= dp_imm(VS, SBC, SETFLAGS)
sbcvss reg, reg, imm		= dp_imm(VS, SBC, SETFLAGS)
sbcsvc reg, reg, imm		= dp_imm(VC, SBC, SETFLAGS)
sbcvcs reg, reg, imm		= dp_imm(VC, SBC, SETFLAGS)
sbcshi reg, reg, imm		= dp_imm(HI, SBC, SETFLAGS)
sbchis reg, reg, imm		= dp_imm(HI, SBC, SETFLAGS)
sbcsls reg, reg, imm		= dp_imm(LS, SBC, SETFLAGS)
sbclss reg, reg, imm		= dp_imm(LS, SBC, SETFLAGS)
sbcsge reg, reg, imm		= dp_imm(GE, SBC, SETFLAGS)
sbcges reg, reg, imm		= dp_imm(GE, SBC, SETFLAGS)
sbcslt reg, reg, imm		= dp_imm(LT, SBC, SETFLAGS)
sbclts reg, reg, imm		= dp_imm(LT, SBC, SETFLAGS)
sbcsgt reg, reg, imm		= dp_imm(GT, SBC, SETFLAGS)
sbcgts reg, reg, imm		= dp_imm(GT, SBC, SETFLAGS)
sbcsle reg, reg, imm		= dp_imm(LE, SBC, SETFLAGS)
sbcles reg, reg, imm		= dp_imm(LE, SBC, SETFLAGS)
sbcsal reg, reg, imm		= dp_imm(AL, SBC, SETFLAGS)
sbcals reg, reg, imm		= dp_imm(AL, SBC, SETFLAGS)

# register shifted by nothing
sbc reg, reg, reg		= dp_reg_immshift(AL, SBC, NOFLAGS)
sbceq reg, reg, reg		= dp_reg_immshift(EQ, SBC, NOFLAGS)
sbcne reg, reg, reg		= dp_reg_immshift(NE, SBC, NOFLAGS)
sbccs reg, reg, reg		= dp_reg_immshift(CS, SBC, NOFLAGS)
sbccc reg, reg, reg		= dp_reg_immshift(CC, SBC, NOFLAGS)
sbcmi reg, reg, reg		= dp_reg_immshift(MI, SBC, NOFLAGS)
sbcpl reg, reg, reg		= dp_reg_immshift(PL, SBC, NOFLAGS)
sbcvs reg, reg, reg		= dp_reg_immshift(VS, SBC, NOFLAGS)
sbcvc reg, reg, reg		= dp_reg_immshift(VC, SBC, NOFLAGS)
sbchi reg, reg, reg		= dp_reg_immshift(HI, SBC, NOFLAGS)
sbcls reg, reg, reg		= dp_reg_immshift(LS, SBC, NOFLAGS)
sbcge reg, reg, reg		= dp_reg_immshift(GE, SBC, NOFLAGS)
sbclt reg, reg, reg		= dp_reg_immshift(LT, SBC, NOFLAGS)
sbcgt reg, reg, reg		= dp_reg_immshift(GT, SBC, NOFLAGS)
sbcle reg, reg, reg		= dp_reg_immshift(LE, SBC, NOFLAGS)
sbcal reg, reg, reg		= dp_reg_immshift(AL, SBC, NOFLAGS)

# register shifted by nothing with setflags
sbcs reg, reg, reg		= dp_reg_immshift(AL, SBC, SETFLAGS)
sbceqs reg, reg, reg		= dp_reg_immshift(EQ, SBC, SETFLAGS)
sbcseq reg, reg, reg		= dp_reg_immshift(EQ, SBC, SETFLAGS)
sbcnes reg, reg, reg		= dp_reg_immshift(NE, SBC, SETFLAGS)
sbcsne reg, reg, reg		= dp_reg_immshift(NE, SBC, SETFLAGS)
sbccss reg, reg, reg		= dp_reg_immshift(CS, SBC, SETFLAGS)
sbcscs reg, reg, reg		= dp_reg_immshift(CS, SBC, SETFLAGS)
sbcccs reg, reg, reg		= dp_reg_immshift(CC, SBC, SETFLAGS)
sbcscc reg, reg, reg		= dp_reg_immshift(CC, SBC, SETFLAGS)
sbcmis reg, reg, reg		= dp_reg_immshift(MI, SBC, SETFLAGS)
sbcsmi reg, reg, reg		= dp_reg_immshift(MI, SBC, SETFLAGS)
sbcpls reg, reg, reg		= dp_reg_immshift(PL, SBC, SETFLAGS)
sbcspl reg, reg, reg		= dp_reg_immshift(PL, SBC, SETFLAGS)
sbcvss reg, reg, reg		= dp_reg_immshift(VS, SBC, SETFLAGS)
sbcsvs reg, reg, reg		= dp_reg_immshift(VS, SBC, SETFLAGS)
sbcvcs reg, reg, reg		= dp_reg_immshift(VC, SBC, SETFLAGS)
sbcsvc reg, reg, reg		= dp_reg_immshift(VC, SBC, SETFLAGS)
sbchis reg, reg, reg		= dp_reg_immshift(HI, SBC, SETFLAGS)
sbcshi reg, reg, reg		= dp_reg_immshift(HI, SBC, SETFLAGS)
sbclss reg, reg, reg		= dp_reg_immshift(LS, SBC, SETFLAGS)
sbcsls reg, reg, reg		= dp_reg_immshift(LS, SBC, SETFLAGS)
sbcges reg, reg, reg		= dp_reg_immshift(GE, SBC, SETFLAGS)
sbcsge reg, reg, reg		= dp_reg_immshift(GE, SBC, SETFLAGS)
sbclts reg, reg, reg		= dp_reg_immshift(LT, SBC, SETFLAGS)
sbcslt reg, reg, reg		= dp_reg_immshift(LT, SBC, SETFLAGS)
sbcgts reg, reg, reg		= dp_reg_immshift(GT, SBC, SETFLAGS)
sbcsgt reg, reg, reg		= dp_reg_immshift(GT, SBC, SETFLAGS)
sbcles reg, reg, reg		= dp_reg_immshift(LE, SBC, SETFLAGS)
sbcsle reg, reg, reg		= dp_reg_immshift(LE, SBC, SETFLAGS)
sbcals reg, reg, reg		= dp_reg_immshift(AL, SBC, SETFLAGS)
sbcsal reg, reg, reg		= dp_reg_immshift(AL, SBC, SETFLAGS)

# register shifted by immediate
sbc reg, reg, reg, ishift	= dp_reg_immshift(AL, SBC, NOFLAGS)
sbceq reg, reg, reg, ishift	= dp_reg_immshift(EQ, SBC, NOFLAGS)
sbcne reg, reg, reg, ishift	= dp_reg_immshift(NE, SBC, NOFLAGS)
sbccs reg, reg, reg, ishift	= dp_reg_immshift(CS, SBC, NOFLAGS)
sbccc reg, reg, reg, ishift	= dp_reg_immshift(CC, SBC, NOFLAGS)
sbcmi reg, reg, reg, ishift	= dp_reg_immshift(MI, SBC, NOFLAGS)
sbcpl reg, reg, reg, ishift	= dp_reg_immshift(PL, SBC, NOFLAGS)
sbcvs reg, reg, reg, ishift	= dp_reg_immshift(VS, SBC, NOFLAGS)
sbcvc reg, reg, reg, ishift	= dp_reg_immshift(VC, SBC, NOFLAGS)
sbchi reg, reg, reg, ishift	= dp_reg_immshift(HI, SBC, NOFLAGS)
sbcls reg, reg, reg, ishift	= dp_reg_immshift(LS, SBC, NOFLAGS)
sbcge reg, reg, reg, ishift	= dp_reg_immshift(GE, SBC, NOFLAGS)
sbclt reg, reg, reg, ishift	= dp_reg_immshift(LT, SBC, NOFLAGS)
sbcgt reg, reg, reg, ishift	= dp_reg_immshift(GT, SBC, NOFLAGS)
sbcle reg, reg, reg, ishift	= dp_reg_immshift(LE, SBC, NOFLAGS)
sbcal reg, reg, reg, ishift	= dp_reg_immshift(AL, SBC, NOFLAGS)

# register shifted by immediate with setflags
sbcs reg, reg, reg, ishift	= dp_reg_immshift(AL, SBC, SETFLAGS)
sbceqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, SBC, SETFLAGS)
sbcseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, SBC, SETFLAGS)
sbcnes reg, reg, reg, ishift	= dp_reg_immshift(NE, SBC, SETFLAGS)
sbcsne reg, reg, reg, ishift	= dp_reg_immshift(NE, SBC, SETFLAGS)
sbccss reg, reg, reg, ishift	= dp_reg_immshift(CS, SBC, SETFLAGS)
sbcscs reg, reg, reg, ishift	= dp_reg_immshift(CS, SBC, SETFLAGS)
sbcccs reg, reg, reg, ishift	= dp_reg_immshift(CC, SBC, SETFLAGS)
sbcscc reg, reg, reg, ishift	= dp_reg_immshift(CC, SBC, SETFLAGS)
sbcmis reg, reg, reg, ishift	= dp_reg_immshift(MI, SBC, SETFLAGS)
sbcsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, SBC, SETFLAGS)
sbcpls reg, reg, reg, ishift	= dp_reg_immshift(PL, SBC, SETFLAGS)
sbcspl reg, reg, reg, ishift	= dp_reg_immshift(PL, SBC, SETFLAGS)
sbcvss reg, reg, reg, ishift	= dp_reg_immshift(VS, SBC, SETFLAGS)
sbcsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, SBC, SETFLAGS)
sbcvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, SBC, SETFLAGS)
sbcsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, SBC, SETFLAGS)
sbchis reg, reg, reg, ishift	= dp_reg_immshift(HI, SBC, SETFLAGS)
sbcshi reg, reg, reg, ishift	= dp_reg_immshift(HI, SBC, SETFLAGS)
sbclss reg, reg, reg, ishift	= dp_reg_immshift(LS, SBC, SETFLAGS)
sbcsls reg, reg, reg, ishift	= dp_reg_immshift(LS, SBC, SETFLAGS)
sbcges reg, reg, reg, ishift	= dp_reg_immshift(GE, SBC, SETFLAGS)
sbcsge reg, reg, reg, ishift	= dp_reg_immshift(GE, SBC, SETFLAGS)
sbclts reg, reg, reg, ishift	= dp_reg_immshift(LT, SBC, SETFLAGS)
sbcslt reg, reg, reg, ishift	= dp_reg_immshift(LT, SBC, SETFLAGS)
sbcgts reg, reg, reg, ishift	= dp_reg_immshift(GT, SBC, SETFLAGS)
sbcsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, SBC, SETFLAGS)
sbcles reg, reg, reg, ishift	= dp_reg_immshift(LE, SBC, SETFLAGS)
sbcsle reg, reg, reg, ishift	= dp_reg_immshift(LE, SBC, SETFLAGS)
sbcals reg, reg, reg, ishift	= dp_reg_immshift(AL, SBC, SETFLAGS)
sbcsal reg, reg, reg, ishift	= dp_reg_immshift(AL, SBC, SETFLAGS)

# register shifted by register
sbc reg, reg, reg, rshift	= dp_reg_regshift(AL, SBC, NOFLAGS)
sbceq reg, reg, reg, rshift	= dp_reg_regshift(EQ, SBC, NOFLAGS)
sbcne reg, reg, reg, rshift	= dp_reg_regshift(NE, SBC, NOFLAGS)
sbccs reg, reg, reg, rshift	= dp_reg_regshift(CS, SBC, NOFLAGS)
sbccc reg, reg, reg, rshift	= dp_reg_regshift(CC, SBC, NOFLAGS)
sbcmi reg, reg, reg, rshift	= dp_reg_regshift(MI, SBC, NOFLAGS)
sbcpl reg, reg, reg, rshift	= dp_reg_regshift(PL, SBC, NOFLAGS)
sbcvs reg, reg, reg, rshift	= dp_reg_regshift(VS, SBC, NOFLAGS)
sbcvc reg, reg, reg, rshift	= dp_reg_regshift(VC, SBC, NOFLAGS)
sbchi reg, reg, reg, rshift	= dp_reg_regshift(HI, SBC, NOFLAGS)
sbcls reg, reg, reg, rshift	= dp_reg_regshift(LS, SBC, NOFLAGS)
sbcge reg, reg, reg, rshift	= dp_reg_regshift(GE, SBC, NOFLAGS)
sbclt reg, reg, reg, rshift	= dp_reg_regshift(LT, SBC, NOFLAGS)
sbcgt reg, reg, reg, rshift	= dp_reg_regshift(GT, SBC, NOFLAGS)
sbcle reg, reg, reg, rshift	= dp_reg_regshift(LE, SBC, NOFLAGS)
sbcal reg, reg, reg, rshift	= dp_reg_regshift(AL, SBC, NOFLAGS)

# register shifted by register with setflags
sbcs reg, reg, reg, rshift	= dp_reg_regshift(AL, SBC, SETFLAGS)
sbceqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, SBC, SETFLAGS)
sbcseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, SBC, SETFLAGS)
sbcnes reg, reg, reg, rshift	= dp_reg_regshift(NE, SBC, SETFLAGS)
sbcsne reg, reg, reg, rshift	= dp_reg_regshift(NE, SBC, SETFLAGS)
sbccss reg, reg, reg, rshift	= dp_reg_regshift(CS, SBC, SETFLAGS)
sbcscs reg, reg, reg, rshift	= dp_reg_regshift(CS, SBC, SETFLAGS)
sbcccs reg, reg, reg, rshift	= dp_reg_regshift(CC, SBC, SETFLAGS)
sbcscc reg, reg, reg, rshift	= dp_reg_regshift(CC, SBC, SETFLAGS)
sbcmis reg, reg, reg, rshift	= dp_reg_regshift(MI, SBC, SETFLAGS)
sbcsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, SBC, SETFLAGS)
sbcpls reg, reg, reg, rshift	= dp_reg_regshift(PL, SBC, SETFLAGS)
sbcspl reg, reg, reg, rshift	= dp_reg_regshift(PL, SBC, SETFLAGS)
sbcvss reg, reg, reg, rshift	= dp_reg_regshift(VS, SBC, SETFLAGS)
sbcsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, SBC, SETFLAGS)
sbcvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, SBC, SETFLAGS)
sbcsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, SBC, SETFLAGS)
sbchis reg, reg, reg, rshift	= dp_reg_regshift(HI, SBC, SETFLAGS)
sbcshi reg, reg, reg, rshift	= dp_reg_regshift(HI, SBC, SETFLAGS)
sbclss reg, reg, reg, rshift	= dp_reg_regshift(LS, SBC, SETFLAGS)
sbcsls reg, reg, reg, rshift	= dp_reg_regshift(LS, SBC, SETFLAGS)
sbcges reg, reg, reg, rshift	= dp_reg_regshift(GE, SBC, SETFLAGS)
sbcsge reg, reg, reg, rshift	= dp_reg_regshift(GE, SBC, SETFLAGS)
sbclts reg, reg, reg, rshift	= dp_reg_regshift(LT, SBC, SETFLAGS)
sbcslt reg, reg, reg, rshift	= dp_reg_regshift(LT, SBC, SETFLAGS)
sbcgts reg, reg, reg, rshift	= dp_reg_regshift(GT, SBC, SETFLAGS)
sbcsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, SBC, SETFLAGS)
sbcles reg, reg, reg, rshift	= dp_reg_regshift(LE, SBC, SETFLAGS)
sbcsle reg, reg, reg, rshift	= dp_reg_regshift(LE, SBC, SETFLAGS)
sbcals reg, reg, reg, rshift	= dp_reg_regshift(AL, SBC, SETFLAGS)
sbcsal reg, reg, reg, rshift	= dp_reg_regshift(AL, SBC, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
sbc reg, imm			= dp_imm_DN(AL, SBC, NOFLAGS)
sbceq reg, imm		= dp_imm_DN(EQ, SBC, NOFLAGS)
sbcne reg, imm		= dp_imm_DN(NE, SBC, NOFLAGS)
sbccs reg, imm		= dp_imm_DN(CS, SBC, NOFLAGS)
sbccc reg, imm		= dp_imm_DN(CC, SBC, NOFLAGS)
sbcmi reg, imm		= dp_imm_DN(MI, SBC, NOFLAGS)
sbcpl reg, imm		= dp_imm_DN(PL, SBC, NOFLAGS)
sbcvs reg, imm		= dp_imm_DN(VS, SBC, NOFLAGS)
sbcvc reg, imm		= dp_imm_DN(VC, SBC, NOFLAGS)
sbchi reg, imm		= dp_imm_DN(HI, SBC, NOFLAGS)
sbcls reg, imm		= dp_imm_DN(LS, SBC, NOFLAGS)
sbcge reg, imm		= dp_imm_DN(GE, SBC, NOFLAGS)
sbclt reg, imm		= dp_imm_DN(LT, SBC, NOFLAGS)
sbcgt reg, imm		= dp_imm_DN(GT, SBC, NOFLAGS)
sbcle reg, imm		= dp_imm_DN(LE, SBC, NOFLAGS)
sbcal reg, imm		= dp_imm_DN(AL, SBC, NOFLAGS)

# immediate with setflags with Rd == Rn
sbcs reg, imm		= dp_imm_DN(AL, SBC, SETFLAGS)
sbcseq reg, imm		= dp_imm_DN(EQ, SBC, SETFLAGS)
sbceqs reg, imm		= dp_imm_DN(EQ, SBC, SETFLAGS)
sbcsne reg, imm		= dp_imm_DN(NE, SBC, SETFLAGS)
sbcnes reg, imm		= dp_imm_DN(NE, SBC, SETFLAGS)
sbcscs reg, imm		= dp_imm_DN(CS, SBC, SETFLAGS)
sbccss reg, imm		= dp_imm_DN(CS, SBC, SETFLAGS)
sbcscc reg, imm		= dp_imm_DN(CC, SBC, SETFLAGS)
sbcccs reg, imm		= dp_imm_DN(CC, SBC, SETFLAGS)
sbcsmi reg, imm		= dp_imm_DN(MI, SBC, SETFLAGS)
sbcmis reg, imm		= dp_imm_DN(MI, SBC, SETFLAGS)
sbcspl reg, imm		= dp_imm_DN(PL, SBC, SETFLAGS)
sbcpls reg, imm		= dp_imm_DN(PL, SBC, SETFLAGS)
sbcsvs reg, imm		= dp_imm_DN(VS, SBC, SETFLAGS)
sbcvss reg, imm		= dp_imm_DN(VS, SBC, SETFLAGS)
sbcsvc reg, imm		= dp_imm_DN(VC, SBC, SETFLAGS)
sbcvcs reg, imm		= dp_imm_DN(VC, SBC, SETFLAGS)
sbcshi reg, imm		= dp_imm_DN(HI, SBC, SETFLAGS)
sbchis reg, imm		= dp_imm_DN(HI, SBC, SETFLAGS)
sbcsls reg, imm		= dp_imm_DN(LS, SBC, SETFLAGS)
sbclss reg, imm		= dp_imm_DN(LS, SBC, SETFLAGS)
sbcsge reg, imm		= dp_imm_DN(GE, SBC, SETFLAGS)
sbcges reg, imm		= dp_imm_DN(GE, SBC, SETFLAGS)
sbcslt reg, imm		= dp_imm_DN(LT, SBC, SETFLAGS)
sbclts reg, imm		= dp_imm_DN(LT, SBC, SETFLAGS)
sbcsgt reg, imm		= dp_imm_DN(GT, SBC, SETFLAGS)
sbcgts reg, imm		= dp_imm_DN(GT, SBC, SETFLAGS)
sbcsle reg, imm		= dp_imm_DN(LE, SBC, SETFLAGS)
sbcles reg, imm		= dp_imm_DN(LE, SBC, SETFLAGS)
sbcsal reg, imm		= dp_imm_DN(AL, SBC, SETFLAGS)
sbcals reg, imm		= dp_imm_DN(AL, SBC, SETFLAGS)

# register shifted by nothing with Rd == Rn
sbc reg, reg			= dp_reg_immshift_DN(AL, SBC, NOFLAGS)
sbceq reg, reg			= dp_reg_immshift_DN(EQ, SBC, NOFLAGS)
sbcne reg, reg			= dp_reg_immshift_DN(NE, SBC, NOFLAGS)
sbccs reg, reg			= dp_reg_immshift_DN(CS, SBC, NOFLAGS)
sbccc reg, reg			= dp_reg_immshift_DN(CC, SBC, NOFLAGS)
sbcmi reg, reg			= dp_reg_immshift_DN(MI, SBC, NOFLAGS)
sbcpl reg, reg			= dp_reg_immshift_DN(PL, SBC, NOFLAGS)
sbcvs reg, reg			= dp_reg_immshift_DN(VS, SBC, NOFLAGS)
sbcvc reg, reg			= dp_reg_immshift_DN(VC, SBC, NOFLAGS)
sbchi reg, reg			= dp_reg_immshift_DN(HI, SBC, NOFLAGS)
sbcls reg, reg			= dp_reg_immshift_DN(LS, SBC, NOFLAGS)
sbcge reg, reg			= dp_reg_immshift_DN(GE, SBC, NOFLAGS)
sbclt reg, reg			= dp_reg_immshift_DN(LT, SBC, NOFLAGS)
sbcgt reg, reg			= dp_reg_immshift_DN(GT, SBC, NOFLAGS)
sbcle reg, reg			= dp_reg_immshift_DN(LE, SBC, NOFLAGS)
sbcal reg, reg			= dp_reg_immshift_DN(AL, SBC, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
sbcs reg, reg			= dp_reg_immshift_DN(AL, SBC, SETFLAGS)
sbceqs reg, reg			= dp_reg_immshift_DN(EQ, SBC, SETFLAGS)
sbcseq reg, reg			= dp_reg_immshift_DN(EQ, SBC, SETFLAGS)
sbcnes reg, reg			= dp_reg_immshift_DN(NE, SBC, SETFLAGS)
sbcsne reg, reg			= dp_reg_immshift_DN(NE, SBC, SETFLAGS)
sbccss reg, reg			= dp_reg_immshift_DN(CS, SBC, SETFLAGS)
sbcscs reg, reg			= dp_reg_immshift_DN(CS, SBC, SETFLAGS)
sbcccs reg, reg			= dp_reg_immshift_DN(CC, SBC, SETFLAGS)
sbcscc reg, reg			= dp_reg_immshift_DN(CC, SBC, SETFLAGS)
sbcmis reg, reg			= dp_reg_immshift_DN(MI, SBC, SETFLAGS)
sbcsmi reg, reg			= dp_reg_immshift_DN(MI, SBC, SETFLAGS)
sbcpls reg, reg			= dp_reg_immshift_DN(PL, SBC, SETFLAGS)
sbcspl reg, reg			= dp_reg_immshift_DN(PL, SBC, SETFLAGS)
sbcvss reg, reg			= dp_reg_immshift_DN(VS, SBC, SETFLAGS)
sbcsvs reg, reg			= dp_reg_immshift_DN(VS, SBC, SETFLAGS)
sbcvcs reg, reg			= dp_reg_immshift_DN(VC, SBC, SETFLAGS)
sbcsvc reg, reg			= dp_reg_immshift_DN(VC, SBC, SETFLAGS)
sbchis reg, reg			= dp_reg_immshift_DN(HI, SBC, SETFLAGS)
sbcshi reg, reg			= dp_reg_immshift_DN(HI, SBC, SETFLAGS)
sbclss reg, reg			= dp_reg_immshift_DN(LS, SBC, SETFLAGS)
sbcsls reg, reg			= dp_reg_immshift_DN(LS, SBC, SETFLAGS)
sbcges reg, reg			= dp_reg_immshift_DN(GE, SBC, SETFLAGS)
sbcsge reg, reg			= dp_reg_immshift_DN(GE, SBC, SETFLAGS)
sbclts reg, reg			= dp_reg_immshift_DN(LT, SBC, SETFLAGS)
sbcslt reg, reg			= dp_reg_immshift_DN(LT, SBC, SETFLAGS)
sbcgts reg, reg			= dp_reg_immshift_DN(GT, SBC, SETFLAGS)
sbcsgt reg, reg			= dp_reg_immshift_DN(GT, SBC, SETFLAGS)
sbcles reg, reg			= dp_reg_immshift_DN(LE, SBC, SETFLAGS)
sbcsle reg, reg			= dp_reg_immshift_DN(LE, SBC, SETFLAGS)
sbcals reg, reg			= dp_reg_immshift_DN(AL, SBC, SETFLAGS)
sbcsal reg, reg			= dp_reg_immshift_DN(AL, SBC, SETFLAGS)

# register shifted by immediate with Rd == Rn
sbc reg, reg, ishift		= dp_reg_immshift_DN(AL, SBC, NOFLAGS)
sbceq reg, reg, ishift		= dp_reg_immshift_DN(EQ, SBC, NOFLAGS)
sbcne reg, reg, ishift		= dp_reg_immshift_DN(NE, SBC, NOFLAGS)
sbccs reg, reg, ishift		= dp_reg_immshift_DN(CS, SBC, NOFLAGS)
sbccc reg, reg, ishift		= dp_reg_immshift_DN(CC, SBC, NOFLAGS)
sbcmi reg, reg, ishift		= dp_reg_immshift_DN(MI, SBC, NOFLAGS)
sbcpl reg, reg, ishift		= dp_reg_immshift_DN(PL, SBC, NOFLAGS)
sbcvs reg, reg, ishift		= dp_reg_immshift_DN(VS, SBC, NOFLAGS)
sbcvc reg, reg, ishift		= dp_reg_immshift_DN(VC, SBC, NOFLAGS)
sbchi reg, reg, ishift		= dp_reg_immshift_DN(HI, SBC, NOFLAGS)
sbcls reg, reg, ishift		= dp_reg_immshift_DN(LS, SBC, NOFLAGS)
sbcge reg, reg, ishift		= dp_reg_immshift_DN(GE, SBC, NOFLAGS)
sbclt reg, reg, ishift		= dp_reg_immshift_DN(LT, SBC, NOFLAGS)
sbcgt reg, reg, ishift		= dp_reg_immshift_DN(GT, SBC, NOFLAGS)
sbcle reg, reg, ishift		= dp_reg_immshift_DN(LE, SBC, NOFLAGS)
sbcal reg, reg, ishift		= dp_reg_immshift_DN(AL, SBC, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
sbcs reg, reg, ishift		= dp_reg_immshift_DN(AL, SBC, SETFLAGS)
sbceqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, SBC, SETFLAGS)
sbcseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, SBC, SETFLAGS)
sbcnes reg, reg, ishift		= dp_reg_immshift_DN(NE, SBC, SETFLAGS)
sbcsne reg, reg, ishift		= dp_reg_immshift_DN(NE, SBC, SETFLAGS)
sbccss reg, reg, ishift		= dp_reg_immshift_DN(CS, SBC, SETFLAGS)
sbcscs reg, reg, ishift		= dp_reg_immshift_DN(CS, SBC, SETFLAGS)
sbcccs reg, reg, ishift		= dp_reg_immshift_DN(CC, SBC, SETFLAGS)
sbcscc reg, reg, ishift		= dp_reg_immshift_DN(CC, SBC, SETFLAGS)
sbcmis reg, reg, ishift		= dp_reg_immshift_DN(MI, SBC, SETFLAGS)
sbcsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, SBC, SETFLAGS)
sbcpls reg, reg, ishift		= dp_reg_immshift_DN(PL, SBC, SETFLAGS)
sbcspl reg, reg, ishift		= dp_reg_immshift_DN(PL, SBC, SETFLAGS)
sbcvss reg, reg, ishift		= dp_reg_immshift_DN(VS, SBC, SETFLAGS)
sbcsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, SBC, SETFLAGS)
sbcvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, SBC, SETFLAGS)
sbcsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, SBC, SETFLAGS)
sbchis reg, reg, ishift		= dp_reg_immshift_DN(HI, SBC, SETFLAGS)
sbcshi reg, reg, ishift		= dp_reg_immshift_DN(HI, SBC, SETFLAGS)
sbclss reg, reg, ishift		= dp_reg_immshift_DN(LS, SBC, SETFLAGS)
sbcsls reg, reg, ishift		= dp_reg_immshift_DN(LS, SBC, SETFLAGS)
sbcges reg, reg, ishift		= dp_reg_immshift_DN(GE, SBC, SETFLAGS)
sbcsge reg, reg, ishift		= dp_reg_immshift_DN(GE, SBC, SETFLAGS)
sbclts reg, reg, ishift		= dp_reg_immshift_DN(LT, SBC, SETFLAGS)
sbcslt reg, reg, ishift		= dp_reg_immshift_DN(LT, SBC, SETFLAGS)
sbcgts reg, reg, ishift		= dp_reg_immshift_DN(GT, SBC, SETFLAGS)
sbcsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, SBC, SETFLAGS)
sbcles reg, reg, ishift		= dp_reg_immshift_DN(LE, SBC, SETFLAGS)
sbcsle reg, reg, ishift		= dp_reg_immshift_DN(LE, SBC, SETFLAGS)
sbcals reg, reg, ishift		= dp_reg_immshift_DN(AL, SBC, SETFLAGS)
sbcsal reg, reg, ishift		= dp_reg_immshift_DN(AL, SBC, SETFLAGS)

# register shifted by register with Rd == Rn
sbc reg, reg, rshift		= dp_reg_regshift_DN(AL, SBC, NOFLAGS)
sbceq reg, reg, rshift		= dp_reg_regshift_DN(EQ, SBC, NOFLAGS)
sbcne reg, reg, rshift		= dp_reg_regshift_DN(NE, SBC, NOFLAGS)
sbccs reg, reg, rshift		= dp_reg_regshift_DN(CS, SBC, NOFLAGS)
sbccc reg, reg, rshift		= dp_reg_regshift_DN(CC, SBC, NOFLAGS)
sbcmi reg, reg, rshift		= dp_reg_regshift_DN(MI, SBC, NOFLAGS)
sbcpl reg, reg, rshift		= dp_reg_regshift_DN(PL, SBC, NOFLAGS)
sbcvs reg, reg, rshift		= dp_reg_regshift_DN(VS, SBC, NOFLAGS)
sbcvc reg, reg, rshift		= dp_reg_regshift_DN(VC, SBC, NOFLAGS)
sbchi reg, reg, rshift		= dp_reg_regshift_DN(HI, SBC, NOFLAGS)
sbcls reg, reg, rshift		= dp_reg_regshift_DN(LS, SBC, NOFLAGS)
sbcge reg, reg, rshift		= dp_reg_regshift_DN(GE, SBC, NOFLAGS)
sbclt reg, reg, rshift		= dp_reg_regshift_DN(LT, SBC, NOFLAGS)
sbcgt reg, reg, rshift		= dp_reg_regshift_DN(GT, SBC, NOFLAGS)
sbcle reg, reg, rshift		= dp_reg_regshift_DN(LE, SBC, NOFLAGS)
sbcal reg, reg, rshift		= dp_reg_regshift_DN(AL, SBC, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
sbcs reg, reg, rshift		= dp_reg_regshift_DN(AL, SBC, SETFLAGS)
sbceqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, SBC, SETFLAGS)
sbcseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, SBC, SETFLAGS)
sbcnes reg, reg, rshift		= dp_reg_regshift_DN(NE, SBC, SETFLAGS)
sbcsne reg, reg, rshift		= dp_reg_regshift_DN(NE, SBC, SETFLAGS)
sbccss reg, reg, rshift		= dp_reg_regshift_DN(CS, SBC, SETFLAGS)
sbcscs reg, reg, rshift		= dp_reg_regshift_DN(CS, SBC, SETFLAGS)
sbcccs reg, reg, rshift		= dp_reg_regshift_DN(CC, SBC, SETFLAGS)
sbcscc reg, reg, rshift		= dp_reg_regshift_DN(CC, SBC, SETFLAGS)
sbcmis reg, reg, rshift		= dp_reg_regshift_DN(MI, SBC, SETFLAGS)
sbcsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, SBC, SETFLAGS)
sbcpls reg, reg, rshift		= dp_reg_regshift_DN(PL, SBC, SETFLAGS)
sbcspl reg, reg, rshift		= dp_reg_regshift_DN(PL, SBC, SETFLAGS)
sbcvss reg, reg, rshift		= dp_reg_regshift_DN(VS, SBC, SETFLAGS)
sbcsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, SBC, SETFLAGS)
sbcvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, SBC, SETFLAGS)
sbcsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, SBC, SETFLAGS)
sbchis reg, reg, rshift		= dp_reg_regshift_DN(HI, SBC, SETFLAGS)
sbcshi reg, reg, rshift		= dp_reg_regshift_DN(HI, SBC, SETFLAGS)
sbclss reg, reg, rshift		= dp_reg_regshift_DN(LS, SBC, SETFLAGS)
sbcsls reg, reg, rshift		= dp_reg_regshift_DN(LS, SBC, SETFLAGS)
sbcges reg, reg, rshift		= dp_reg_regshift_DN(GE, SBC, SETFLAGS)
sbcsge reg, reg, rshift		= dp_reg_regshift_DN(GE, SBC, SETFLAGS)
sbclts reg, reg, rshift		= dp_reg_regshift_DN(LT, SBC, SETFLAGS)
sbcslt reg, reg, rshift		= dp_reg_regshift_DN(LT, SBC, SETFLAGS)
sbcgts reg, reg, rshift		= dp_reg_regshift_DN(GT, SBC, SETFLAGS)
sbcsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, SBC, SETFLAGS)
sbcles reg, reg, rshift		= dp_reg_regshift_DN(LE, SBC, SETFLAGS)
sbcsle reg, reg, rshift		= dp_reg_regshift_DN(LE, SBC, SETFLAGS)
sbcals reg, reg, rshift		= dp_reg_regshift_DN(AL, SBC, SETFLAGS)
sbcsal reg, reg, rshift		= dp_reg_regshift_DN(AL, SBC, SETFLAGS)

#
# RSC
#

# immediate
rsc reg, reg, imm		= dp_imm(AL, RSC, NOFLAGS)
rsceq reg, reg, imm		= dp_imm(EQ, RSC, NOFLAGS)
rscne reg, reg, imm		= dp_imm(NE, RSC, NOFLAGS)
rsccs reg, reg, imm		= dp_imm(CS, RSC, NOFLAGS)
rsccc reg, reg, imm		= dp_imm(CC, RSC, NOFLAGS)
rscmi reg, reg, imm		= dp_imm(MI, RSC, NOFLAGS)
rscpl reg, reg, imm		= dp_imm(PL, RSC, NOFLAGS)
rscvs reg, reg, imm		= dp_imm(VS, RSC, NOFLAGS)
rscvc reg, reg, imm		= dp_imm(VC, RSC, NOFLAGS)
rschi reg, reg, imm		= dp_imm(HI, RSC, NOFLAGS)
rscls reg, reg, imm		= dp_imm(LS, RSC, NOFLAGS)
rscge reg, reg, imm		= dp_imm(GE, RSC, NOFLAGS)
rsclt reg, reg, imm		= dp_imm(LT, RSC, NOFLAGS)
rscgt reg, reg, imm		= dp_imm(GT, RSC, NOFLAGS)
rscle reg, reg, imm		= dp_imm(LE, RSC, NOFLAGS)
rscal reg, reg, imm		= dp_imm(AL, RSC, NOFLAGS)

# immediate with setflags
rscs reg, reg, imm		= dp_imm(AL, RSC, SETFLAGS)
rscseq reg, reg, imm		= dp_imm(EQ, RSC, SETFLAGS)
rsceqs reg, reg, imm		= dp_imm(EQ, RSC, SETFLAGS)
rscsne reg, reg, imm		= dp_imm(NE, RSC, SETFLAGS)
rscnes reg, reg, imm		= dp_imm(NE, RSC, SETFLAGS)
rscscs reg, reg, imm		= dp_imm(CS, RSC, SETFLAGS)
rsccss reg, reg, imm		= dp_imm(CS, RSC, SETFLAGS)
rscscc reg, reg, imm		= dp_imm(CC, RSC, SETFLAGS)
rscccs reg, reg, imm		= dp_imm(CC, RSC, SETFLAGS)
rscsmi reg, reg, imm		= dp_imm(MI, RSC, SETFLAGS)
rscmis reg, reg, imm		= dp_imm(MI, RSC, SETFLAGS)
rscspl reg, reg, imm		= dp_imm(PL, RSC, SETFLAGS)
rscpls reg, reg, imm		= dp_imm(PL, RSC, SETFLAGS)
rscsvs reg, reg, imm		= dp_imm(VS, RSC, SETFLAGS)
rscvss reg, reg, imm		= dp_imm(VS, RSC, SETFLAGS)
rscsvc reg, reg, imm		= dp_imm(VC, RSC, SETFLAGS)
rscvcs reg, reg, imm		= dp_imm(VC, RSC, SETFLAGS)
rscshi reg, reg, imm		= dp_imm(HI, RSC, SETFLAGS)
rschis reg, reg, imm		= dp_imm(HI, RSC, SETFLAGS)
rscsls reg, reg, imm		= dp_imm(LS, RSC, SETFLAGS)
rsclss reg, reg, imm		= dp_imm(LS, RSC, SETFLAGS)
rscsge reg, reg, imm		= dp_imm(GE, RSC, SETFLAGS)
rscges reg, reg, imm		= dp_imm(GE, RSC, SETFLAGS)
rscslt reg, reg, imm		= dp_imm(LT, RSC, SETFLAGS)
rsclts reg, reg, imm		= dp_imm(LT, RSC, SETFLAGS)
rscsgt reg, reg, imm		= dp_imm(GT, RSC, SETFLAGS)
rscgts reg, reg, imm		= dp_imm(GT, RSC, SETFLAGS)
rscsle reg, reg, imm		= dp_imm(LE, RSC, SETFLAGS)
rscles reg, reg, imm		= dp_imm(LE, RSC, SETFLAGS)
rscsal reg, reg, imm		= dp_imm(AL, RSC, SETFLAGS)
rscals reg, reg, imm		= dp_imm(AL, RSC, SETFLAGS)

# register shifted by nothing
rsc reg, reg, reg		= dp_reg_immshift(AL, RSC, NOFLAGS)
rsceq reg, reg, reg		= dp_reg_immshift(EQ, RSC, NOFLAGS)
rscne reg, reg, reg		= dp_reg_immshift(NE, RSC, NOFLAGS)
rsccs reg, reg, reg		= dp_reg_immshift(CS, RSC, NOFLAGS)
rsccc reg, reg, reg		= dp_reg_immshift(CC, RSC, NOFLAGS)
rscmi reg, reg, reg		= dp_reg_immshift(MI, RSC, NOFLAGS)
rscpl reg, reg, reg		= dp_reg_immshift(PL, RSC, NOFLAGS)
rscvs reg, reg, reg		= dp_reg_immshift(VS, RSC, NOFLAGS)
rscvc reg, reg, reg		= dp_reg_immshift(VC, RSC, NOFLAGS)
rschi reg, reg, reg		= dp_reg_immshift(HI, RSC, NOFLAGS)
rscls reg, reg, reg		= dp_reg_immshift(LS, RSC, NOFLAGS)
rscge reg, reg, reg		= dp_reg_immshift(GE, RSC, NOFLAGS)
rsclt reg, reg, reg		= dp_reg_immshift(LT, RSC, NOFLAGS)
rscgt reg, reg, reg		= dp_reg_immshift(GT, RSC, NOFLAGS)
rscle reg, reg, reg		= dp_reg_immshift(LE, RSC, NOFLAGS)
rscal reg, reg, reg		= dp_reg_immshift(AL, RSC, NOFLAGS)

# register shifted by nothing with setflags
rscs reg, reg, reg		= dp_reg_immshift(AL, RSC, SETFLAGS)
rsceqs reg, reg, reg		= dp_reg_immshift(EQ, RSC, SETFLAGS)
rscseq reg, reg, reg		= dp_reg_immshift(EQ, RSC, SETFLAGS)
rscnes reg, reg, reg		= dp_reg_immshift(NE, RSC, SETFLAGS)
rscsne reg, reg, reg		= dp_reg_immshift(NE, RSC, SETFLAGS)
rsccss reg, reg, reg		= dp_reg_immshift(CS, RSC, SETFLAGS)
rscscs reg, reg, reg		= dp_reg_immshift(CS, RSC, SETFLAGS)
rscccs reg, reg, reg		= dp_reg_immshift(CC, RSC, SETFLAGS)
rscscc reg, reg, reg		= dp_reg_immshift(CC, RSC, SETFLAGS)
rscmis reg, reg, reg		= dp_reg_immshift(MI, RSC, SETFLAGS)
rscsmi reg, reg, reg		= dp_reg_immshift(MI, RSC, SETFLAGS)
rscpls reg, reg, reg		= dp_reg_immshift(PL, RSC, SETFLAGS)
rscspl reg, reg, reg		= dp_reg_immshift(PL, RSC, SETFLAGS)
rscvss reg, reg, reg		= dp_reg_immshift(VS, RSC, SETFLAGS)
rscsvs reg, reg, reg		= dp_reg_immshift(VS, RSC, SETFLAGS)
rscvcs reg, reg, reg		= dp_reg_immshift(VC, RSC, SETFLAGS)
rscsvc reg, reg, reg		= dp_reg_immshift(VC, RSC, SETFLAGS)
rschis reg, reg, reg		= dp_reg_immshift(HI, RSC, SETFLAGS)
rscshi reg, reg, reg		= dp_reg_immshift(HI, RSC, SETFLAGS)
rsclss reg, reg, reg		= dp_reg_immshift(LS, RSC, SETFLAGS)
rscsls reg, reg, reg		= dp_reg_immshift(LS, RSC, SETFLAGS)
rscges reg, reg, reg		= dp_reg_immshift(GE, RSC, SETFLAGS)
rscsge reg, reg, reg		= dp_reg_immshift(GE, RSC, SETFLAGS)
rsclts reg, reg, reg		= dp_reg_immshift(LT, RSC, SETFLAGS)
rscslt reg, reg, reg		= dp_reg_immshift(LT, RSC, SETFLAGS)
rscgts reg, reg, reg		= dp_reg_immshift(GT, RSC, SETFLAGS)
rscsgt reg, reg, reg		= dp_reg_immshift(GT, RSC, SETFLAGS)
rscles reg, reg, reg		= dp_reg_immshift(LE, RSC, SETFLAGS)
rscsle reg, reg, reg		= dp_reg_immshift(LE, RSC, SETFLAGS)
rscals reg, reg, reg		= dp_reg_immshift(AL, RSC, SETFLAGS)
rscsal reg, reg, reg		= dp_reg_immshift(AL, RSC, SETFLAGS)

# register shifted by immediate
rsc reg, reg, reg, ishift	= dp_reg_immshift(AL, RSC, NOFLAGS)
rsceq reg, reg, reg, ishift	= dp_reg_immshift(EQ, RSC, NOFLAGS)
rscne reg, reg, reg, ishift	= dp_reg_immshift(NE, RSC, NOFLAGS)
rsccs reg, reg, reg, ishift	= dp_reg_immshift(CS, RSC, NOFLAGS)
rsccc reg, reg, reg, ishift	= dp_reg_immshift(CC, RSC, NOFLAGS)
rscmi reg, reg, reg, ishift	= dp_reg_immshift(MI, RSC, NOFLAGS)
rscpl reg, reg, reg, ishift	= dp_reg_immshift(PL, RSC, NOFLAGS)
rscvs reg, reg, reg, ishift	= dp_reg_immshift(VS, RSC, NOFLAGS)
rscvc reg, reg, reg, ishift	= dp_reg_immshift(VC, RSC, NOFLAGS)
rschi reg, reg, reg, ishift	= dp_reg_immshift(HI, RSC, NOFLAGS)
rscls reg, reg, reg, ishift	= dp_reg_immshift(LS, RSC, NOFLAGS)
rscge reg, reg, reg, ishift	= dp_reg_immshift(GE, RSC, NOFLAGS)
rsclt reg, reg, reg, ishift	= dp_reg_immshift(LT, RSC, NOFLAGS)
rscgt reg, reg, reg, ishift	= dp_reg_immshift(GT, RSC, NOFLAGS)
rscle reg, reg, reg, ishift	= dp_reg_immshift(LE, RSC, NOFLAGS)
rscal reg, reg, reg, ishift	= dp_reg_immshift(AL, RSC, NOFLAGS)

# register shifted by immediate with setflags
rscs reg, reg, reg, ishift	= dp_reg_immshift(AL, RSC, SETFLAGS)
rsceqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, RSC, SETFLAGS)
rscseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, RSC, SETFLAGS)
rscnes reg, reg, reg, ishift	= dp_reg_immshift(NE, RSC, SETFLAGS)
rscsne reg, reg, reg, ishift	= dp_reg_immshift(NE, RSC, SETFLAGS)
rsccss reg, reg, reg, ishift	= dp_reg_immshift(CS, RSC, SETFLAGS)
rscscs reg, reg, reg, ishift	= dp_reg_immshift(CS, RSC, SETFLAGS)
rscccs reg, reg, reg, ishift	= dp_reg_immshift(CC, RSC, SETFLAGS)
rscscc reg, reg, reg, ishift	= dp_reg_immshift(CC, RSC, SETFLAGS)
rscmis reg, reg, reg, ishift	= dp_reg_immshift(MI, RSC, SETFLAGS)
rscsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, RSC, SETFLAGS)
rscpls reg, reg, reg, ishift	= dp_reg_immshift(PL, RSC, SETFLAGS)
rscspl reg, reg, reg, ishift	= dp_reg_immshift(PL, RSC, SETFLAGS)
rscvss reg, reg, reg, ishift	= dp_reg_immshift(VS, RSC, SETFLAGS)
rscsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, RSC, SETFLAGS)
rscvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, RSC, SETFLAGS)
rscsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, RSC, SETFLAGS)
rschis reg, reg, reg, ishift	= dp_reg_immshift(HI, RSC, SETFLAGS)
rscshi reg, reg, reg, ishift	= dp_reg_immshift(HI, RSC, SETFLAGS)
rsclss reg, reg, reg, ishift	= dp_reg_immshift(LS, RSC, SETFLAGS)
rscsls reg, reg, reg, ishift	= dp_reg_immshift(LS, RSC, SETFLAGS)
rscges reg, reg, reg, ishift	= dp_reg_immshift(GE, RSC, SETFLAGS)
rscsge reg, reg, reg, ishift	= dp_reg_immshift(GE, RSC, SETFLAGS)
rsclts reg, reg, reg, ishift	= dp_reg_immshift(LT, RSC, SETFLAGS)
rscslt reg, reg, reg, ishift	= dp_reg_immshift(LT, RSC, SETFLAGS)
rscgts reg, reg, reg, ishift	= dp_reg_immshift(GT, RSC, SETFLAGS)
rscsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, RSC, SETFLAGS)
rscles reg, reg, reg, ishift	= dp_reg_immshift(LE, RSC, SETFLAGS)
rscsle reg, reg, reg, ishift	= dp_reg_immshift(LE, RSC, SETFLAGS)
rscals reg, reg, reg, ishift	= dp_reg_immshift(AL, RSC, SETFLAGS)
rscsal reg, reg, reg, ishift	= dp_reg_immshift(AL, RSC, SETFLAGS)

# register shifted by register
rsc reg, reg, reg, rshift	= dp_reg_regshift(AL, RSC, NOFLAGS)
rsceq reg, reg, reg, rshift	= dp_reg_regshift(EQ, RSC, NOFLAGS)
rscne reg, reg, reg, rshift	= dp_reg_regshift(NE, RSC, NOFLAGS)
rsccs reg, reg, reg, rshift	= dp_reg_regshift(CS, RSC, NOFLAGS)
rsccc reg, reg, reg, rshift	= dp_reg_regshift(CC, RSC, NOFLAGS)
rscmi reg, reg, reg, rshift	= dp_reg_regshift(MI, RSC, NOFLAGS)
rscpl reg, reg, reg, rshift	= dp_reg_regshift(PL, RSC, NOFLAGS)
rscvs reg, reg, reg, rshift	= dp_reg_regshift(VS, RSC, NOFLAGS)
rscvc reg, reg, reg, rshift	= dp_reg_regshift(VC, RSC, NOFLAGS)
rschi reg, reg, reg, rshift	= dp_reg_regshift(HI, RSC, NOFLAGS)
rscls reg, reg, reg, rshift	= dp_reg_regshift(LS, RSC, NOFLAGS)
rscge reg, reg, reg, rshift	= dp_reg_regshift(GE, RSC, NOFLAGS)
rsclt reg, reg, reg, rshift	= dp_reg_regshift(LT, RSC, NOFLAGS)
rscgt reg, reg, reg, rshift	= dp_reg_regshift(GT, RSC, NOFLAGS)
rscle reg, reg, reg, rshift	= dp_reg_regshift(LE, RSC, NOFLAGS)
rscal reg, reg, reg, rshift	= dp_reg_regshift(AL, RSC, NOFLAGS)

# register shifted by register with setflags
rscs reg, reg, reg, rshift	= dp_reg_regshift(AL, RSC, SETFLAGS)
rsceqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, RSC, SETFLAGS)
rscseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, RSC, SETFLAGS)
rscnes reg, reg, reg, rshift	= dp_reg_regshift(NE, RSC, SETFLAGS)
rscsne reg, reg, reg, rshift	= dp_reg_regshift(NE, RSC, SETFLAGS)
rsccss reg, reg, reg, rshift	= dp_reg_regshift(CS, RSC, SETFLAGS)
rscscs reg, reg, reg, rshift	= dp_reg_regshift(CS, RSC, SETFLAGS)
rscccs reg, reg, reg, rshift	= dp_reg_regshift(CC, RSC, SETFLAGS)
rscscc reg, reg, reg, rshift	= dp_reg_regshift(CC, RSC, SETFLAGS)
rscmis reg, reg, reg, rshift	= dp_reg_regshift(MI, RSC, SETFLAGS)
rscsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, RSC, SETFLAGS)
rscpls reg, reg, reg, rshift	= dp_reg_regshift(PL, RSC, SETFLAGS)
rscspl reg, reg, reg, rshift	= dp_reg_regshift(PL, RSC, SETFLAGS)
rscvss reg, reg, reg, rshift	= dp_reg_regshift(VS, RSC, SETFLAGS)
rscsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, RSC, SETFLAGS)
rscvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, RSC, SETFLAGS)
rscsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, RSC, SETFLAGS)
rschis reg, reg, reg, rshift	= dp_reg_regshift(HI, RSC, SETFLAGS)
rscshi reg, reg, reg, rshift	= dp_reg_regshift(HI, RSC, SETFLAGS)
rsclss reg, reg, reg, rshift	= dp_reg_regshift(LS, RSC, SETFLAGS)
rscsls reg, reg, reg, rshift	= dp_reg_regshift(LS, RSC, SETFLAGS)
rscges reg, reg, reg, rshift	= dp_reg_regshift(GE, RSC, SETFLAGS)
rscsge reg, reg, reg, rshift	= dp_reg_regshift(GE, RSC, SETFLAGS)
rsclts reg, reg, reg, rshift	= dp_reg_regshift(LT, RSC, SETFLAGS)
rscslt reg, reg, reg, rshift	= dp_reg_regshift(LT, RSC, SETFLAGS)
rscgts reg, reg, reg, rshift	= dp_reg_regshift(GT, RSC, SETFLAGS)
rscsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, RSC, SETFLAGS)
rscles reg, reg, reg, rshift	= dp_reg_regshift(LE, RSC, SETFLAGS)
rscsle reg, reg, reg, rshift	= dp_reg_regshift(LE, RSC, SETFLAGS)
rscals reg, reg, reg, rshift	= dp_reg_regshift(AL, RSC, SETFLAGS)
rscsal reg, reg, reg, rshift	= dp_reg_regshift(AL, RSC, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
rsc reg, imm			= dp_imm_DN(AL, RSC, NOFLAGS)
rsceq reg, imm		= dp_imm_DN(EQ, RSC, NOFLAGS)
rscne reg, imm		= dp_imm_DN(NE, RSC, NOFLAGS)
rsccs reg, imm		= dp_imm_DN(CS, RSC, NOFLAGS)
rsccc reg, imm		= dp_imm_DN(CC, RSC, NOFLAGS)
rscmi reg, imm		= dp_imm_DN(MI, RSC, NOFLAGS)
rscpl reg, imm		= dp_imm_DN(PL, RSC, NOFLAGS)
rscvs reg, imm		= dp_imm_DN(VS, RSC, NOFLAGS)
rscvc reg, imm		= dp_imm_DN(VC, RSC, NOFLAGS)
rschi reg, imm		= dp_imm_DN(HI, RSC, NOFLAGS)
rscls reg, imm		= dp_imm_DN(LS, RSC, NOFLAGS)
rscge reg, imm		= dp_imm_DN(GE, RSC, NOFLAGS)
rsclt reg, imm		= dp_imm_DN(LT, RSC, NOFLAGS)
rscgt reg, imm		= dp_imm_DN(GT, RSC, NOFLAGS)
rscle reg, imm		= dp_imm_DN(LE, RSC, NOFLAGS)
rscal reg, imm		= dp_imm_DN(AL, RSC, NOFLAGS)

# immediate with setflags with Rd == Rn
rscs reg, imm		= dp_imm_DN(AL, RSC, SETFLAGS)
rscseq reg, imm		= dp_imm_DN(EQ, RSC, SETFLAGS)
rsceqs reg, imm		= dp_imm_DN(EQ, RSC, SETFLAGS)
rscsne reg, imm		= dp_imm_DN(NE, RSC, SETFLAGS)
rscnes reg, imm		= dp_imm_DN(NE, RSC, SETFLAGS)
rscscs reg, imm		= dp_imm_DN(CS, RSC, SETFLAGS)
rsccss reg, imm		= dp_imm_DN(CS, RSC, SETFLAGS)
rscscc reg, imm		= dp_imm_DN(CC, RSC, SETFLAGS)
rscccs reg, imm		= dp_imm_DN(CC, RSC, SETFLAGS)
rscsmi reg, imm		= dp_imm_DN(MI, RSC, SETFLAGS)
rscmis reg, imm		= dp_imm_DN(MI, RSC, SETFLAGS)
rscspl reg, imm		= dp_imm_DN(PL, RSC, SETFLAGS)
rscpls reg, imm		= dp_imm_DN(PL, RSC, SETFLAGS)
rscsvs reg, imm		= dp_imm_DN(VS, RSC, SETFLAGS)
rscvss reg, imm		= dp_imm_DN(VS, RSC, SETFLAGS)
rscsvc reg, imm		= dp_imm_DN(VC, RSC, SETFLAGS)
rscvcs reg, imm		= dp_imm_DN(VC, RSC, SETFLAGS)
rscshi reg, imm		= dp_imm_DN(HI, RSC, SETFLAGS)
rschis reg, imm		= dp_imm_DN(HI, RSC, SETFLAGS)
rscsls reg, imm		= dp_imm_DN(LS, RSC, SETFLAGS)
rsclss reg, imm		= dp_imm_DN(LS, RSC, SETFLAGS)
rscsge reg, imm		= dp_imm_DN(GE, RSC, SETFLAGS)
rscges reg, imm		= dp_imm_DN(GE, RSC, SETFLAGS)
rscslt reg, imm		= dp_imm_DN(LT, RSC, SETFLAGS)
rsclts reg, imm		= dp_imm_DN(LT, RSC, SETFLAGS)
rscsgt reg, imm		= dp_imm_DN(GT, RSC, SETFLAGS)
rscgts reg, imm		= dp_imm_DN(GT, RSC, SETFLAGS)
rscsle reg, imm		= dp_imm_DN(LE, RSC, SETFLAGS)
rscles reg, imm		= dp_imm_DN(LE, RSC, SETFLAGS)
rscsal reg, imm		= dp_imm_DN(AL, RSC, SETFLAGS)
rscals reg, imm		= dp_imm_DN(AL, RSC, SETFLAGS)

# register shifted by nothing with Rd == Rn
rsc reg, reg			= dp_reg_immshift_DN(AL, RSC, NOFLAGS)
rsceq reg, reg			= dp_reg_immshift_DN(EQ, RSC, NOFLAGS)
rscne reg, reg			= dp_reg_immshift_DN(NE, RSC, NOFLAGS)
rsccs reg, reg			= dp_reg_immshift_DN(CS, RSC, NOFLAGS)
rsccc reg, reg			= dp_reg_immshift_DN(CC, RSC, NOFLAGS)
rscmi reg, reg			= dp_reg_immshift_DN(MI, RSC, NOFLAGS)
rscpl reg, reg			= dp_reg_immshift_DN(PL, RSC, NOFLAGS)
rscvs reg, reg			= dp_reg_immshift_DN(VS, RSC, NOFLAGS)
rscvc reg, reg			= dp_reg_immshift_DN(VC, RSC, NOFLAGS)
rschi reg, reg			= dp_reg_immshift_DN(HI, RSC, NOFLAGS)
rscls reg, reg			= dp_reg_immshift_DN(LS, RSC, NOFLAGS)
rscge reg, reg			= dp_reg_immshift_DN(GE, RSC, NOFLAGS)
rsclt reg, reg			= dp_reg_immshift_DN(LT, RSC, NOFLAGS)
rscgt reg, reg			= dp_reg_immshift_DN(GT, RSC, NOFLAGS)
rscle reg, reg			= dp_reg_immshift_DN(LE, RSC, NOFLAGS)
rscal reg, reg			= dp_reg_immshift_DN(AL, RSC, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
rscs reg, reg			= dp_reg_immshift_DN(AL, RSC, SETFLAGS)
rsceqs reg, reg			= dp_reg_immshift_DN(EQ, RSC, SETFLAGS)
rscseq reg, reg			= dp_reg_immshift_DN(EQ, RSC, SETFLAGS)
rscnes reg, reg			= dp_reg_immshift_DN(NE, RSC, SETFLAGS)
rscsne reg, reg			= dp_reg_immshift_DN(NE, RSC, SETFLAGS)
rsccss reg, reg			= dp_reg_immshift_DN(CS, RSC, SETFLAGS)
rscscs reg, reg			= dp_reg_immshift_DN(CS, RSC, SETFLAGS)
rscccs reg, reg			= dp_reg_immshift_DN(CC, RSC, SETFLAGS)
rscscc reg, reg			= dp_reg_immshift_DN(CC, RSC, SETFLAGS)
rscmis reg, reg			= dp_reg_immshift_DN(MI, RSC, SETFLAGS)
rscsmi reg, reg			= dp_reg_immshift_DN(MI, RSC, SETFLAGS)
rscpls reg, reg			= dp_reg_immshift_DN(PL, RSC, SETFLAGS)
rscspl reg, reg			= dp_reg_immshift_DN(PL, RSC, SETFLAGS)
rscvss reg, reg			= dp_reg_immshift_DN(VS, RSC, SETFLAGS)
rscsvs reg, reg			= dp_reg_immshift_DN(VS, RSC, SETFLAGS)
rscvcs reg, reg			= dp_reg_immshift_DN(VC, RSC, SETFLAGS)
rscsvc reg, reg			= dp_reg_immshift_DN(VC, RSC, SETFLAGS)
rschis reg, reg			= dp_reg_immshift_DN(HI, RSC, SETFLAGS)
rscshi reg, reg			= dp_reg_immshift_DN(HI, RSC, SETFLAGS)
rsclss reg, reg			= dp_reg_immshift_DN(LS, RSC, SETFLAGS)
rscsls reg, reg			= dp_reg_immshift_DN(LS, RSC, SETFLAGS)
rscges reg, reg			= dp_reg_immshift_DN(GE, RSC, SETFLAGS)
rscsge reg, reg			= dp_reg_immshift_DN(GE, RSC, SETFLAGS)
rsclts reg, reg			= dp_reg_immshift_DN(LT, RSC, SETFLAGS)
rscslt reg, reg			= dp_reg_immshift_DN(LT, RSC, SETFLAGS)
rscgts reg, reg			= dp_reg_immshift_DN(GT, RSC, SETFLAGS)
rscsgt reg, reg			= dp_reg_immshift_DN(GT, RSC, SETFLAGS)
rscles reg, reg			= dp_reg_immshift_DN(LE, RSC, SETFLAGS)
rscsle reg, reg			= dp_reg_immshift_DN(LE, RSC, SETFLAGS)
rscals reg, reg			= dp_reg_immshift_DN(AL, RSC, SETFLAGS)
rscsal reg, reg			= dp_reg_immshift_DN(AL, RSC, SETFLAGS)

# register shifted by immediate with Rd == Rn
rsc reg, reg, ishift		= dp_reg_immshift_DN(AL, RSC, NOFLAGS)
rsceq reg, reg, ishift		= dp_reg_immshift_DN(EQ, RSC, NOFLAGS)
rscne reg, reg, ishift		= dp_reg_immshift_DN(NE, RSC, NOFLAGS)
rsccs reg, reg, ishift		= dp_reg_immshift_DN(CS, RSC, NOFLAGS)
rsccc reg, reg, ishift		= dp_reg_immshift_DN(CC, RSC, NOFLAGS)
rscmi reg, reg, ishift		= dp_reg_immshift_DN(MI, RSC, NOFLAGS)
rscpl reg, reg, ishift		= dp_reg_immshift_DN(PL, RSC, NOFLAGS)
rscvs reg, reg, ishift		= dp_reg_immshift_DN(VS, RSC, NOFLAGS)
rscvc reg, reg, ishift		= dp_reg_immshift_DN(VC, RSC, NOFLAGS)
rschi reg, reg, ishift		= dp_reg_immshift_DN(HI, RSC, NOFLAGS)
rscls reg, reg, ishift		= dp_reg_immshift_DN(LS, RSC, NOFLAGS)
rscge reg, reg, ishift		= dp_reg_immshift_DN(GE, RSC, NOFLAGS)
rsclt reg, reg, ishift		= dp_reg_immshift_DN(LT, RSC, NOFLAGS)
rscgt reg, reg, ishift		= dp_reg_immshift_DN(GT, RSC, NOFLAGS)
rscle reg, reg, ishift		= dp_reg_immshift_DN(LE, RSC, NOFLAGS)
rscal reg, reg, ishift		= dp_reg_immshift_DN(AL, RSC, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
rscs reg, reg, ishift		= dp_reg_immshift_DN(AL, RSC, SETFLAGS)
rsceqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, RSC, SETFLAGS)
rscseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, RSC, SETFLAGS)
rscnes reg, reg, ishift		= dp_reg_immshift_DN(NE, RSC, SETFLAGS)
rscsne reg, reg, ishift		= dp_reg_immshift_DN(NE, RSC, SETFLAGS)
rsccss reg, reg, ishift		= dp_reg_immshift_DN(CS, RSC, SETFLAGS)
rscscs reg, reg, ishift		= dp_reg_immshift_DN(CS, RSC, SETFLAGS)
rscccs reg, reg, ishift		= dp_reg_immshift_DN(CC, RSC, SETFLAGS)
rscscc reg, reg, ishift		= dp_reg_immshift_DN(CC, RSC, SETFLAGS)
rscmis reg, reg, ishift		= dp_reg_immshift_DN(MI, RSC, SETFLAGS)
rscsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, RSC, SETFLAGS)
rscpls reg, reg, ishift		= dp_reg_immshift_DN(PL, RSC, SETFLAGS)
rscspl reg, reg, ishift		= dp_reg_immshift_DN(PL, RSC, SETFLAGS)
rscvss reg, reg, ishift		= dp_reg_immshift_DN(VS, RSC, SETFLAGS)
rscsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, RSC, SETFLAGS)
rscvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, RSC, SETFLAGS)
rscsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, RSC, SETFLAGS)
rschis reg, reg, ishift		= dp_reg_immshift_DN(HI, RSC, SETFLAGS)
rscshi reg, reg, ishift		= dp_reg_immshift_DN(HI, RSC, SETFLAGS)
rsclss reg, reg, ishift		= dp_reg_immshift_DN(LS, RSC, SETFLAGS)
rscsls reg, reg, ishift		= dp_reg_immshift_DN(LS, RSC, SETFLAGS)
rscges reg, reg, ishift		= dp_reg_immshift_DN(GE, RSC, SETFLAGS)
rscsge reg, reg, ishift		= dp_reg_immshift_DN(GE, RSC, SETFLAGS)
rsclts reg, reg, ishift		= dp_reg_immshift_DN(LT, RSC, SETFLAGS)
rscslt reg, reg, ishift		= dp_reg_immshift_DN(LT, RSC, SETFLAGS)
rscgts reg, reg, ishift		= dp_reg_immshift_DN(GT, RSC, SETFLAGS)
rscsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, RSC, SETFLAGS)
rscles reg, reg, ishift		= dp_reg_immshift_DN(LE, RSC, SETFLAGS)
rscsle reg, reg, ishift		= dp_reg_immshift_DN(LE, RSC, SETFLAGS)
rscals reg, reg, ishift		= dp_reg_immshift_DN(AL, RSC, SETFLAGS)
rscsal reg, reg, ishift		= dp_reg_immshift_DN(AL, RSC, SETFLAGS)

# register shifted by register with Rd == Rn
rsc reg, reg, rshift		= dp_reg_regshift_DN(AL, RSC, NOFLAGS)
rsceq reg, reg, rshift		= dp_reg_regshift_DN(EQ, RSC, NOFLAGS)
rscne reg, reg, rshift		= dp_reg_regshift_DN(NE, RSC, NOFLAGS)
rsccs reg, reg, rshift		= dp_reg_regshift_DN(CS, RSC, NOFLAGS)
rsccc reg, reg, rshift		= dp_reg_regshift_DN(CC, RSC, NOFLAGS)
rscmi reg, reg, rshift		= dp_reg_regshift_DN(MI, RSC, NOFLAGS)
rscpl reg, reg, rshift		= dp_reg_regshift_DN(PL, RSC, NOFLAGS)
rscvs reg, reg, rshift		= dp_reg_regshift_DN(VS, RSC, NOFLAGS)
rscvc reg, reg, rshift		= dp_reg_regshift_DN(VC, RSC, NOFLAGS)
rschi reg, reg, rshift		= dp_reg_regshift_DN(HI, RSC, NOFLAGS)
rscls reg, reg, rshift		= dp_reg_regshift_DN(LS, RSC, NOFLAGS)
rscge reg, reg, rshift		= dp_reg_regshift_DN(GE, RSC, NOFLAGS)
rsclt reg, reg, rshift		= dp_reg_regshift_DN(LT, RSC, NOFLAGS)
rscgt reg, reg, rshift		= dp_reg_regshift_DN(GT, RSC, NOFLAGS)
rscle reg, reg, rshift		= dp_reg_regshift_DN(LE, RSC, NOFLAGS)
rscal reg, reg, rshift		= dp_reg_regshift_DN(AL, RSC, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
rscs reg, reg, rshift		= dp_reg_regshift_DN(AL, RSC, SETFLAGS)
rsceqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, RSC, SETFLAGS)
rscseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, RSC, SETFLAGS)
rscnes reg, reg, rshift		= dp_reg_regshift_DN(NE, RSC, SETFLAGS)
rscsne reg, reg, rshift		= dp_reg_regshift_DN(NE, RSC, SETFLAGS)
rsccss reg, reg, rshift		= dp_reg_regshift_DN(CS, RSC, SETFLAGS)
rscscs reg, reg, rshift		= dp_reg_regshift_DN(CS, RSC, SETFLAGS)
rscccs reg, reg, rshift		= dp_reg_regshift_DN(CC, RSC, SETFLAGS)
rscscc reg, reg, rshift		= dp_reg_regshift_DN(CC, RSC, SETFLAGS)
rscmis reg, reg, rshift		= dp_reg_regshift_DN(MI, RSC, SETFLAGS)
rscsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, RSC, SETFLAGS)
rscpls reg, reg, rshift		= dp_reg_regshift_DN(PL, RSC, SETFLAGS)
rscspl reg, reg, rshift		= dp_reg_regshift_DN(PL, RSC, SETFLAGS)
rscvss reg, reg, rshift		= dp_reg_regshift_DN(VS, RSC, SETFLAGS)
rscsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, RSC, SETFLAGS)
rscvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, RSC, SETFLAGS)
rscsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, RSC, SETFLAGS)
rschis reg, reg, rshift		= dp_reg_regshift_DN(HI, RSC, SETFLAGS)
rscshi reg, reg, rshift		= dp_reg_regshift_DN(HI, RSC, SETFLAGS)
rsclss reg, reg, rshift		= dp_reg_regshift_DN(LS, RSC, SETFLAGS)
rscsls reg, reg, rshift		= dp_reg_regshift_DN(LS, RSC, SETFLAGS)
rscges reg, reg, rshift		= dp_reg_regshift_DN(GE, RSC, SETFLAGS)
rscsge reg, reg, rshift		= dp_reg_regshift_DN(GE, RSC, SETFLAGS)
rsclts reg, reg, rshift		= dp_reg_regshift_DN(LT, RSC, SETFLAGS)
rscslt reg, reg, rshift		= dp_reg_regshift_DN(LT, RSC, SETFLAGS)
rscgts reg, reg, rshift		= dp_reg_regshift_DN(GT, RSC, SETFLAGS)
rscsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, RSC, SETFLAGS)
rscles reg, reg, rshift		= dp_reg_regshift_DN(LE, RSC, SETFLAGS)
rscsle reg, reg, rshift		= dp_reg_regshift_DN(LE, RSC, SETFLAGS)
rscals reg, reg, rshift		= dp_reg_regshift_DN(AL, RSC, SETFLAGS)
rscsal reg, reg, rshift		= dp_reg_regshift_DN(AL, RSC, SETFLAGS)

#
# AND
#

# immediate
and reg, reg, imm		= dp_imm(AL, AND, NOFLAGS)
andeq reg, reg, imm		= dp_imm(EQ, AND, NOFLAGS)
andne reg, reg, imm		= dp_imm(NE, AND, NOFLAGS)
andcs reg, reg, imm		= dp_imm(CS, AND, NOFLAGS)
andcc reg, reg, imm		= dp_imm(CC, AND, NOFLAGS)
andmi reg, reg, imm		= dp_imm(MI, AND, NOFLAGS)
andpl reg, reg, imm		= dp_imm(PL, AND, NOFLAGS)
andvs reg, reg, imm		= dp_imm(VS, AND, NOFLAGS)
andvc reg, reg, imm		= dp_imm(VC, AND, NOFLAGS)
andhi reg, reg, imm		= dp_imm(HI, AND, NOFLAGS)
andls reg, reg, imm		= dp_imm(LS, AND, NOFLAGS)
andge reg, reg, imm		= dp_imm(GE, AND, NOFLAGS)
andlt reg, reg, imm		= dp_imm(LT, AND, NOFLAGS)
andgt reg, reg, imm		= dp_imm(GT, AND, NOFLAGS)
andle reg, reg, imm		= dp_imm(LE, AND, NOFLAGS)
andal reg, reg, imm		= dp_imm(AL, AND, NOFLAGS)

# immediate with setflags
ands reg, reg, imm		= dp_imm(AL, AND, SETFLAGS)
andseq reg, reg, imm		= dp_imm(EQ, AND, SETFLAGS)
andeqs reg, reg, imm		= dp_imm(EQ, AND, SETFLAGS)
andsne reg, reg, imm		= dp_imm(NE, AND, SETFLAGS)
andnes reg, reg, imm		= dp_imm(NE, AND, SETFLAGS)
andscs reg, reg, imm		= dp_imm(CS, AND, SETFLAGS)
andcss reg, reg, imm		= dp_imm(CS, AND, SETFLAGS)
andscc reg, reg, imm		= dp_imm(CC, AND, SETFLAGS)
andccs reg, reg, imm		= dp_imm(CC, AND, SETFLAGS)
andsmi reg, reg, imm		= dp_imm(MI, AND, SETFLAGS)
andmis reg, reg, imm		= dp_imm(MI, AND, SETFLAGS)
andspl reg, reg, imm		= dp_imm(PL, AND, SETFLAGS)
andpls reg, reg, imm		= dp_imm(PL, AND, SETFLAGS)
andsvs reg, reg, imm		= dp_imm(VS, AND, SETFLAGS)
andvss reg, reg, imm		= dp_imm(VS, AND, SETFLAGS)
andsvc reg, reg, imm		= dp_imm(VC, AND, SETFLAGS)
andvcs reg, reg, imm		= dp_imm(VC, AND, SETFLAGS)
andshi reg, reg, imm		= dp_imm(HI, AND, SETFLAGS)
andhis reg, reg, imm		= dp_imm(HI, AND, SETFLAGS)
andsls reg, reg, imm		= dp_imm(LS, AND, SETFLAGS)
andlss reg, reg, imm		= dp_imm(LS, AND, SETFLAGS)
andsge reg, reg, imm		= dp_imm(GE, AND, SETFLAGS)
andges reg, reg, imm		= dp_imm(GE, AND, SETFLAGS)
andslt reg, reg, imm		= dp_imm(LT, AND, SETFLAGS)
andlts reg, reg, imm		= dp_imm(LT, AND, SETFLAGS)
andsgt reg, reg, imm		= dp_imm(GT, AND, SETFLAGS)
andgts reg, reg, imm		= dp_imm(GT, AND, SETFLAGS)
andsle reg, reg, imm		= dp_imm(LE, AND, SETFLAGS)
andles reg, reg, imm		= dp_imm(LE, AND, SETFLAGS)
andsal reg, reg, imm		= dp_imm(AL, AND, SETFLAGS)
andals reg, reg, imm		= dp_imm(AL, AND, SETFLAGS)

# register shifted by nothing
and reg, reg, reg		= dp_reg_immshift(AL, AND, NOFLAGS)
andeq reg, reg, reg		= dp_reg_immshift(EQ, AND, NOFLAGS)
andne reg, reg, reg		= dp_reg_immshift(NE, AND, NOFLAGS)
andcs reg, reg, reg		= dp_reg_immshift(CS, AND, NOFLAGS)
andcc reg, reg, reg		= dp_reg_immshift(CC, AND, NOFLAGS)
andmi reg, reg, reg		= dp_reg_immshift(MI, AND, NOFLAGS)
andpl reg, reg, reg		= dp_reg_immshift(PL, AND, NOFLAGS)
andvs reg, reg, reg		= dp_reg_immshift(VS, AND, NOFLAGS)
andvc reg, reg, reg		= dp_reg_immshift(VC, AND, NOFLAGS)
andhi reg, reg, reg		= dp_reg_immshift(HI, AND, NOFLAGS)
andls reg, reg, reg		= dp_reg_immshift(LS, AND, NOFLAGS)
andge reg, reg, reg		= dp_reg_immshift(GE, AND, NOFLAGS)
andlt reg, reg, reg		= dp_reg_immshift(LT, AND, NOFLAGS)
andgt reg, reg, reg		= dp_reg_immshift(GT, AND, NOFLAGS)
andle reg, reg, reg		= dp_reg_immshift(LE, AND, NOFLAGS)
andal reg, reg, reg		= dp_reg_immshift(AL, AND, NOFLAGS)

# register shifted by nothing with setflags
ands reg, reg, reg		= dp_reg_immshift(AL, AND, SETFLAGS)
andeqs reg, reg, reg		= dp_reg_immshift(EQ, AND, SETFLAGS)
andseq reg, reg, reg		= dp_reg_immshift(EQ, AND, SETFLAGS)
andnes reg, reg, reg		= dp_reg_immshift(NE, AND, SETFLAGS)
andsne reg, reg, reg		= dp_reg_immshift(NE, AND, SETFLAGS)
andcss reg, reg, reg		= dp_reg_immshift(CS, AND, SETFLAGS)
andscs reg, reg, reg		= dp_reg_immshift(CS, AND, SETFLAGS)
andccs reg, reg, reg		= dp_reg_immshift(CC, AND, SETFLAGS)
andscc reg, reg, reg		= dp_reg_immshift(CC, AND, SETFLAGS)
andmis reg, reg, reg		= dp_reg_immshift(MI, AND, SETFLAGS)
andsmi reg, reg, reg		= dp_reg_immshift(MI, AND, SETFLAGS)
andpls reg, reg, reg		= dp_reg_immshift(PL, AND, SETFLAGS)
andspl reg, reg, reg		= dp_reg_immshift(PL, AND, SETFLAGS)
andvss reg, reg, reg		= dp_reg_immshift(VS, AND, SETFLAGS)
andsvs reg, reg, reg		= dp_reg_immshift(VS, AND, SETFLAGS)
andvcs reg, reg, reg		= dp_reg_immshift(VC, AND, SETFLAGS)
andsvc reg, reg, reg		= dp_reg_immshift(VC, AND, SETFLAGS)
andhis reg, reg, reg		= dp_reg_immshift(HI, AND, SETFLAGS)
andshi reg, reg, reg		= dp_reg_immshift(HI, AND, SETFLAGS)
andlss reg, reg, reg		= dp_reg_immshift(LS, AND, SETFLAGS)
andsls reg, reg, reg		= dp_reg_immshift(LS, AND, SETFLAGS)
andges reg, reg, reg		= dp_reg_immshift(GE, AND, SETFLAGS)
andsge reg, reg, reg		= dp_reg_immshift(GE, AND, SETFLAGS)
andlts reg, reg, reg		= dp_reg_immshift(LT, AND, SETFLAGS)
andslt reg, reg, reg		= dp_reg_immshift(LT, AND, SETFLAGS)
andgts reg, reg, reg		= dp_reg_immshift(GT, AND, SETFLAGS)
andsgt reg, reg, reg		= dp_reg_immshift(GT, AND, SETFLAGS)
andles reg, reg, reg		= dp_reg_immshift(LE, AND, SETFLAGS)
andsle reg, reg, reg		= dp_reg_immshift(LE, AND, SETFLAGS)
andals reg, reg, reg		= dp_reg_immshift(AL, AND, SETFLAGS)
andsal reg, reg, reg		= dp_reg_immshift(AL, AND, SETFLAGS)

# register shifted by immediate
and reg, reg, reg, ishift	= dp_reg_immshift(AL, AND, NOFLAGS)
andeq reg, reg, reg, ishift	= dp_reg_immshift(EQ, AND, NOFLAGS)
andne reg, reg, reg, ishift	= dp_reg_immshift(NE, AND, NOFLAGS)
andcs reg, reg, reg, ishift	= dp_reg_immshift(CS, AND, NOFLAGS)
andcc reg, reg, reg, ishift	= dp_reg_immshift(CC, AND, NOFLAGS)
andmi reg, reg, reg, ishift	= dp_reg_immshift(MI, AND, NOFLAGS)
andpl reg, reg, reg, ishift	= dp_reg_immshift(PL, AND, NOFLAGS)
andvs reg, reg, reg, ishift	= dp_reg_immshift(VS, AND, NOFLAGS)
andvc reg, reg, reg, ishift	= dp_reg_immshift(VC, AND, NOFLAGS)
andhi reg, reg, reg, ishift	= dp_reg_immshift(HI, AND, NOFLAGS)
andls reg, reg, reg, ishift	= dp_reg_immshift(LS, AND, NOFLAGS)
andge reg, reg, reg, ishift	= dp_reg_immshift(GE, AND, NOFLAGS)
andlt reg, reg, reg, ishift	= dp_reg_immshift(LT, AND, NOFLAGS)
andgt reg, reg, reg, ishift	= dp_reg_immshift(GT, AND, NOFLAGS)
andle reg, reg, reg, ishift	= dp_reg_immshift(LE, AND, NOFLAGS)
andal reg, reg, reg, ishift	= dp_reg_immshift(AL, AND, NOFLAGS)

# register shifted by immediate with setflags
ands reg, reg, reg, ishift	= dp_reg_immshift(AL, AND, SETFLAGS)
andeqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, AND, SETFLAGS)
andseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, AND, SETFLAGS)
andnes reg, reg, reg, ishift	= dp_reg_immshift(NE, AND, SETFLAGS)
andsne reg, reg, reg, ishift	= dp_reg_immshift(NE, AND, SETFLAGS)
andcss reg, reg, reg, ishift	= dp_reg_immshift(CS, AND, SETFLAGS)
andscs reg, reg, reg, ishift	= dp_reg_immshift(CS, AND, SETFLAGS)
andccs reg, reg, reg, ishift	= dp_reg_immshift(CC, AND, SETFLAGS)
andscc reg, reg, reg, ishift	= dp_reg_immshift(CC, AND, SETFLAGS)
andmis reg, reg, reg, ishift	= dp_reg_immshift(MI, AND, SETFLAGS)
andsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, AND, SETFLAGS)
andpls reg, reg, reg, ishift	= dp_reg_immshift(PL, AND, SETFLAGS)
andspl reg, reg, reg, ishift	= dp_reg_immshift(PL, AND, SETFLAGS)
andvss reg, reg, reg, ishift	= dp_reg_immshift(VS, AND, SETFLAGS)
andsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, AND, SETFLAGS)
andvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, AND, SETFLAGS)
andsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, AND, SETFLAGS)
andhis reg, reg, reg, ishift	= dp_reg_immshift(HI, AND, SETFLAGS)
andshi reg, reg, reg, ishift	= dp_reg_immshift(HI, AND, SETFLAGS)
andlss reg, reg, reg, ishift	= dp_reg_immshift(LS, AND, SETFLAGS)
andsls reg, reg, reg, ishift	= dp_reg_immshift(LS, AND, SETFLAGS)
andges reg, reg, reg, ishift	= dp_reg_immshift(GE, AND, SETFLAGS)
andsge reg, reg, reg, ishift	= dp_reg_immshift(GE, AND, SETFLAGS)
andlts reg, reg, reg, ishift	= dp_reg_immshift(LT, AND, SETFLAGS)
andslt reg, reg, reg, ishift	= dp_reg_immshift(LT, AND, SETFLAGS)
andgts reg, reg, reg, ishift	= dp_reg_immshift(GT, AND, SETFLAGS)
andsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, AND, SETFLAGS)
andles reg, reg, reg, ishift	= dp_reg_immshift(LE, AND, SETFLAGS)
andsle reg, reg, reg, ishift	= dp_reg_immshift(LE, AND, SETFLAGS)
andals reg, reg, reg, ishift	= dp_reg_immshift(AL, AND, SETFLAGS)
andsal reg, reg, reg, ishift	= dp_reg_immshift(AL, AND, SETFLAGS)

# register shifted by register
and reg, reg, reg, rshift	= dp_reg_regshift(AL, AND, NOFLAGS)
andeq reg, reg, reg, rshift	= dp_reg_regshift(EQ, AND, NOFLAGS)
andne reg, reg, reg, rshift	= dp_reg_regshift(NE, AND, NOFLAGS)
andcs reg, reg, reg, rshift	= dp_reg_regshift(CS, AND, NOFLAGS)
andcc reg, reg, reg, rshift	= dp_reg_regshift(CC, AND, NOFLAGS)
andmi reg, reg, reg, rshift	= dp_reg_regshift(MI, AND, NOFLAGS)
andpl reg, reg, reg, rshift	= dp_reg_regshift(PL, AND, NOFLAGS)
andvs reg, reg, reg, rshift	= dp_reg_regshift(VS, AND, NOFLAGS)
andvc reg, reg, reg, rshift	= dp_reg_regshift(VC, AND, NOFLAGS)
andhi reg, reg, reg, rshift	= dp_reg_regshift(HI, AND, NOFLAGS)
andls reg, reg, reg, rshift	= dp_reg_regshift(LS, AND, NOFLAGS)
andge reg, reg, reg, rshift	= dp_reg_regshift(GE, AND, NOFLAGS)
andlt reg, reg, reg, rshift	= dp_reg_regshift(LT, AND, NOFLAGS)
andgt reg, reg, reg, rshift	= dp_reg_regshift(GT, AND, NOFLAGS)
andle reg, reg, reg, rshift	= dp_reg_regshift(LE, AND, NOFLAGS)
andal reg, reg, reg, rshift	= dp_reg_regshift(AL, AND, NOFLAGS)

# register shifted by register with setflags
ands reg, reg, reg, rshift	= dp_reg_regshift(AL, AND, SETFLAGS)
andeqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, AND, SETFLAGS)
andseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, AND, SETFLAGS)
andnes reg, reg, reg, rshift	= dp_reg_regshift(NE, AND, SETFLAGS)
andsne reg, reg, reg, rshift	= dp_reg_regshift(NE, AND, SETFLAGS)
andcss reg, reg, reg, rshift	= dp_reg_regshift(CS, AND, SETFLAGS)
andscs reg, reg, reg, rshift	= dp_reg_regshift(CS, AND, SETFLAGS)
andccs reg, reg, reg, rshift	= dp_reg_regshift(CC, AND, SETFLAGS)
andscc reg, reg, reg, rshift	= dp_reg_regshift(CC, AND, SETFLAGS)
andmis reg, reg, reg, rshift	= dp_reg_regshift(MI, AND, SETFLAGS)
andsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, AND, SETFLAGS)
andpls reg, reg, reg, rshift	= dp_reg_regshift(PL, AND, SETFLAGS)
andspl reg, reg, reg, rshift	= dp_reg_regshift(PL, AND, SETFLAGS)
andvss reg, reg, reg, rshift	= dp_reg_regshift(VS, AND, SETFLAGS)
andsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, AND, SETFLAGS)
andvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, AND, SETFLAGS)
andsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, AND, SETFLAGS)
andhis reg, reg, reg, rshift	= dp_reg_regshift(HI, AND, SETFLAGS)
andshi reg, reg, reg, rshift	= dp_reg_regshift(HI, AND, SETFLAGS)
andlss reg, reg, reg, rshift	= dp_reg_regshift(LS, AND, SETFLAGS)
andsls reg, reg, reg, rshift	= dp_reg_regshift(LS, AND, SETFLAGS)
andges reg, reg, reg, rshift	= dp_reg_regshift(GE, AND, SETFLAGS)
andsge reg, reg, reg, rshift	= dp_reg_regshift(GE, AND, SETFLAGS)
andlts reg, reg, reg, rshift	= dp_reg_regshift(LT, AND, SETFLAGS)
andslt reg, reg, reg, rshift	= dp_reg_regshift(LT, AND, SETFLAGS)
andgts reg, reg, reg, rshift	= dp_reg_regshift(GT, AND, SETFLAGS)
andsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, AND, SETFLAGS)
andles reg, reg, reg, rshift	= dp_reg_regshift(LE, AND, SETFLAGS)
andsle reg, reg, reg, rshift	= dp_reg_regshift(LE, AND, SETFLAGS)
andals reg, reg, reg, rshift	= dp_reg_regshift(AL, AND, SETFLAGS)
andsal reg, reg, reg, rshift	= dp_reg_regshift(AL, AND, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
and reg, imm			= dp_imm_DN(AL, AND, NOFLAGS)
andeq reg, imm		= dp_imm_DN(EQ, AND, NOFLAGS)
andne reg, imm		= dp_imm_DN(NE, AND, NOFLAGS)
andcs reg, imm		= dp_imm_DN(CS, AND, NOFLAGS)
andcc reg, imm		= dp_imm_DN(CC, AND, NOFLAGS)
andmi reg, imm		= dp_imm_DN(MI, AND, NOFLAGS)
andpl reg, imm		= dp_imm_DN(PL, AND, NOFLAGS)
andvs reg, imm		= dp_imm_DN(VS, AND, NOFLAGS)
andvc reg, imm		= dp_imm_DN(VC, AND, NOFLAGS)
andhi reg, imm		= dp_imm_DN(HI, AND, NOFLAGS)
andls reg, imm		= dp_imm_DN(LS, AND, NOFLAGS)
andge reg, imm		= dp_imm_DN(GE, AND, NOFLAGS)
andlt reg, imm		= dp_imm_DN(LT, AND, NOFLAGS)
andgt reg, imm		= dp_imm_DN(GT, AND, NOFLAGS)
andle reg, imm		= dp_imm_DN(LE, AND, NOFLAGS)
andal reg, imm		= dp_imm_DN(AL, AND, NOFLAGS)

# immediate with setflags with Rd == Rn
ands reg, imm		= dp_imm_DN(AL, AND, SETFLAGS)
andseq reg, imm		= dp_imm_DN(EQ, AND, SETFLAGS)
andeqs reg, imm		= dp_imm_DN(EQ, AND, SETFLAGS)
andsne reg, imm		= dp_imm_DN(NE, AND, SETFLAGS)
andnes reg, imm		= dp_imm_DN(NE, AND, SETFLAGS)
andscs reg, imm		= dp_imm_DN(CS, AND, SETFLAGS)
andcss reg, imm		= dp_imm_DN(CS, AND, SETFLAGS)
andscc reg, imm		= dp_imm_DN(CC, AND, SETFLAGS)
andccs reg, imm		= dp_imm_DN(CC, AND, SETFLAGS)
andsmi reg, imm		= dp_imm_DN(MI, AND, SETFLAGS)
andmis reg, imm		= dp_imm_DN(MI, AND, SETFLAGS)
andspl reg, imm		= dp_imm_DN(PL, AND, SETFLAGS)
andpls reg, imm		= dp_imm_DN(PL, AND, SETFLAGS)
andsvs reg, imm		= dp_imm_DN(VS, AND, SETFLAGS)
andvss reg, imm		= dp_imm_DN(VS, AND, SETFLAGS)
andsvc reg, imm		= dp_imm_DN(VC, AND, SETFLAGS)
andvcs reg, imm		= dp_imm_DN(VC, AND, SETFLAGS)
andshi reg, imm		= dp_imm_DN(HI, AND, SETFLAGS)
andhis reg, imm		= dp_imm_DN(HI, AND, SETFLAGS)
andsls reg, imm		= dp_imm_DN(LS, AND, SETFLAGS)
andlss reg, imm		= dp_imm_DN(LS, AND, SETFLAGS)
andsge reg, imm		= dp_imm_DN(GE, AND, SETFLAGS)
andges reg, imm		= dp_imm_DN(GE, AND, SETFLAGS)
andslt reg, imm		= dp_imm_DN(LT, AND, SETFLAGS)
andlts reg, imm		= dp_imm_DN(LT, AND, SETFLAGS)
andsgt reg, imm		= dp_imm_DN(GT, AND, SETFLAGS)
andgts reg, imm		= dp_imm_DN(GT, AND, SETFLAGS)
andsle reg, imm		= dp_imm_DN(LE, AND, SETFLAGS)
andles reg, imm		= dp_imm_DN(LE, AND, SETFLAGS)
andsal reg, imm		= dp_imm_DN(AL, AND, SETFLAGS)
andals reg, imm		= dp_imm_DN(AL, AND, SETFLAGS)

# register shifted by nothing with Rd == Rn
and reg, reg			= dp_reg_immshift_DN(AL, AND, NOFLAGS)
andeq reg, reg			= dp_reg_immshift_DN(EQ, AND, NOFLAGS)
andne reg, reg			= dp_reg_immshift_DN(NE, AND, NOFLAGS)
andcs reg, reg			= dp_reg_immshift_DN(CS, AND, NOFLAGS)
andcc reg, reg			= dp_reg_immshift_DN(CC, AND, NOFLAGS)
andmi reg, reg			= dp_reg_immshift_DN(MI, AND, NOFLAGS)
andpl reg, reg			= dp_reg_immshift_DN(PL, AND, NOFLAGS)
andvs reg, reg			= dp_reg_immshift_DN(VS, AND, NOFLAGS)
andvc reg, reg			= dp_reg_immshift_DN(VC, AND, NOFLAGS)
andhi reg, reg			= dp_reg_immshift_DN(HI, AND, NOFLAGS)
andls reg, reg			= dp_reg_immshift_DN(LS, AND, NOFLAGS)
andge reg, reg			= dp_reg_immshift_DN(GE, AND, NOFLAGS)
andlt reg, reg			= dp_reg_immshift_DN(LT, AND, NOFLAGS)
andgt reg, reg			= dp_reg_immshift_DN(GT, AND, NOFLAGS)
andle reg, reg			= dp_reg_immshift_DN(LE, AND, NOFLAGS)
andal reg, reg			= dp_reg_immshift_DN(AL, AND, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
ands reg, reg			= dp_reg_immshift_DN(AL, AND, SETFLAGS)
andeqs reg, reg			= dp_reg_immshift_DN(EQ, AND, SETFLAGS)
andseq reg, reg			= dp_reg_immshift_DN(EQ, AND, SETFLAGS)
andnes reg, reg			= dp_reg_immshift_DN(NE, AND, SETFLAGS)
andsne reg, reg			= dp_reg_immshift_DN(NE, AND, SETFLAGS)
andcss reg, reg			= dp_reg_immshift_DN(CS, AND, SETFLAGS)
andscs reg, reg			= dp_reg_immshift_DN(CS, AND, SETFLAGS)
andccs reg, reg			= dp_reg_immshift_DN(CC, AND, SETFLAGS)
andscc reg, reg			= dp_reg_immshift_DN(CC, AND, SETFLAGS)
andmis reg, reg			= dp_reg_immshift_DN(MI, AND, SETFLAGS)
andsmi reg, reg			= dp_reg_immshift_DN(MI, AND, SETFLAGS)
andpls reg, reg			= dp_reg_immshift_DN(PL, AND, SETFLAGS)
andspl reg, reg			= dp_reg_immshift_DN(PL, AND, SETFLAGS)
andvss reg, reg			= dp_reg_immshift_DN(VS, AND, SETFLAGS)
andsvs reg, reg			= dp_reg_immshift_DN(VS, AND, SETFLAGS)
andvcs reg, reg			= dp_reg_immshift_DN(VC, AND, SETFLAGS)
andsvc reg, reg			= dp_reg_immshift_DN(VC, AND, SETFLAGS)
andhis reg, reg			= dp_reg_immshift_DN(HI, AND, SETFLAGS)
andshi reg, reg			= dp_reg_immshift_DN(HI, AND, SETFLAGS)
andlss reg, reg			= dp_reg_immshift_DN(LS, AND, SETFLAGS)
andsls reg, reg			= dp_reg_immshift_DN(LS, AND, SETFLAGS)
andges reg, reg			= dp_reg_immshift_DN(GE, AND, SETFLAGS)
andsge reg, reg			= dp_reg_immshift_DN(GE, AND, SETFLAGS)
andlts reg, reg			= dp_reg_immshift_DN(LT, AND, SETFLAGS)
andslt reg, reg			= dp_reg_immshift_DN(LT, AND, SETFLAGS)
andgts reg, reg			= dp_reg_immshift_DN(GT, AND, SETFLAGS)
andsgt reg, reg			= dp_reg_immshift_DN(GT, AND, SETFLAGS)
andles reg, reg			= dp_reg_immshift_DN(LE, AND, SETFLAGS)
andsle reg, reg			= dp_reg_immshift_DN(LE, AND, SETFLAGS)
andals reg, reg			= dp_reg_immshift_DN(AL, AND, SETFLAGS)
andsal reg, reg			= dp_reg_immshift_DN(AL, AND, SETFLAGS)

# register shifted by immediate with Rd == Rn
and reg, reg, ishift		= dp_reg_immshift_DN(AL, AND, NOFLAGS)
andeq reg, reg, ishift		= dp_reg_immshift_DN(EQ, AND, NOFLAGS)
andne reg, reg, ishift		= dp_reg_immshift_DN(NE, AND, NOFLAGS)
andcs reg, reg, ishift		= dp_reg_immshift_DN(CS, AND, NOFLAGS)
andcc reg, reg, ishift		= dp_reg_immshift_DN(CC, AND, NOFLAGS)
andmi reg, reg, ishift		= dp_reg_immshift_DN(MI, AND, NOFLAGS)
andpl reg, reg, ishift		= dp_reg_immshift_DN(PL, AND, NOFLAGS)
andvs reg, reg, ishift		= dp_reg_immshift_DN(VS, AND, NOFLAGS)
andvc reg, reg, ishift		= dp_reg_immshift_DN(VC, AND, NOFLAGS)
andhi reg, reg, ishift		= dp_reg_immshift_DN(HI, AND, NOFLAGS)
andls reg, reg, ishift		= dp_reg_immshift_DN(LS, AND, NOFLAGS)
andge reg, reg, ishift		= dp_reg_immshift_DN(GE, AND, NOFLAGS)
andlt reg, reg, ishift		= dp_reg_immshift_DN(LT, AND, NOFLAGS)
andgt reg, reg, ishift		= dp_reg_immshift_DN(GT, AND, NOFLAGS)
andle reg, reg, ishift		= dp_reg_immshift_DN(LE, AND, NOFLAGS)
andal reg, reg, ishift		= dp_reg_immshift_DN(AL, AND, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
ands reg, reg, ishift		= dp_reg_immshift_DN(AL, AND, SETFLAGS)
andeqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, AND, SETFLAGS)
andseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, AND, SETFLAGS)
andnes reg, reg, ishift		= dp_reg_immshift_DN(NE, AND, SETFLAGS)
andsne reg, reg, ishift		= dp_reg_immshift_DN(NE, AND, SETFLAGS)
andcss reg, reg, ishift		= dp_reg_immshift_DN(CS, AND, SETFLAGS)
andscs reg, reg, ishift		= dp_reg_immshift_DN(CS, AND, SETFLAGS)
andccs reg, reg, ishift		= dp_reg_immshift_DN(CC, AND, SETFLAGS)
andscc reg, reg, ishift		= dp_reg_immshift_DN(CC, AND, SETFLAGS)
andmis reg, reg, ishift		= dp_reg_immshift_DN(MI, AND, SETFLAGS)
andsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, AND, SETFLAGS)
andpls reg, reg, ishift		= dp_reg_immshift_DN(PL, AND, SETFLAGS)
andspl reg, reg, ishift		= dp_reg_immshift_DN(PL, AND, SETFLAGS)
andvss reg, reg, ishift		= dp_reg_immshift_DN(VS, AND, SETFLAGS)
andsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, AND, SETFLAGS)
andvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, AND, SETFLAGS)
andsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, AND, SETFLAGS)
andhis reg, reg, ishift		= dp_reg_immshift_DN(HI, AND, SETFLAGS)
andshi reg, reg, ishift		= dp_reg_immshift_DN(HI, AND, SETFLAGS)
andlss reg, reg, ishift		= dp_reg_immshift_DN(LS, AND, SETFLAGS)
andsls reg, reg, ishift		= dp_reg_immshift_DN(LS, AND, SETFLAGS)
andges reg, reg, ishift		= dp_reg_immshift_DN(GE, AND, SETFLAGS)
andsge reg, reg, ishift		= dp_reg_immshift_DN(GE, AND, SETFLAGS)
andlts reg, reg, ishift		= dp_reg_immshift_DN(LT, AND, SETFLAGS)
andslt reg, reg, ishift		= dp_reg_immshift_DN(LT, AND, SETFLAGS)
andgts reg, reg, ishift		= dp_reg_immshift_DN(GT, AND, SETFLAGS)
andsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, AND, SETFLAGS)
andles reg, reg, ishift		= dp_reg_immshift_DN(LE, AND, SETFLAGS)
andsle reg, reg, ishift		= dp_reg_immshift_DN(LE, AND, SETFLAGS)
andals reg, reg, ishift		= dp_reg_immshift_DN(AL, AND, SETFLAGS)
andsal reg, reg, ishift		= dp_reg_immshift_DN(AL, AND, SETFLAGS)

# register shifted by register with Rd == Rn
and reg, reg, rshift		= dp_reg_regshift_DN(AL, AND, NOFLAGS)
andeq reg, reg, rshift		= dp_reg_regshift_DN(EQ, AND, NOFLAGS)
andne reg, reg, rshift		= dp_reg_regshift_DN(NE, AND, NOFLAGS)
andcs reg, reg, rshift		= dp_reg_regshift_DN(CS, AND, NOFLAGS)
andcc reg, reg, rshift		= dp_reg_regshift_DN(CC, AND, NOFLAGS)
andmi reg, reg, rshift		= dp_reg_regshift_DN(MI, AND, NOFLAGS)
andpl reg, reg, rshift		= dp_reg_regshift_DN(PL, AND, NOFLAGS)
andvs reg, reg, rshift		= dp_reg_regshift_DN(VS, AND, NOFLAGS)
andvc reg, reg, rshift		= dp_reg_regshift_DN(VC, AND, NOFLAGS)
andhi reg, reg, rshift		= dp_reg_regshift_DN(HI, AND, NOFLAGS)
andls reg, reg, rshift		= dp_reg_regshift_DN(LS, AND, NOFLAGS)
andge reg, reg, rshift		= dp_reg_regshift_DN(GE, AND, NOFLAGS)
andlt reg, reg, rshift		= dp_reg_regshift_DN(LT, AND, NOFLAGS)
andgt reg, reg, rshift		= dp_reg_regshift_DN(GT, AND, NOFLAGS)
andle reg, reg, rshift		= dp_reg_regshift_DN(LE, AND, NOFLAGS)
andal reg, reg, rshift		= dp_reg_regshift_DN(AL, AND, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
ands reg, reg, rshift		= dp_reg_regshift_DN(AL, AND, SETFLAGS)
andeqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, AND, SETFLAGS)
andseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, AND, SETFLAGS)
andnes reg, reg, rshift		= dp_reg_regshift_DN(NE, AND, SETFLAGS)
andsne reg, reg, rshift		= dp_reg_regshift_DN(NE, AND, SETFLAGS)
andcss reg, reg, rshift		= dp_reg_regshift_DN(CS, AND, SETFLAGS)
andscs reg, reg, rshift		= dp_reg_regshift_DN(CS, AND, SETFLAGS)
andccs reg, reg, rshift		= dp_reg_regshift_DN(CC, AND, SETFLAGS)
andscc reg, reg, rshift		= dp_reg_regshift_DN(CC, AND, SETFLAGS)
andmis reg, reg, rshift		= dp_reg_regshift_DN(MI, AND, SETFLAGS)
andsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, AND, SETFLAGS)
andpls reg, reg, rshift		= dp_reg_regshift_DN(PL, AND, SETFLAGS)
andspl reg, reg, rshift		= dp_reg_regshift_DN(PL, AND, SETFLAGS)
andvss reg, reg, rshift		= dp_reg_regshift_DN(VS, AND, SETFLAGS)
andsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, AND, SETFLAGS)
andvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, AND, SETFLAGS)
andsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, AND, SETFLAGS)
andhis reg, reg, rshift		= dp_reg_regshift_DN(HI, AND, SETFLAGS)
andshi reg, reg, rshift		= dp_reg_regshift_DN(HI, AND, SETFLAGS)
andlss reg, reg, rshift		= dp_reg_regshift_DN(LS, AND, SETFLAGS)
andsls reg, reg, rshift		= dp_reg_regshift_DN(LS, AND, SETFLAGS)
andges reg, reg, rshift		= dp_reg_regshift_DN(GE, AND, SETFLAGS)
andsge reg, reg, rshift		= dp_reg_regshift_DN(GE, AND, SETFLAGS)
andlts reg, reg, rshift		= dp_reg_regshift_DN(LT, AND, SETFLAGS)
andslt reg, reg, rshift		= dp_reg_regshift_DN(LT, AND, SETFLAGS)
andgts reg, reg, rshift		= dp_reg_regshift_DN(GT, AND, SETFLAGS)
andsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, AND, SETFLAGS)
andles reg, reg, rshift		= dp_reg_regshift_DN(LE, AND, SETFLAGS)
andsle reg, reg, rshift		= dp_reg_regshift_DN(LE, AND, SETFLAGS)
andals reg, reg, rshift		= dp_reg_regshift_DN(AL, AND, SETFLAGS)
andsal reg, reg, rshift		= dp_reg_regshift_DN(AL, AND, SETFLAGS)

#
# BIC
#

# immediate
bic reg, reg, imm		= dp_imm(AL, BIC, NOFLAGS)
biceq reg, reg, imm		= dp_imm(EQ, BIC, NOFLAGS)
bicne reg, reg, imm		= dp_imm(NE, BIC, NOFLAGS)
biccs reg, reg, imm		= dp_imm(CS, BIC, NOFLAGS)
biccc reg, reg, imm		= dp_imm(CC, BIC, NOFLAGS)
bicmi reg, reg, imm		= dp_imm(MI, BIC, NOFLAGS)
bicpl reg, reg, imm		= dp_imm(PL, BIC, NOFLAGS)
bicvs reg, reg, imm		= dp_imm(VS, BIC, NOFLAGS)
bicvc reg, reg, imm		= dp_imm(VC, BIC, NOFLAGS)
bichi reg, reg, imm		= dp_imm(HI, BIC, NOFLAGS)
bicls reg, reg, imm		= dp_imm(LS, BIC, NOFLAGS)
bicge reg, reg, imm		= dp_imm(GE, BIC, NOFLAGS)
biclt reg, reg, imm		= dp_imm(LT, BIC, NOFLAGS)
bicgt reg, reg, imm		= dp_imm(GT, BIC, NOFLAGS)
bicle reg, reg, imm		= dp_imm(LE, BIC, NOFLAGS)
bical reg, reg, imm		= dp_imm(AL, BIC, NOFLAGS)

# immediate with setflags
bics reg, reg, imm		= dp_imm(AL, BIC, SETFLAGS)
bicseq reg, reg, imm		= dp_imm(EQ, BIC, SETFLAGS)
biceqs reg, reg, imm		= dp_imm(EQ, BIC, SETFLAGS)
bicsne reg, reg, imm		= dp_imm(NE, BIC, SETFLAGS)
bicnes reg, reg, imm		= dp_imm(NE, BIC, SETFLAGS)
bicscs reg, reg, imm		= dp_imm(CS, BIC, SETFLAGS)
biccss reg, reg, imm		= dp_imm(CS, BIC, SETFLAGS)
bicscc reg, reg, imm		= dp_imm(CC, BIC, SETFLAGS)
bicccs reg, reg, imm		= dp_imm(CC, BIC, SETFLAGS)
bicsmi reg, reg, imm		= dp_imm(MI, BIC, SETFLAGS)
bicmis reg, reg, imm		= dp_imm(MI, BIC, SETFLAGS)
bicspl reg, reg, imm		= dp_imm(PL, BIC, SETFLAGS)
bicpls reg, reg, imm		= dp_imm(PL, BIC, SETFLAGS)
bicsvs reg, reg, imm		= dp_imm(VS, BIC, SETFLAGS)
bicvss reg, reg, imm		= dp_imm(VS, BIC, SETFLAGS)
bicsvc reg, reg, imm		= dp_imm(VC, BIC, SETFLAGS)
bicvcs reg, reg, imm		= dp_imm(VC, BIC, SETFLAGS)
bicshi reg, reg, imm		= dp_imm(HI, BIC, SETFLAGS)
bichis reg, reg, imm		= dp_imm(HI, BIC, SETFLAGS)
bicsls reg, reg, imm		= dp_imm(LS, BIC, SETFLAGS)
biclss reg, reg, imm		= dp_imm(LS, BIC, SETFLAGS)
bicsge reg, reg, imm		= dp_imm(GE, BIC, SETFLAGS)
bicges reg, reg, imm		= dp_imm(GE, BIC, SETFLAGS)
bicslt reg, reg, imm		= dp_imm(LT, BIC, SETFLAGS)
biclts reg, reg, imm		= dp_imm(LT, BIC, SETFLAGS)
bicsgt reg, reg, imm		= dp_imm(GT, BIC, SETFLAGS)
bicgts reg, reg, imm		= dp_imm(GT, BIC, SETFLAGS)
bicsle reg, reg, imm		= dp_imm(LE, BIC, SETFLAGS)
bicles reg, reg, imm		= dp_imm(LE, BIC, SETFLAGS)
bicsal reg, reg, imm		= dp_imm(AL, BIC, SETFLAGS)
bicals reg, reg, imm		= dp_imm(AL, BIC, SETFLAGS)

# register shifted by nothing
bic reg, reg, reg		= dp_reg_immshift(AL, BIC, NOFLAGS)
biceq reg, reg, reg		= dp_reg_immshift(EQ, BIC, NOFLAGS)
bicne reg, reg, reg		= dp_reg_immshift(NE, BIC, NOFLAGS)
biccs reg, reg, reg		= dp_reg_immshift(CS, BIC, NOFLAGS)
biccc reg, reg, reg		= dp_reg_immshift(CC, BIC, NOFLAGS)
bicmi reg, reg, reg		= dp_reg_immshift(MI, BIC, NOFLAGS)
bicpl reg, reg, reg		= dp_reg_immshift(PL, BIC, NOFLAGS)
bicvs reg, reg, reg		= dp_reg_immshift(VS, BIC, NOFLAGS)
bicvc reg, reg, reg		= dp_reg_immshift(VC, BIC, NOFLAGS)
bichi reg, reg, reg		= dp_reg_immshift(HI, BIC, NOFLAGS)
bicls reg, reg, reg		= dp_reg_immshift(LS, BIC, NOFLAGS)
bicge reg, reg, reg		= dp_reg_immshift(GE, BIC, NOFLAGS)
biclt reg, reg, reg		= dp_reg_immshift(LT, BIC, NOFLAGS)
bicgt reg, reg, reg		= dp_reg_immshift(GT, BIC, NOFLAGS)
bicle reg, reg, reg		= dp_reg_immshift(LE, BIC, NOFLAGS)
bical reg, reg, reg		= dp_reg_immshift(AL, BIC, NOFLAGS)

# register shifted by nothing with setflags
bics reg, reg, reg		= dp_reg_immshift(AL, BIC, SETFLAGS)
biceqs reg, reg, reg		= dp_reg_immshift(EQ, BIC, SETFLAGS)
bicseq reg, reg, reg		= dp_reg_immshift(EQ, BIC, SETFLAGS)
bicnes reg, reg, reg		= dp_reg_immshift(NE, BIC, SETFLAGS)
bicsne reg, reg, reg		= dp_reg_immshift(NE, BIC, SETFLAGS)
biccss reg, reg, reg		= dp_reg_immshift(CS, BIC, SETFLAGS)
bicscs reg, reg, reg		= dp_reg_immshift(CS, BIC, SETFLAGS)
bicccs reg, reg, reg		= dp_reg_immshift(CC, BIC, SETFLAGS)
bicscc reg, reg, reg		= dp_reg_immshift(CC, BIC, SETFLAGS)
bicmis reg, reg, reg		= dp_reg_immshift(MI, BIC, SETFLAGS)
bicsmi reg, reg, reg		= dp_reg_immshift(MI, BIC, SETFLAGS)
bicpls reg, reg, reg		= dp_reg_immshift(PL, BIC, SETFLAGS)
bicspl reg, reg, reg		= dp_reg_immshift(PL, BIC, SETFLAGS)
bicvss reg, reg, reg		= dp_reg_immshift(VS, BIC, SETFLAGS)
bicsvs reg, reg, reg		= dp_reg_immshift(VS, BIC, SETFLAGS)
bicvcs reg, reg, reg		= dp_reg_immshift(VC, BIC, SETFLAGS)
bicsvc reg, reg, reg		= dp_reg_immshift(VC, BIC, SETFLAGS)
bichis reg, reg, reg		= dp_reg_immshift(HI, BIC, SETFLAGS)
bicshi reg, reg, reg		= dp_reg_immshift(HI, BIC, SETFLAGS)
biclss reg, reg, reg		= dp_reg_immshift(LS, BIC, SETFLAGS)
bicsls reg, reg, reg		= dp_reg_immshift(LS, BIC, SETFLAGS)
bicges reg, reg, reg		= dp_reg_immshift(GE, BIC, SETFLAGS)
bicsge reg, reg, reg		= dp_reg_immshift(GE, BIC, SETFLAGS)
biclts reg, reg, reg		= dp_reg_immshift(LT, BIC, SETFLAGS)
bicslt reg, reg, reg		= dp_reg_immshift(LT, BIC, SETFLAGS)
bicgts reg, reg, reg		= dp_reg_immshift(GT, BIC, SETFLAGS)
bicsgt reg, reg, reg		= dp_reg_immshift(GT, BIC, SETFLAGS)
bicles reg, reg, reg		= dp_reg_immshift(LE, BIC, SETFLAGS)
bicsle reg, reg, reg		= dp_reg_immshift(LE, BIC, SETFLAGS)
bicals reg, reg, reg		= dp_reg_immshift(AL, BIC, SETFLAGS)
bicsal reg, reg, reg		= dp_reg_immshift(AL, BIC, SETFLAGS)

# register shifted by immediate
bic reg, reg, reg, ishift	= dp_reg_immshift(AL, BIC, NOFLAGS)
biceq reg, reg, reg, ishift	= dp_reg_immshift(EQ, BIC, NOFLAGS)
bicne reg, reg, reg, ishift	= dp_reg_immshift(NE, BIC, NOFLAGS)
biccs reg, reg, reg, ishift	= dp_reg_immshift(CS, BIC, NOFLAGS)
biccc reg, reg, reg, ishift	= dp_reg_immshift(CC, BIC, NOFLAGS)
bicmi reg, reg, reg, ishift	= dp_reg_immshift(MI, BIC, NOFLAGS)
bicpl reg, reg, reg, ishift	= dp_reg_immshift(PL, BIC, NOFLAGS)
bicvs reg, reg, reg, ishift	= dp_reg_immshift(VS, BIC, NOFLAGS)
bicvc reg, reg, reg, ishift	= dp_reg_immshift(VC, BIC, NOFLAGS)
bichi reg, reg, reg, ishift	= dp_reg_immshift(HI, BIC, NOFLAGS)
bicls reg, reg, reg, ishift	= dp_reg_immshift(LS, BIC, NOFLAGS)
bicge reg, reg, reg, ishift	= dp_reg_immshift(GE, BIC, NOFLAGS)
biclt reg, reg, reg, ishift	= dp_reg_immshift(LT, BIC, NOFLAGS)
bicgt reg, reg, reg, ishift	= dp_reg_immshift(GT, BIC, NOFLAGS)
bicle reg, reg, reg, ishift	= dp_reg_immshift(LE, BIC, NOFLAGS)
bical reg, reg, reg, ishift	= dp_reg_immshift(AL, BIC, NOFLAGS)

# register shifted by immediate with setflags
bics reg, reg, reg, ishift	= dp_reg_immshift(AL, BIC, SETFLAGS)
biceqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, BIC, SETFLAGS)
bicseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, BIC, SETFLAGS)
bicnes reg, reg, reg, ishift	= dp_reg_immshift(NE, BIC, SETFLAGS)
bicsne reg, reg, reg, ishift	= dp_reg_immshift(NE, BIC, SETFLAGS)
biccss reg, reg, reg, ishift	= dp_reg_immshift(CS, BIC, SETFLAGS)
bicscs reg, reg, reg, ishift	= dp_reg_immshift(CS, BIC, SETFLAGS)
bicccs reg, reg, reg, ishift	= dp_reg_immshift(CC, BIC, SETFLAGS)
bicscc reg, reg, reg, ishift	= dp_reg_immshift(CC, BIC, SETFLAGS)
bicmis reg, reg, reg, ishift	= dp_reg_immshift(MI, BIC, SETFLAGS)
bicsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, BIC, SETFLAGS)
bicpls reg, reg, reg, ishift	= dp_reg_immshift(PL, BIC, SETFLAGS)
bicspl reg, reg, reg, ishift	= dp_reg_immshift(PL, BIC, SETFLAGS)
bicvss reg, reg, reg, ishift	= dp_reg_immshift(VS, BIC, SETFLAGS)
bicsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, BIC, SETFLAGS)
bicvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, BIC, SETFLAGS)
bicsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, BIC, SETFLAGS)
bichis reg, reg, reg, ishift	= dp_reg_immshift(HI, BIC, SETFLAGS)
bicshi reg, reg, reg, ishift	= dp_reg_immshift(HI, BIC, SETFLAGS)
biclss reg, reg, reg, ishift	= dp_reg_immshift(LS, BIC, SETFLAGS)
bicsls reg, reg, reg, ishift	= dp_reg_immshift(LS, BIC, SETFLAGS)
bicges reg, reg, reg, ishift	= dp_reg_immshift(GE, BIC, SETFLAGS)
bicsge reg, reg, reg, ishift	= dp_reg_immshift(GE, BIC, SETFLAGS)
biclts reg, reg, reg, ishift	= dp_reg_immshift(LT, BIC, SETFLAGS)
bicslt reg, reg, reg, ishift	= dp_reg_immshift(LT, BIC, SETFLAGS)
bicgts reg, reg, reg, ishift	= dp_reg_immshift(GT, BIC, SETFLAGS)
bicsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, BIC, SETFLAGS)
bicles reg, reg, reg, ishift	= dp_reg_immshift(LE, BIC, SETFLAGS)
bicsle reg, reg, reg, ishift	= dp_reg_immshift(LE, BIC, SETFLAGS)
bicals reg, reg, reg, ishift	= dp_reg_immshift(AL, BIC, SETFLAGS)
bicsal reg, reg, reg, ishift	= dp_reg_immshift(AL, BIC, SETFLAGS)

# register shifted by register
bic reg, reg, reg, rshift	= dp_reg_regshift(AL, BIC, NOFLAGS)
biceq reg, reg, reg, rshift	= dp_reg_regshift(EQ, BIC, NOFLAGS)
bicne reg, reg, reg, rshift	= dp_reg_regshift(NE, BIC, NOFLAGS)
biccs reg, reg, reg, rshift	= dp_reg_regshift(CS, BIC, NOFLAGS)
biccc reg, reg, reg, rshift	= dp_reg_regshift(CC, BIC, NOFLAGS)
bicmi reg, reg, reg, rshift	= dp_reg_regshift(MI, BIC, NOFLAGS)
bicpl reg, reg, reg, rshift	= dp_reg_regshift(PL, BIC, NOFLAGS)
bicvs reg, reg, reg, rshift	= dp_reg_regshift(VS, BIC, NOFLAGS)
bicvc reg, reg, reg, rshift	= dp_reg_regshift(VC, BIC, NOFLAGS)
bichi reg, reg, reg, rshift	= dp_reg_regshift(HI, BIC, NOFLAGS)
bicls reg, reg, reg, rshift	= dp_reg_regshift(LS, BIC, NOFLAGS)
bicge reg, reg, reg, rshift	= dp_reg_regshift(GE, BIC, NOFLAGS)
biclt reg, reg, reg, rshift	= dp_reg_regshift(LT, BIC, NOFLAGS)
bicgt reg, reg, reg, rshift	= dp_reg_regshift(GT, BIC, NOFLAGS)
bicle reg, reg, reg, rshift	= dp_reg_regshift(LE, BIC, NOFLAGS)
bical reg, reg, reg, rshift	= dp_reg_regshift(AL, BIC, NOFLAGS)

# register shifted by register with setflags
bics reg, reg, reg, rshift	= dp_reg_regshift(AL, BIC, SETFLAGS)
biceqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, BIC, SETFLAGS)
bicseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, BIC, SETFLAGS)
bicnes reg, reg, reg, rshift	= dp_reg_regshift(NE, BIC, SETFLAGS)
bicsne reg, reg, reg, rshift	= dp_reg_regshift(NE, BIC, SETFLAGS)
biccss reg, reg, reg, rshift	= dp_reg_regshift(CS, BIC, SETFLAGS)
bicscs reg, reg, reg, rshift	= dp_reg_regshift(CS, BIC, SETFLAGS)
bicccs reg, reg, reg, rshift	= dp_reg_regshift(CC, BIC, SETFLAGS)
bicscc reg, reg, reg, rshift	= dp_reg_regshift(CC, BIC, SETFLAGS)
bicmis reg, reg, reg, rshift	= dp_reg_regshift(MI, BIC, SETFLAGS)
bicsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, BIC, SETFLAGS)
bicpls reg, reg, reg, rshift	= dp_reg_regshift(PL, BIC, SETFLAGS)
bicspl reg, reg, reg, rshift	= dp_reg_regshift(PL, BIC, SETFLAGS)
bicvss reg, reg, reg, rshift	= dp_reg_regshift(VS, BIC, SETFLAGS)
bicsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, BIC, SETFLAGS)
bicvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, BIC, SETFLAGS)
bicsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, BIC, SETFLAGS)
bichis reg, reg, reg, rshift	= dp_reg_regshift(HI, BIC, SETFLAGS)
bicshi reg, reg, reg, rshift	= dp_reg_regshift(HI, BIC, SETFLAGS)
biclss reg, reg, reg, rshift	= dp_reg_regshift(LS, BIC, SETFLAGS)
bicsls reg, reg, reg, rshift	= dp_reg_regshift(LS, BIC, SETFLAGS)
bicges reg, reg, reg, rshift	= dp_reg_regshift(GE, BIC, SETFLAGS)
bicsge reg, reg, reg, rshift	= dp_reg_regshift(GE, BIC, SETFLAGS)
biclts reg, reg, reg, rshift	= dp_reg_regshift(LT, BIC, SETFLAGS)
bicslt reg, reg, reg, rshift	= dp_reg_regshift(LT, BIC, SETFLAGS)
bicgts reg, reg, reg, rshift	= dp_reg_regshift(GT, BIC, SETFLAGS)
bicsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, BIC, SETFLAGS)
bicles reg, reg, reg, rshift	= dp_reg_regshift(LE, BIC, SETFLAGS)
bicsle reg, reg, reg, rshift	= dp_reg_regshift(LE, BIC, SETFLAGS)
bicals reg, reg, reg, rshift	= dp_reg_regshift(AL, BIC, SETFLAGS)
bicsal reg, reg, reg, rshift	= dp_reg_regshift(AL, BIC, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
bic reg, imm			= dp_imm_DN(AL, BIC, NOFLAGS)
biceq reg, imm		= dp_imm_DN(EQ, BIC, NOFLAGS)
bicne reg, imm		= dp_imm_DN(NE, BIC, NOFLAGS)
biccs reg, imm		= dp_imm_DN(CS, BIC, NOFLAGS)
biccc reg, imm		= dp_imm_DN(CC, BIC, NOFLAGS)
bicmi reg, imm		= dp_imm_DN(MI, BIC, NOFLAGS)
bicpl reg, imm		= dp_imm_DN(PL, BIC, NOFLAGS)
bicvs reg, imm		= dp_imm_DN(VS, BIC, NOFLAGS)
bicvc reg, imm		= dp_imm_DN(VC, BIC, NOFLAGS)
bichi reg, imm		= dp_imm_DN(HI, BIC, NOFLAGS)
bicls reg, imm		= dp_imm_DN(LS, BIC, NOFLAGS)
bicge reg, imm		= dp_imm_DN(GE, BIC, NOFLAGS)
biclt reg, imm		= dp_imm_DN(LT, BIC, NOFLAGS)
bicgt reg, imm		= dp_imm_DN(GT, BIC, NOFLAGS)
bicle reg, imm		= dp_imm_DN(LE, BIC, NOFLAGS)
bical reg, imm		= dp_imm_DN(AL, BIC, NOFLAGS)

# immediate with setflags with Rd == Rn
bics reg, imm		= dp_imm_DN(AL, BIC, SETFLAGS)
bicseq reg, imm		= dp_imm_DN(EQ, BIC, SETFLAGS)
biceqs reg, imm		= dp_imm_DN(EQ, BIC, SETFLAGS)
bicsne reg, imm		= dp_imm_DN(NE, BIC, SETFLAGS)
bicnes reg, imm		= dp_imm_DN(NE, BIC, SETFLAGS)
bicscs reg, imm		= dp_imm_DN(CS, BIC, SETFLAGS)
biccss reg, imm		= dp_imm_DN(CS, BIC, SETFLAGS)
bicscc reg, imm		= dp_imm_DN(CC, BIC, SETFLAGS)
bicccs reg, imm		= dp_imm_DN(CC, BIC, SETFLAGS)
bicsmi reg, imm		= dp_imm_DN(MI, BIC, SETFLAGS)
bicmis reg, imm		= dp_imm_DN(MI, BIC, SETFLAGS)
bicspl reg, imm		= dp_imm_DN(PL, BIC, SETFLAGS)
bicpls reg, imm		= dp_imm_DN(PL, BIC, SETFLAGS)
bicsvs reg, imm		= dp_imm_DN(VS, BIC, SETFLAGS)
bicvss reg, imm		= dp_imm_DN(VS, BIC, SETFLAGS)
bicsvc reg, imm		= dp_imm_DN(VC, BIC, SETFLAGS)
bicvcs reg, imm		= dp_imm_DN(VC, BIC, SETFLAGS)
bicshi reg, imm		= dp_imm_DN(HI, BIC, SETFLAGS)
bichis reg, imm		= dp_imm_DN(HI, BIC, SETFLAGS)
bicsls reg, imm		= dp_imm_DN(LS, BIC, SETFLAGS)
biclss reg, imm		= dp_imm_DN(LS, BIC, SETFLAGS)
bicsge reg, imm		= dp_imm_DN(GE, BIC, SETFLAGS)
bicges reg, imm		= dp_imm_DN(GE, BIC, SETFLAGS)
bicslt reg, imm		= dp_imm_DN(LT, BIC, SETFLAGS)
biclts reg, imm		= dp_imm_DN(LT, BIC, SETFLAGS)
bicsgt reg, imm		= dp_imm_DN(GT, BIC, SETFLAGS)
bicgts reg, imm		= dp_imm_DN(GT, BIC, SETFLAGS)
bicsle reg, imm		= dp_imm_DN(LE, BIC, SETFLAGS)
bicles reg, imm		= dp_imm_DN(LE, BIC, SETFLAGS)
bicsal reg, imm		= dp_imm_DN(AL, BIC, SETFLAGS)
bicals reg, imm		= dp_imm_DN(AL, BIC, SETFLAGS)

# register shifted by nothing with Rd == Rn
bic reg, reg			= dp_reg_immshift_DN(AL, BIC, NOFLAGS)
biceq reg, reg			= dp_reg_immshift_DN(EQ, BIC, NOFLAGS)
bicne reg, reg			= dp_reg_immshift_DN(NE, BIC, NOFLAGS)
biccs reg, reg			= dp_reg_immshift_DN(CS, BIC, NOFLAGS)
biccc reg, reg			= dp_reg_immshift_DN(CC, BIC, NOFLAGS)
bicmi reg, reg			= dp_reg_immshift_DN(MI, BIC, NOFLAGS)
bicpl reg, reg			= dp_reg_immshift_DN(PL, BIC, NOFLAGS)
bicvs reg, reg			= dp_reg_immshift_DN(VS, BIC, NOFLAGS)
bicvc reg, reg			= dp_reg_immshift_DN(VC, BIC, NOFLAGS)
bichi reg, reg			= dp_reg_immshift_DN(HI, BIC, NOFLAGS)
bicls reg, reg			= dp_reg_immshift_DN(LS, BIC, NOFLAGS)
bicge reg, reg			= dp_reg_immshift_DN(GE, BIC, NOFLAGS)
biclt reg, reg			= dp_reg_immshift_DN(LT, BIC, NOFLAGS)
bicgt reg, reg			= dp_reg_immshift_DN(GT, BIC, NOFLAGS)
bicle reg, reg			= dp_reg_immshift_DN(LE, BIC, NOFLAGS)
bical reg, reg			= dp_reg_immshift_DN(AL, BIC, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
bics reg, reg			= dp_reg_immshift_DN(AL, BIC, SETFLAGS)
biceqs reg, reg			= dp_reg_immshift_DN(EQ, BIC, SETFLAGS)
bicseq reg, reg			= dp_reg_immshift_DN(EQ, BIC, SETFLAGS)
bicnes reg, reg			= dp_reg_immshift_DN(NE, BIC, SETFLAGS)
bicsne reg, reg			= dp_reg_immshift_DN(NE, BIC, SETFLAGS)
biccss reg, reg			= dp_reg_immshift_DN(CS, BIC, SETFLAGS)
bicscs reg, reg			= dp_reg_immshift_DN(CS, BIC, SETFLAGS)
bicccs reg, reg			= dp_reg_immshift_DN(CC, BIC, SETFLAGS)
bicscc reg, reg			= dp_reg_immshift_DN(CC, BIC, SETFLAGS)
bicmis reg, reg			= dp_reg_immshift_DN(MI, BIC, SETFLAGS)
bicsmi reg, reg			= dp_reg_immshift_DN(MI, BIC, SETFLAGS)
bicpls reg, reg			= dp_reg_immshift_DN(PL, BIC, SETFLAGS)
bicspl reg, reg			= dp_reg_immshift_DN(PL, BIC, SETFLAGS)
bicvss reg, reg			= dp_reg_immshift_DN(VS, BIC, SETFLAGS)
bicsvs reg, reg			= dp_reg_immshift_DN(VS, BIC, SETFLAGS)
bicvcs reg, reg			= dp_reg_immshift_DN(VC, BIC, SETFLAGS)
bicsvc reg, reg			= dp_reg_immshift_DN(VC, BIC, SETFLAGS)
bichis reg, reg			= dp_reg_immshift_DN(HI, BIC, SETFLAGS)
bicshi reg, reg			= dp_reg_immshift_DN(HI, BIC, SETFLAGS)
biclss reg, reg			= dp_reg_immshift_DN(LS, BIC, SETFLAGS)
bicsls reg, reg			= dp_reg_immshift_DN(LS, BIC, SETFLAGS)
bicges reg, reg			= dp_reg_immshift_DN(GE, BIC, SETFLAGS)
bicsge reg, reg			= dp_reg_immshift_DN(GE, BIC, SETFLAGS)
biclts reg, reg			= dp_reg_immshift_DN(LT, BIC, SETFLAGS)
bicslt reg, reg			= dp_reg_immshift_DN(LT, BIC, SETFLAGS)
bicgts reg, reg			= dp_reg_immshift_DN(GT, BIC, SETFLAGS)
bicsgt reg, reg			= dp_reg_immshift_DN(GT, BIC, SETFLAGS)
bicles reg, reg			= dp_reg_immshift_DN(LE, BIC, SETFLAGS)
bicsle reg, reg			= dp_reg_immshift_DN(LE, BIC, SETFLAGS)
bicals reg, reg			= dp_reg_immshift_DN(AL, BIC, SETFLAGS)
bicsal reg, reg			= dp_reg_immshift_DN(AL, BIC, SETFLAGS)

# register shifted by immediate with Rd == Rn
bic reg, reg, ishift		= dp_reg_immshift_DN(AL, BIC, NOFLAGS)
biceq reg, reg, ishift		= dp_reg_immshift_DN(EQ, BIC, NOFLAGS)
bicne reg, reg, ishift		= dp_reg_immshift_DN(NE, BIC, NOFLAGS)
biccs reg, reg, ishift		= dp_reg_immshift_DN(CS, BIC, NOFLAGS)
biccc reg, reg, ishift		= dp_reg_immshift_DN(CC, BIC, NOFLAGS)
bicmi reg, reg, ishift		= dp_reg_immshift_DN(MI, BIC, NOFLAGS)
bicpl reg, reg, ishift		= dp_reg_immshift_DN(PL, BIC, NOFLAGS)
bicvs reg, reg, ishift		= dp_reg_immshift_DN(VS, BIC, NOFLAGS)
bicvc reg, reg, ishift		= dp_reg_immshift_DN(VC, BIC, NOFLAGS)
bichi reg, reg, ishift		= dp_reg_immshift_DN(HI, BIC, NOFLAGS)
bicls reg, reg, ishift		= dp_reg_immshift_DN(LS, BIC, NOFLAGS)
bicge reg, reg, ishift		= dp_reg_immshift_DN(GE, BIC, NOFLAGS)
biclt reg, reg, ishift		= dp_reg_immshift_DN(LT, BIC, NOFLAGS)
bicgt reg, reg, ishift		= dp_reg_immshift_DN(GT, BIC, NOFLAGS)
bicle reg, reg, ishift		= dp_reg_immshift_DN(LE, BIC, NOFLAGS)
bical reg, reg, ishift		= dp_reg_immshift_DN(AL, BIC, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
bics reg, reg, ishift		= dp_reg_immshift_DN(AL, BIC, SETFLAGS)
biceqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, BIC, SETFLAGS)
bicseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, BIC, SETFLAGS)
bicnes reg, reg, ishift		= dp_reg_immshift_DN(NE, BIC, SETFLAGS)
bicsne reg, reg, ishift		= dp_reg_immshift_DN(NE, BIC, SETFLAGS)
biccss reg, reg, ishift		= dp_reg_immshift_DN(CS, BIC, SETFLAGS)
bicscs reg, reg, ishift		= dp_reg_immshift_DN(CS, BIC, SETFLAGS)
bicccs reg, reg, ishift		= dp_reg_immshift_DN(CC, BIC, SETFLAGS)
bicscc reg, reg, ishift		= dp_reg_immshift_DN(CC, BIC, SETFLAGS)
bicmis reg, reg, ishift		= dp_reg_immshift_DN(MI, BIC, SETFLAGS)
bicsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, BIC, SETFLAGS)
bicpls reg, reg, ishift		= dp_reg_immshift_DN(PL, BIC, SETFLAGS)
bicspl reg, reg, ishift		= dp_reg_immshift_DN(PL, BIC, SETFLAGS)
bicvss reg, reg, ishift		= dp_reg_immshift_DN(VS, BIC, SETFLAGS)
bicsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, BIC, SETFLAGS)
bicvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, BIC, SETFLAGS)
bicsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, BIC, SETFLAGS)
bichis reg, reg, ishift		= dp_reg_immshift_DN(HI, BIC, SETFLAGS)
bicshi reg, reg, ishift		= dp_reg_immshift_DN(HI, BIC, SETFLAGS)
biclss reg, reg, ishift		= dp_reg_immshift_DN(LS, BIC, SETFLAGS)
bicsls reg, reg, ishift		= dp_reg_immshift_DN(LS, BIC, SETFLAGS)
bicges reg, reg, ishift		= dp_reg_immshift_DN(GE, BIC, SETFLAGS)
bicsge reg, reg, ishift		= dp_reg_immshift_DN(GE, BIC, SETFLAGS)
biclts reg, reg, ishift		= dp_reg_immshift_DN(LT, BIC, SETFLAGS)
bicslt reg, reg, ishift		= dp_reg_immshift_DN(LT, BIC, SETFLAGS)
bicgts reg, reg, ishift		= dp_reg_immshift_DN(GT, BIC, SETFLAGS)
bicsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, BIC, SETFLAGS)
bicles reg, reg, ishift		= dp_reg_immshift_DN(LE, BIC, SETFLAGS)
bicsle reg, reg, ishift		= dp_reg_immshift_DN(LE, BIC, SETFLAGS)
bicals reg, reg, ishift		= dp_reg_immshift_DN(AL, BIC, SETFLAGS)
bicsal reg, reg, ishift		= dp_reg_immshift_DN(AL, BIC, SETFLAGS)

# register shifted by register with Rd == Rn
bic reg, reg, rshift		= dp_reg_regshift_DN(AL, BIC, NOFLAGS)
biceq reg, reg, rshift		= dp_reg_regshift_DN(EQ, BIC, NOFLAGS)
bicne reg, reg, rshift		= dp_reg_regshift_DN(NE, BIC, NOFLAGS)
biccs reg, reg, rshift		= dp_reg_regshift_DN(CS, BIC, NOFLAGS)
biccc reg, reg, rshift		= dp_reg_regshift_DN(CC, BIC, NOFLAGS)
bicmi reg, reg, rshift		= dp_reg_regshift_DN(MI, BIC, NOFLAGS)
bicpl reg, reg, rshift		= dp_reg_regshift_DN(PL, BIC, NOFLAGS)
bicvs reg, reg, rshift		= dp_reg_regshift_DN(VS, BIC, NOFLAGS)
bicvc reg, reg, rshift		= dp_reg_regshift_DN(VC, BIC, NOFLAGS)
bichi reg, reg, rshift		= dp_reg_regshift_DN(HI, BIC, NOFLAGS)
bicls reg, reg, rshift		= dp_reg_regshift_DN(LS, BIC, NOFLAGS)
bicge reg, reg, rshift		= dp_reg_regshift_DN(GE, BIC, NOFLAGS)
biclt reg, reg, rshift		= dp_reg_regshift_DN(LT, BIC, NOFLAGS)
bicgt reg, reg, rshift		= dp_reg_regshift_DN(GT, BIC, NOFLAGS)
bicle reg, reg, rshift		= dp_reg_regshift_DN(LE, BIC, NOFLAGS)
bical reg, reg, rshift		= dp_reg_regshift_DN(AL, BIC, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
bics reg, reg, rshift		= dp_reg_regshift_DN(AL, BIC, SETFLAGS)
biceqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, BIC, SETFLAGS)
bicseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, BIC, SETFLAGS)
bicnes reg, reg, rshift		= dp_reg_regshift_DN(NE, BIC, SETFLAGS)
bicsne reg, reg, rshift		= dp_reg_regshift_DN(NE, BIC, SETFLAGS)
biccss reg, reg, rshift		= dp_reg_regshift_DN(CS, BIC, SETFLAGS)
bicscs reg, reg, rshift		= dp_reg_regshift_DN(CS, BIC, SETFLAGS)
bicccs reg, reg, rshift		= dp_reg_regshift_DN(CC, BIC, SETFLAGS)
bicscc reg, reg, rshift		= dp_reg_regshift_DN(CC, BIC, SETFLAGS)
bicmis reg, reg, rshift		= dp_reg_regshift_DN(MI, BIC, SETFLAGS)
bicsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, BIC, SETFLAGS)
bicpls reg, reg, rshift		= dp_reg_regshift_DN(PL, BIC, SETFLAGS)
bicspl reg, reg, rshift		= dp_reg_regshift_DN(PL, BIC, SETFLAGS)
bicvss reg, reg, rshift		= dp_reg_regshift_DN(VS, BIC, SETFLAGS)
bicsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, BIC, SETFLAGS)
bicvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, BIC, SETFLAGS)
bicsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, BIC, SETFLAGS)
bichis reg, reg, rshift		= dp_reg_regshift_DN(HI, BIC, SETFLAGS)
bicshi reg, reg, rshift		= dp_reg_regshift_DN(HI, BIC, SETFLAGS)
biclss reg, reg, rshift		= dp_reg_regshift_DN(LS, BIC, SETFLAGS)
bicsls reg, reg, rshift		= dp_reg_regshift_DN(LS, BIC, SETFLAGS)
bicges reg, reg, rshift		= dp_reg_regshift_DN(GE, BIC, SETFLAGS)
bicsge reg, reg, rshift		= dp_reg_regshift_DN(GE, BIC, SETFLAGS)
biclts reg, reg, rshift		= dp_reg_regshift_DN(LT, BIC, SETFLAGS)
bicslt reg, reg, rshift		= dp_reg_regshift_DN(LT, BIC, SETFLAGS)
bicgts reg, reg, rshift		= dp_reg_regshift_DN(GT, BIC, SETFLAGS)
bicsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, BIC, SETFLAGS)
bicles reg, reg, rshift		= dp_reg_regshift_DN(LE, BIC, SETFLAGS)
bicsle reg, reg, rshift		= dp_reg_regshift_DN(LE, BIC, SETFLAGS)
bicals reg, reg, rshift		= dp_reg_regshift_DN(AL, BIC, SETFLAGS)
bicsal reg, reg, rshift		= dp_reg_regshift_DN(AL, BIC, SETFLAGS)

#
# EOR
#

# immediate
eor reg, reg, imm		= dp_imm(AL, EOR, NOFLAGS)
eoreq reg, reg, imm		= dp_imm(EQ, EOR, NOFLAGS)
eorne reg, reg, imm		= dp_imm(NE, EOR, NOFLAGS)
eorcs reg, reg, imm		= dp_imm(CS, EOR, NOFLAGS)
eorcc reg, reg, imm		= dp_imm(CC, EOR, NOFLAGS)
eormi reg, reg, imm		= dp_imm(MI, EOR, NOFLAGS)
eorpl reg, reg, imm		= dp_imm(PL, EOR, NOFLAGS)
eorvs reg, reg, imm		= dp_imm(VS, EOR, NOFLAGS)
eorvc reg, reg, imm		= dp_imm(VC, EOR, NOFLAGS)
eorhi reg, reg, imm		= dp_imm(HI, EOR, NOFLAGS)
eorls reg, reg, imm		= dp_imm(LS, EOR, NOFLAGS)
eorge reg, reg, imm		= dp_imm(GE, EOR, NOFLAGS)
eorlt reg, reg, imm		= dp_imm(LT, EOR, NOFLAGS)
eorgt reg, reg, imm		= dp_imm(GT, EOR, NOFLAGS)
eorle reg, reg, imm		= dp_imm(LE, EOR, NOFLAGS)
eoral reg, reg, imm		= dp_imm(AL, EOR, NOFLAGS)

# immediate with setflags
eors reg, reg, imm		= dp_imm(AL, EOR, SETFLAGS)
eorseq reg, reg, imm		= dp_imm(EQ, EOR, SETFLAGS)
eoreqs reg, reg, imm		= dp_imm(EQ, EOR, SETFLAGS)
eorsne reg, reg, imm		= dp_imm(NE, EOR, SETFLAGS)
eornes reg, reg, imm		= dp_imm(NE, EOR, SETFLAGS)
eorscs reg, reg, imm		= dp_imm(CS, EOR, SETFLAGS)
eorcss reg, reg, imm		= dp_imm(CS, EOR, SETFLAGS)
eorscc reg, reg, imm		= dp_imm(CC, EOR, SETFLAGS)
eorccs reg, reg, imm		= dp_imm(CC, EOR, SETFLAGS)
eorsmi reg, reg, imm		= dp_imm(MI, EOR, SETFLAGS)
eormis reg, reg, imm		= dp_imm(MI, EOR, SETFLAGS)
eorspl reg, reg, imm		= dp_imm(PL, EOR, SETFLAGS)
eorpls reg, reg, imm		= dp_imm(PL, EOR, SETFLAGS)
eorsvs reg, reg, imm		= dp_imm(VS, EOR, SETFLAGS)
eorvss reg, reg, imm		= dp_imm(VS, EOR, SETFLAGS)
eorsvc reg, reg, imm		= dp_imm(VC, EOR, SETFLAGS)
eorvcs reg, reg, imm		= dp_imm(VC, EOR, SETFLAGS)
eorshi reg, reg, imm		= dp_imm(HI, EOR, SETFLAGS)
eorhis reg, reg, imm		= dp_imm(HI, EOR, SETFLAGS)
eorsls reg, reg, imm		= dp_imm(LS, EOR, SETFLAGS)
eorlss reg, reg, imm		= dp_imm(LS, EOR, SETFLAGS)
eorsge reg, reg, imm		= dp_imm(GE, EOR, SETFLAGS)
eorges reg, reg, imm		= dp_imm(GE, EOR, SETFLAGS)
eorslt reg, reg, imm		= dp_imm(LT, EOR, SETFLAGS)
eorlts reg, reg, imm		= dp_imm(LT, EOR, SETFLAGS)
eorsgt reg, reg, imm		= dp_imm(GT, EOR, SETFLAGS)
eorgts reg, reg, imm		= dp_imm(GT, EOR, SETFLAGS)
eorsle reg, reg, imm		= dp_imm(LE, EOR, SETFLAGS)
eorles reg, reg, imm		= dp_imm(LE, EOR, SETFLAGS)
eorsal reg, reg, imm		= dp_imm(AL, EOR, SETFLAGS)
eorals reg, reg, imm		= dp_imm(AL, EOR, SETFLAGS)

# register shifted by nothing
eor reg, reg, reg		= dp_reg_immshift(AL, EOR, NOFLAGS)
eoreq reg, reg, reg		= dp_reg_immshift(EQ, EOR, NOFLAGS)
eorne reg, reg, reg		= dp_reg_immshift(NE, EOR, NOFLAGS)
eorcs reg, reg, reg		= dp_reg_immshift(CS, EOR, NOFLAGS)
eorcc reg, reg, reg		= dp_reg_immshift(CC, EOR, NOFLAGS)
eormi reg, reg, reg		= dp_reg_immshift(MI, EOR, NOFLAGS)
eorpl reg, reg, reg		= dp_reg_immshift(PL, EOR, NOFLAGS)
eorvs reg, reg, reg		= dp_reg_immshift(VS, EOR, NOFLAGS)
eorvc reg, reg, reg		= dp_reg_immshift(VC, EOR, NOFLAGS)
eorhi reg, reg, reg		= dp_reg_immshift(HI, EOR, NOFLAGS)
eorls reg, reg, reg		= dp_reg_immshift(LS, EOR, NOFLAGS)
eorge reg, reg, reg		= dp_reg_immshift(GE, EOR, NOFLAGS)
eorlt reg, reg, reg		= dp_reg_immshift(LT, EOR, NOFLAGS)
eorgt reg, reg, reg		= dp_reg_immshift(GT, EOR, NOFLAGS)
eorle reg, reg, reg		= dp_reg_immshift(LE, EOR, NOFLAGS)
eoral reg, reg, reg		= dp_reg_immshift(AL, EOR, NOFLAGS)

# register shifted by nothing with setflags
eors reg, reg, reg		= dp_reg_immshift(AL, EOR, SETFLAGS)
eoreqs reg, reg, reg		= dp_reg_immshift(EQ, EOR, SETFLAGS)
eorseq reg, reg, reg		= dp_reg_immshift(EQ, EOR, SETFLAGS)
eornes reg, reg, reg		= dp_reg_immshift(NE, EOR, SETFLAGS)
eorsne reg, reg, reg		= dp_reg_immshift(NE, EOR, SETFLAGS)
eorcss reg, reg, reg		= dp_reg_immshift(CS, EOR, SETFLAGS)
eorscs reg, reg, reg		= dp_reg_immshift(CS, EOR, SETFLAGS)
eorccs reg, reg, reg		= dp_reg_immshift(CC, EOR, SETFLAGS)
eorscc reg, reg, reg		= dp_reg_immshift(CC, EOR, SETFLAGS)
eormis reg, reg, reg		= dp_reg_immshift(MI, EOR, SETFLAGS)
eorsmi reg, reg, reg		= dp_reg_immshift(MI, EOR, SETFLAGS)
eorpls reg, reg, reg		= dp_reg_immshift(PL, EOR, SETFLAGS)
eorspl reg, reg, reg		= dp_reg_immshift(PL, EOR, SETFLAGS)
eorvss reg, reg, reg		= dp_reg_immshift(VS, EOR, SETFLAGS)
eorsvs reg, reg, reg		= dp_reg_immshift(VS, EOR, SETFLAGS)
eorvcs reg, reg, reg		= dp_reg_immshift(VC, EOR, SETFLAGS)
eorsvc reg, reg, reg		= dp_reg_immshift(VC, EOR, SETFLAGS)
eorhis reg, reg, reg		= dp_reg_immshift(HI, EOR, SETFLAGS)
eorshi reg, reg, reg		= dp_reg_immshift(HI, EOR, SETFLAGS)
eorlss reg, reg, reg		= dp_reg_immshift(LS, EOR, SETFLAGS)
eorsls reg, reg, reg		= dp_reg_immshift(LS, EOR, SETFLAGS)
eorges reg, reg, reg		= dp_reg_immshift(GE, EOR, SETFLAGS)
eorsge reg, reg, reg		= dp_reg_immshift(GE, EOR, SETFLAGS)
eorlts reg, reg, reg		= dp_reg_immshift(LT, EOR, SETFLAGS)
eorslt reg, reg, reg		= dp_reg_immshift(LT, EOR, SETFLAGS)
eorgts reg, reg, reg		= dp_reg_immshift(GT, EOR, SETFLAGS)
eorsgt reg, reg, reg		= dp_reg_immshift(GT, EOR, SETFLAGS)
eorles reg, reg, reg		= dp_reg_immshift(LE, EOR, SETFLAGS)
eorsle reg, reg, reg		= dp_reg_immshift(LE, EOR, SETFLAGS)
eorals reg, reg, reg		= dp_reg_immshift(AL, EOR, SETFLAGS)
eorsal reg, reg, reg		= dp_reg_immshift(AL, EOR, SETFLAGS)

# register shifted by immediate
eor reg, reg, reg, ishift	= dp_reg_immshift(AL, EOR, NOFLAGS)
eoreq reg, reg, reg, ishift	= dp_reg_immshift(EQ, EOR, NOFLAGS)
eorne reg, reg, reg, ishift	= dp_reg_immshift(NE, EOR, NOFLAGS)
eorcs reg, reg, reg, ishift	= dp_reg_immshift(CS, EOR, NOFLAGS)
eorcc reg, reg, reg, ishift	= dp_reg_immshift(CC, EOR, NOFLAGS)
eormi reg, reg, reg, ishift	= dp_reg_immshift(MI, EOR, NOFLAGS)
eorpl reg, reg, reg, ishift	= dp_reg_immshift(PL, EOR, NOFLAGS)
eorvs reg, reg, reg, ishift	= dp_reg_immshift(VS, EOR, NOFLAGS)
eorvc reg, reg, reg, ishift	= dp_reg_immshift(VC, EOR, NOFLAGS)
eorhi reg, reg, reg, ishift	= dp_reg_immshift(HI, EOR, NOFLAGS)
eorls reg, reg, reg, ishift	= dp_reg_immshift(LS, EOR, NOFLAGS)
eorge reg, reg, reg, ishift	= dp_reg_immshift(GE, EOR, NOFLAGS)
eorlt reg, reg, reg, ishift	= dp_reg_immshift(LT, EOR, NOFLAGS)
eorgt reg, reg, reg, ishift	= dp_reg_immshift(GT, EOR, NOFLAGS)
eorle reg, reg, reg, ishift	= dp_reg_immshift(LE, EOR, NOFLAGS)
eoral reg, reg, reg, ishift	= dp_reg_immshift(AL, EOR, NOFLAGS)

# register shifted by immediate with setflags
eors reg, reg, reg, ishift	= dp_reg_immshift(AL, EOR, SETFLAGS)
eoreqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, EOR, SETFLAGS)
eorseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, EOR, SETFLAGS)
eornes reg, reg, reg, ishift	= dp_reg_immshift(NE, EOR, SETFLAGS)
eorsne reg, reg, reg, ishift	= dp_reg_immshift(NE, EOR, SETFLAGS)
eorcss reg, reg, reg, ishift	= dp_reg_immshift(CS, EOR, SETFLAGS)
eorscs reg, reg, reg, ishift	= dp_reg_immshift(CS, EOR, SETFLAGS)
eorccs reg, reg, reg, ishift	= dp_reg_immshift(CC, EOR, SETFLAGS)
eorscc reg, reg, reg, ishift	= dp_reg_immshift(CC, EOR, SETFLAGS)
eormis reg, reg, reg, ishift	= dp_reg_immshift(MI, EOR, SETFLAGS)
eorsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, EOR, SETFLAGS)
eorpls reg, reg, reg, ishift	= dp_reg_immshift(PL, EOR, SETFLAGS)
eorspl reg, reg, reg, ishift	= dp_reg_immshift(PL, EOR, SETFLAGS)
eorvss reg, reg, reg, ishift	= dp_reg_immshift(VS, EOR, SETFLAGS)
eorsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, EOR, SETFLAGS)
eorvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, EOR, SETFLAGS)
eorsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, EOR, SETFLAGS)
eorhis reg, reg, reg, ishift	= dp_reg_immshift(HI, EOR, SETFLAGS)
eorshi reg, reg, reg, ishift	= dp_reg_immshift(HI, EOR, SETFLAGS)
eorlss reg, reg, reg, ishift	= dp_reg_immshift(LS, EOR, SETFLAGS)
eorsls reg, reg, reg, ishift	= dp_reg_immshift(LS, EOR, SETFLAGS)
eorges reg, reg, reg, ishift	= dp_reg_immshift(GE, EOR, SETFLAGS)
eorsge reg, reg, reg, ishift	= dp_reg_immshift(GE, EOR, SETFLAGS)
eorlts reg, reg, reg, ishift	= dp_reg_immshift(LT, EOR, SETFLAGS)
eorslt reg, reg, reg, ishift	= dp_reg_immshift(LT, EOR, SETFLAGS)
eorgts reg, reg, reg, ishift	= dp_reg_immshift(GT, EOR, SETFLAGS)
eorsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, EOR, SETFLAGS)
eorles reg, reg, reg, ishift	= dp_reg_immshift(LE, EOR, SETFLAGS)
eorsle reg, reg, reg, ishift	= dp_reg_immshift(LE, EOR, SETFLAGS)
eorals reg, reg, reg, ishift	= dp_reg_immshift(AL, EOR, SETFLAGS)
eorsal reg, reg, reg, ishift	= dp_reg_immshift(AL, EOR, SETFLAGS)

# register shifted by register
eor reg, reg, reg, rshift	= dp_reg_regshift(AL, EOR, NOFLAGS)
eoreq reg, reg, reg, rshift	= dp_reg_regshift(EQ, EOR, NOFLAGS)
eorne reg, reg, reg, rshift	= dp_reg_regshift(NE, EOR, NOFLAGS)
eorcs reg, reg, reg, rshift	= dp_reg_regshift(CS, EOR, NOFLAGS)
eorcc reg, reg, reg, rshift	= dp_reg_regshift(CC, EOR, NOFLAGS)
eormi reg, reg, reg, rshift	= dp_reg_regshift(MI, EOR, NOFLAGS)
eorpl reg, reg, reg, rshift	= dp_reg_regshift(PL, EOR, NOFLAGS)
eorvs reg, reg, reg, rshift	= dp_reg_regshift(VS, EOR, NOFLAGS)
eorvc reg, reg, reg, rshift	= dp_reg_regshift(VC, EOR, NOFLAGS)
eorhi reg, reg, reg, rshift	= dp_reg_regshift(HI, EOR, NOFLAGS)
eorls reg, reg, reg, rshift	= dp_reg_regshift(LS, EOR, NOFLAGS)
eorge reg, reg, reg, rshift	= dp_reg_regshift(GE, EOR, NOFLAGS)
eorlt reg, reg, reg, rshift	= dp_reg_regshift(LT, EOR, NOFLAGS)
eorgt reg, reg, reg, rshift	= dp_reg_regshift(GT, EOR, NOFLAGS)
eorle reg, reg, reg, rshift	= dp_reg_regshift(LE, EOR, NOFLAGS)
eoral reg, reg, reg, rshift	= dp_reg_regshift(AL, EOR, NOFLAGS)

# register shifted by register with setflags
eors reg, reg, reg, rshift	= dp_reg_regshift(AL, EOR, SETFLAGS)
eoreqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, EOR, SETFLAGS)
eorseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, EOR, SETFLAGS)
eornes reg, reg, reg, rshift	= dp_reg_regshift(NE, EOR, SETFLAGS)
eorsne reg, reg, reg, rshift	= dp_reg_regshift(NE, EOR, SETFLAGS)
eorcss reg, reg, reg, rshift	= dp_reg_regshift(CS, EOR, SETFLAGS)
eorscs reg, reg, reg, rshift	= dp_reg_regshift(CS, EOR, SETFLAGS)
eorccs reg, reg, reg, rshift	= dp_reg_regshift(CC, EOR, SETFLAGS)
eorscc reg, reg, reg, rshift	= dp_reg_regshift(CC, EOR, SETFLAGS)
eormis reg, reg, reg, rshift	= dp_reg_regshift(MI, EOR, SETFLAGS)
eorsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, EOR, SETFLAGS)
eorpls reg, reg, reg, rshift	= dp_reg_regshift(PL, EOR, SETFLAGS)
eorspl reg, reg, reg, rshift	= dp_reg_regshift(PL, EOR, SETFLAGS)
eorvss reg, reg, reg, rshift	= dp_reg_regshift(VS, EOR, SETFLAGS)
eorsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, EOR, SETFLAGS)
eorvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, EOR, SETFLAGS)
eorsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, EOR, SETFLAGS)
eorhis reg, reg, reg, rshift	= dp_reg_regshift(HI, EOR, SETFLAGS)
eorshi reg, reg, reg, rshift	= dp_reg_regshift(HI, EOR, SETFLAGS)
eorlss reg, reg, reg, rshift	= dp_reg_regshift(LS, EOR, SETFLAGS)
eorsls reg, reg, reg, rshift	= dp_reg_regshift(LS, EOR, SETFLAGS)
eorges reg, reg, reg, rshift	= dp_reg_regshift(GE, EOR, SETFLAGS)
eorsge reg, reg, reg, rshift	= dp_reg_regshift(GE, EOR, SETFLAGS)
eorlts reg, reg, reg, rshift	= dp_reg_regshift(LT, EOR, SETFLAGS)
eorslt reg, reg, reg, rshift	= dp_reg_regshift(LT, EOR, SETFLAGS)
eorgts reg, reg, reg, rshift	= dp_reg_regshift(GT, EOR, SETFLAGS)
eorsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, EOR, SETFLAGS)
eorles reg, reg, reg, rshift	= dp_reg_regshift(LE, EOR, SETFLAGS)
eorsle reg, reg, reg, rshift	= dp_reg_regshift(LE, EOR, SETFLAGS)
eorals reg, reg, reg, rshift	= dp_reg_regshift(AL, EOR, SETFLAGS)
eorsal reg, reg, reg, rshift	= dp_reg_regshift(AL, EOR, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
eor reg, imm			= dp_imm_DN(AL, EOR, NOFLAGS)
eoreq reg, imm		= dp_imm_DN(EQ, EOR, NOFLAGS)
eorne reg, imm		= dp_imm_DN(NE, EOR, NOFLAGS)
eorcs reg, imm		= dp_imm_DN(CS, EOR, NOFLAGS)
eorcc reg, imm		= dp_imm_DN(CC, EOR, NOFLAGS)
eormi reg, imm		= dp_imm_DN(MI, EOR, NOFLAGS)
eorpl reg, imm		= dp_imm_DN(PL, EOR, NOFLAGS)
eorvs reg, imm		= dp_imm_DN(VS, EOR, NOFLAGS)
eorvc reg, imm		= dp_imm_DN(VC, EOR, NOFLAGS)
eorhi reg, imm		= dp_imm_DN(HI, EOR, NOFLAGS)
eorls reg, imm		= dp_imm_DN(LS, EOR, NOFLAGS)
eorge reg, imm		= dp_imm_DN(GE, EOR, NOFLAGS)
eorlt reg, imm		= dp_imm_DN(LT, EOR, NOFLAGS)
eorgt reg, imm		= dp_imm_DN(GT, EOR, NOFLAGS)
eorle reg, imm		= dp_imm_DN(LE, EOR, NOFLAGS)
eoral reg, imm		= dp_imm_DN(AL, EOR, NOFLAGS)

# immediate with setflags with Rd == Rn
eors reg, imm		= dp_imm_DN(AL, EOR, SETFLAGS)
eorseq reg, imm		= dp_imm_DN(EQ, EOR, SETFLAGS)
eoreqs reg, imm		= dp_imm_DN(EQ, EOR, SETFLAGS)
eorsne reg, imm		= dp_imm_DN(NE, EOR, SETFLAGS)
eornes reg, imm		= dp_imm_DN(NE, EOR, SETFLAGS)
eorscs reg, imm		= dp_imm_DN(CS, EOR, SETFLAGS)
eorcss reg, imm		= dp_imm_DN(CS, EOR, SETFLAGS)
eorscc reg, imm		= dp_imm_DN(CC, EOR, SETFLAGS)
eorccs reg, imm		= dp_imm_DN(CC, EOR, SETFLAGS)
eorsmi reg, imm		= dp_imm_DN(MI, EOR, SETFLAGS)
eormis reg, imm		= dp_imm_DN(MI, EOR, SETFLAGS)
eorspl reg, imm		= dp_imm_DN(PL, EOR, SETFLAGS)
eorpls reg, imm		= dp_imm_DN(PL, EOR, SETFLAGS)
eorsvs reg, imm		= dp_imm_DN(VS, EOR, SETFLAGS)
eorvss reg, imm		= dp_imm_DN(VS, EOR, SETFLAGS)
eorsvc reg, imm		= dp_imm_DN(VC, EOR, SETFLAGS)
eorvcs reg, imm		= dp_imm_DN(VC, EOR, SETFLAGS)
eorshi reg, imm		= dp_imm_DN(HI, EOR, SETFLAGS)
eorhis reg, imm		= dp_imm_DN(HI, EOR, SETFLAGS)
eorsls reg, imm		= dp_imm_DN(LS, EOR, SETFLAGS)
eorlss reg, imm		= dp_imm_DN(LS, EOR, SETFLAGS)
eorsge reg, imm		= dp_imm_DN(GE, EOR, SETFLAGS)
eorges reg, imm		= dp_imm_DN(GE, EOR, SETFLAGS)
eorslt reg, imm		= dp_imm_DN(LT, EOR, SETFLAGS)
eorlts reg, imm		= dp_imm_DN(LT, EOR, SETFLAGS)
eorsgt reg, imm		= dp_imm_DN(GT, EOR, SETFLAGS)
eorgts reg, imm		= dp_imm_DN(GT, EOR, SETFLAGS)
eorsle reg, imm		= dp_imm_DN(LE, EOR, SETFLAGS)
eorles reg, imm		= dp_imm_DN(LE, EOR, SETFLAGS)
eorsal reg, imm		= dp_imm_DN(AL, EOR, SETFLAGS)
eorals reg, imm		= dp_imm_DN(AL, EOR, SETFLAGS)

# register shifted by nothing with Rd == Rn
eor reg, reg			= dp_reg_immshift_DN(AL, EOR, NOFLAGS)
eoreq reg, reg			= dp_reg_immshift_DN(EQ, EOR, NOFLAGS)
eorne reg, reg			= dp_reg_immshift_DN(NE, EOR, NOFLAGS)
eorcs reg, reg			= dp_reg_immshift_DN(CS, EOR, NOFLAGS)
eorcc reg, reg			= dp_reg_immshift_DN(CC, EOR, NOFLAGS)
eormi reg, reg			= dp_reg_immshift_DN(MI, EOR, NOFLAGS)
eorpl reg, reg			= dp_reg_immshift_DN(PL, EOR, NOFLAGS)
eorvs reg, reg			= dp_reg_immshift_DN(VS, EOR, NOFLAGS)
eorvc reg, reg			= dp_reg_immshift_DN(VC, EOR, NOFLAGS)
eorhi reg, reg			= dp_reg_immshift_DN(HI, EOR, NOFLAGS)
eorls reg, reg			= dp_reg_immshift_DN(LS, EOR, NOFLAGS)
eorge reg, reg			= dp_reg_immshift_DN(GE, EOR, NOFLAGS)
eorlt reg, reg			= dp_reg_immshift_DN(LT, EOR, NOFLAGS)
eorgt reg, reg			= dp_reg_immshift_DN(GT, EOR, NOFLAGS)
eorle reg, reg			= dp_reg_immshift_DN(LE, EOR, NOFLAGS)
eoral reg, reg			= dp_reg_immshift_DN(AL, EOR, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
eors reg, reg			= dp_reg_immshift_DN(AL, EOR, SETFLAGS)
eoreqs reg, reg			= dp_reg_immshift_DN(EQ, EOR, SETFLAGS)
eorseq reg, reg			= dp_reg_immshift_DN(EQ, EOR, SETFLAGS)
eornes reg, reg			= dp_reg_immshift_DN(NE, EOR, SETFLAGS)
eorsne reg, reg			= dp_reg_immshift_DN(NE, EOR, SETFLAGS)
eorcss reg, reg			= dp_reg_immshift_DN(CS, EOR, SETFLAGS)
eorscs reg, reg			= dp_reg_immshift_DN(CS, EOR, SETFLAGS)
eorccs reg, reg			= dp_reg_immshift_DN(CC, EOR, SETFLAGS)
eorscc reg, reg			= dp_reg_immshift_DN(CC, EOR, SETFLAGS)
eormis reg, reg			= dp_reg_immshift_DN(MI, EOR, SETFLAGS)
eorsmi reg, reg			= dp_reg_immshift_DN(MI, EOR, SETFLAGS)
eorpls reg, reg			= dp_reg_immshift_DN(PL, EOR, SETFLAGS)
eorspl reg, reg			= dp_reg_immshift_DN(PL, EOR, SETFLAGS)
eorvss reg, reg			= dp_reg_immshift_DN(VS, EOR, SETFLAGS)
eorsvs reg, reg			= dp_reg_immshift_DN(VS, EOR, SETFLAGS)
eorvcs reg, reg			= dp_reg_immshift_DN(VC, EOR, SETFLAGS)
eorsvc reg, reg			= dp_reg_immshift_DN(VC, EOR, SETFLAGS)
eorhis reg, reg			= dp_reg_immshift_DN(HI, EOR, SETFLAGS)
eorshi reg, reg			= dp_reg_immshift_DN(HI, EOR, SETFLAGS)
eorlss reg, reg			= dp_reg_immshift_DN(LS, EOR, SETFLAGS)
eorsls reg, reg			= dp_reg_immshift_DN(LS, EOR, SETFLAGS)
eorges reg, reg			= dp_reg_immshift_DN(GE, EOR, SETFLAGS)
eorsge reg, reg			= dp_reg_immshift_DN(GE, EOR, SETFLAGS)
eorlts reg, reg			= dp_reg_immshift_DN(LT, EOR, SETFLAGS)
eorslt reg, reg			= dp_reg_immshift_DN(LT, EOR, SETFLAGS)
eorgts reg, reg			= dp_reg_immshift_DN(GT, EOR, SETFLAGS)
eorsgt reg, reg			= dp_reg_immshift_DN(GT, EOR, SETFLAGS)
eorles reg, reg			= dp_reg_immshift_DN(LE, EOR, SETFLAGS)
eorsle reg, reg			= dp_reg_immshift_DN(LE, EOR, SETFLAGS)
eorals reg, reg			= dp_reg_immshift_DN(AL, EOR, SETFLAGS)
eorsal reg, reg			= dp_reg_immshift_DN(AL, EOR, SETFLAGS)

# register shifted by immediate with Rd == Rn
eor reg, reg, ishift		= dp_reg_immshift_DN(AL, EOR, NOFLAGS)
eoreq reg, reg, ishift		= dp_reg_immshift_DN(EQ, EOR, NOFLAGS)
eorne reg, reg, ishift		= dp_reg_immshift_DN(NE, EOR, NOFLAGS)
eorcs reg, reg, ishift		= dp_reg_immshift_DN(CS, EOR, NOFLAGS)
eorcc reg, reg, ishift		= dp_reg_immshift_DN(CC, EOR, NOFLAGS)
eormi reg, reg, ishift		= dp_reg_immshift_DN(MI, EOR, NOFLAGS)
eorpl reg, reg, ishift		= dp_reg_immshift_DN(PL, EOR, NOFLAGS)
eorvs reg, reg, ishift		= dp_reg_immshift_DN(VS, EOR, NOFLAGS)
eorvc reg, reg, ishift		= dp_reg_immshift_DN(VC, EOR, NOFLAGS)
eorhi reg, reg, ishift		= dp_reg_immshift_DN(HI, EOR, NOFLAGS)
eorls reg, reg, ishift		= dp_reg_immshift_DN(LS, EOR, NOFLAGS)
eorge reg, reg, ishift		= dp_reg_immshift_DN(GE, EOR, NOFLAGS)
eorlt reg, reg, ishift		= dp_reg_immshift_DN(LT, EOR, NOFLAGS)
eorgt reg, reg, ishift		= dp_reg_immshift_DN(GT, EOR, NOFLAGS)
eorle reg, reg, ishift		= dp_reg_immshift_DN(LE, EOR, NOFLAGS)
eoral reg, reg, ishift		= dp_reg_immshift_DN(AL, EOR, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
eors reg, reg, ishift		= dp_reg_immshift_DN(AL, EOR, SETFLAGS)
eoreqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, EOR, SETFLAGS)
eorseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, EOR, SETFLAGS)
eornes reg, reg, ishift		= dp_reg_immshift_DN(NE, EOR, SETFLAGS)
eorsne reg, reg, ishift		= dp_reg_immshift_DN(NE, EOR, SETFLAGS)
eorcss reg, reg, ishift		= dp_reg_immshift_DN(CS, EOR, SETFLAGS)
eorscs reg, reg, ishift		= dp_reg_immshift_DN(CS, EOR, SETFLAGS)
eorccs reg, reg, ishift		= dp_reg_immshift_DN(CC, EOR, SETFLAGS)
eorscc reg, reg, ishift		= dp_reg_immshift_DN(CC, EOR, SETFLAGS)
eormis reg, reg, ishift		= dp_reg_immshift_DN(MI, EOR, SETFLAGS)
eorsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, EOR, SETFLAGS)
eorpls reg, reg, ishift		= dp_reg_immshift_DN(PL, EOR, SETFLAGS)
eorspl reg, reg, ishift		= dp_reg_immshift_DN(PL, EOR, SETFLAGS)
eorvss reg, reg, ishift		= dp_reg_immshift_DN(VS, EOR, SETFLAGS)
eorsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, EOR, SETFLAGS)
eorvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, EOR, SETFLAGS)
eorsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, EOR, SETFLAGS)
eorhis reg, reg, ishift		= dp_reg_immshift_DN(HI, EOR, SETFLAGS)
eorshi reg, reg, ishift		= dp_reg_immshift_DN(HI, EOR, SETFLAGS)
eorlss reg, reg, ishift		= dp_reg_immshift_DN(LS, EOR, SETFLAGS)
eorsls reg, reg, ishift		= dp_reg_immshift_DN(LS, EOR, SETFLAGS)
eorges reg, reg, ishift		= dp_reg_immshift_DN(GE, EOR, SETFLAGS)
eorsge reg, reg, ishift		= dp_reg_immshift_DN(GE, EOR, SETFLAGS)
eorlts reg, reg, ishift		= dp_reg_immshift_DN(LT, EOR, SETFLAGS)
eorslt reg, reg, ishift		= dp_reg_immshift_DN(LT, EOR, SETFLAGS)
eorgts reg, reg, ishift		= dp_reg_immshift_DN(GT, EOR, SETFLAGS)
eorsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, EOR, SETFLAGS)
eorles reg, reg, ishift		= dp_reg_immshift_DN(LE, EOR, SETFLAGS)
eorsle reg, reg, ishift		= dp_reg_immshift_DN(LE, EOR, SETFLAGS)
eorals reg, reg, ishift		= dp_reg_immshift_DN(AL, EOR, SETFLAGS)
eorsal reg, reg, ishift		= dp_reg_immshift_DN(AL, EOR, SETFLAGS)

# register shifted by register with Rd == Rn
eor reg, reg, rshift		= dp_reg_regshift_DN(AL, EOR, NOFLAGS)
eoreq reg, reg, rshift		= dp_reg_regshift_DN(EQ, EOR, NOFLAGS)
eorne reg, reg, rshift		= dp_reg_regshift_DN(NE, EOR, NOFLAGS)
eorcs reg, reg, rshift		= dp_reg_regshift_DN(CS, EOR, NOFLAGS)
eorcc reg, reg, rshift		= dp_reg_regshift_DN(CC, EOR, NOFLAGS)
eormi reg, reg, rshift		= dp_reg_regshift_DN(MI, EOR, NOFLAGS)
eorpl reg, reg, rshift		= dp_reg_regshift_DN(PL, EOR, NOFLAGS)
eorvs reg, reg, rshift		= dp_reg_regshift_DN(VS, EOR, NOFLAGS)
eorvc reg, reg, rshift		= dp_reg_regshift_DN(VC, EOR, NOFLAGS)
eorhi reg, reg, rshift		= dp_reg_regshift_DN(HI, EOR, NOFLAGS)
eorls reg, reg, rshift		= dp_reg_regshift_DN(LS, EOR, NOFLAGS)
eorge reg, reg, rshift		= dp_reg_regshift_DN(GE, EOR, NOFLAGS)
eorlt reg, reg, rshift		= dp_reg_regshift_DN(LT, EOR, NOFLAGS)
eorgt reg, reg, rshift		= dp_reg_regshift_DN(GT, EOR, NOFLAGS)
eorle reg, reg, rshift		= dp_reg_regshift_DN(LE, EOR, NOFLAGS)
eoral reg, reg, rshift		= dp_reg_regshift_DN(AL, EOR, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
eors reg, reg, rshift		= dp_reg_regshift_DN(AL, EOR, SETFLAGS)
eoreqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, EOR, SETFLAGS)
eorseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, EOR, SETFLAGS)
eornes reg, reg, rshift		= dp_reg_regshift_DN(NE, EOR, SETFLAGS)
eorsne reg, reg, rshift		= dp_reg_regshift_DN(NE, EOR, SETFLAGS)
eorcss reg, reg, rshift		= dp_reg_regshift_DN(CS, EOR, SETFLAGS)
eorscs reg, reg, rshift		= dp_reg_regshift_DN(CS, EOR, SETFLAGS)
eorccs reg, reg, rshift		= dp_reg_regshift_DN(CC, EOR, SETFLAGS)
eorscc reg, reg, rshift		= dp_reg_regshift_DN(CC, EOR, SETFLAGS)
eormis reg, reg, rshift		= dp_reg_regshift_DN(MI, EOR, SETFLAGS)
eorsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, EOR, SETFLAGS)
eorpls reg, reg, rshift		= dp_reg_regshift_DN(PL, EOR, SETFLAGS)
eorspl reg, reg, rshift		= dp_reg_regshift_DN(PL, EOR, SETFLAGS)
eorvss reg, reg, rshift		= dp_reg_regshift_DN(VS, EOR, SETFLAGS)
eorsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, EOR, SETFLAGS)
eorvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, EOR, SETFLAGS)
eorsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, EOR, SETFLAGS)
eorhis reg, reg, rshift		= dp_reg_regshift_DN(HI, EOR, SETFLAGS)
eorshi reg, reg, rshift		= dp_reg_regshift_DN(HI, EOR, SETFLAGS)
eorlss reg, reg, rshift		= dp_reg_regshift_DN(LS, EOR, SETFLAGS)
eorsls reg, reg, rshift		= dp_reg_regshift_DN(LS, EOR, SETFLAGS)
eorges reg, reg, rshift		= dp_reg_regshift_DN(GE, EOR, SETFLAGS)
eorsge reg, reg, rshift		= dp_reg_regshift_DN(GE, EOR, SETFLAGS)
eorlts reg, reg, rshift		= dp_reg_regshift_DN(LT, EOR, SETFLAGS)
eorslt reg, reg, rshift		= dp_reg_regshift_DN(LT, EOR, SETFLAGS)
eorgts reg, reg, rshift		= dp_reg_regshift_DN(GT, EOR, SETFLAGS)
eorsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, EOR, SETFLAGS)
eorles reg, reg, rshift		= dp_reg_regshift_DN(LE, EOR, SETFLAGS)
eorsle reg, reg, rshift		= dp_reg_regshift_DN(LE, EOR, SETFLAGS)
eorals reg, reg, rshift		= dp_reg_regshift_DN(AL, EOR, SETFLAGS)
eorsal reg, reg, rshift		= dp_reg_regshift_DN(AL, EOR, SETFLAGS)

#
# ORR
#

# immediate
orr reg, reg, imm		= dp_imm(AL, ORR, NOFLAGS)
orreq reg, reg, imm		= dp_imm(EQ, ORR, NOFLAGS)
orrne reg, reg, imm		= dp_imm(NE, ORR, NOFLAGS)
orrcs reg, reg, imm		= dp_imm(CS, ORR, NOFLAGS)
orrcc reg, reg, imm		= dp_imm(CC, ORR, NOFLAGS)
orrmi reg, reg, imm		= dp_imm(MI, ORR, NOFLAGS)
orrpl reg, reg, imm		= dp_imm(PL, ORR, NOFLAGS)
orrvs reg, reg, imm		= dp_imm(VS, ORR, NOFLAGS)
orrvc reg, reg, imm		= dp_imm(VC, ORR, NOFLAGS)
orrhi reg, reg, imm		= dp_imm(HI, ORR, NOFLAGS)
orrls reg, reg, imm		= dp_imm(LS, ORR, NOFLAGS)
orrge reg, reg, imm		= dp_imm(GE, ORR, NOFLAGS)
orrlt reg, reg, imm		= dp_imm(LT, ORR, NOFLAGS)
orrgt reg, reg, imm		= dp_imm(GT, ORR, NOFLAGS)
orrle reg, reg, imm		= dp_imm(LE, ORR, NOFLAGS)
orral reg, reg, imm		= dp_imm(AL, ORR, NOFLAGS)

# immediate with setflags
orrs reg, reg, imm		= dp_imm(AL, ORR, SETFLAGS)
orrseq reg, reg, imm		= dp_imm(EQ, ORR, SETFLAGS)
orreqs reg, reg, imm		= dp_imm(EQ, ORR, SETFLAGS)
orrsne reg, reg, imm		= dp_imm(NE, ORR, SETFLAGS)
orrnes reg, reg, imm		= dp_imm(NE, ORR, SETFLAGS)
orrscs reg, reg, imm		= dp_imm(CS, ORR, SETFLAGS)
orrcss reg, reg, imm		= dp_imm(CS, ORR, SETFLAGS)
orrscc reg, reg, imm		= dp_imm(CC, ORR, SETFLAGS)
orrccs reg, reg, imm		= dp_imm(CC, ORR, SETFLAGS)
orrsmi reg, reg, imm		= dp_imm(MI, ORR, SETFLAGS)
orrmis reg, reg, imm		= dp_imm(MI, ORR, SETFLAGS)
orrspl reg, reg, imm		= dp_imm(PL, ORR, SETFLAGS)
orrpls reg, reg, imm		= dp_imm(PL, ORR, SETFLAGS)
orrsvs reg, reg, imm		= dp_imm(VS, ORR, SETFLAGS)
orrvss reg, reg, imm		= dp_imm(VS, ORR, SETFLAGS)
orrsvc reg, reg, imm		= dp_imm(VC, ORR, SETFLAGS)
orrvcs reg, reg, imm		= dp_imm(VC, ORR, SETFLAGS)
orrshi reg, reg, imm		= dp_imm(HI, ORR, SETFLAGS)
orrhis reg, reg, imm		= dp_imm(HI, ORR, SETFLAGS)
orrsls reg, reg, imm		= dp_imm(LS, ORR, SETFLAGS)
orrlss reg, reg, imm		= dp_imm(LS, ORR, SETFLAGS)
orrsge reg, reg, imm		= dp_imm(GE, ORR, SETFLAGS)
orrges reg, reg, imm		= dp_imm(GE, ORR, SETFLAGS)
orrslt reg, reg, imm		= dp_imm(LT, ORR, SETFLAGS)
orrlts reg, reg, imm		= dp_imm(LT, ORR, SETFLAGS)
orrsgt reg, reg, imm		= dp_imm(GT, ORR, SETFLAGS)
orrgts reg, reg, imm		= dp_imm(GT, ORR, SETFLAGS)
orrsle reg, reg, imm		= dp_imm(LE, ORR, SETFLAGS)
orrles reg, reg, imm		= dp_imm(LE, ORR, SETFLAGS)
orrsal reg, reg, imm		= dp_imm(AL, ORR, SETFLAGS)
orrals reg, reg, imm		= dp_imm(AL, ORR, SETFLAGS)

# register shifted by nothing
orr reg, reg, reg		= dp_reg_immshift(AL, ORR, NOFLAGS)
orreq reg, reg, reg		= dp_reg_immshift(EQ, ORR, NOFLAGS)
orrne reg, reg, reg		= dp_reg_immshift(NE, ORR, NOFLAGS)
orrcs reg, reg, reg		= dp_reg_immshift(CS, ORR, NOFLAGS)
orrcc reg, reg, reg		= dp_reg_immshift(CC, ORR, NOFLAGS)
orrmi reg, reg, reg		= dp_reg_immshift(MI, ORR, NOFLAGS)
orrpl reg, reg, reg		= dp_reg_immshift(PL, ORR, NOFLAGS)
orrvs reg, reg, reg		= dp_reg_immshift(VS, ORR, NOFLAGS)
orrvc reg, reg, reg		= dp_reg_immshift(VC, ORR, NOFLAGS)
orrhi reg, reg, reg		= dp_reg_immshift(HI, ORR, NOFLAGS)
orrls reg, reg, reg		= dp_reg_immshift(LS, ORR, NOFLAGS)
orrge reg, reg, reg		= dp_reg_immshift(GE, ORR, NOFLAGS)
orrlt reg, reg, reg		= dp_reg_immshift(LT, ORR, NOFLAGS)
orrgt reg, reg, reg		= dp_reg_immshift(GT, ORR, NOFLAGS)
orrle reg, reg, reg		= dp_reg_immshift(LE, ORR, NOFLAGS)
orral reg, reg, reg		= dp_reg_immshift(AL, ORR, NOFLAGS)

# register shifted by nothing with setflags
orrs reg, reg, reg		= dp_reg_immshift(AL, ORR, SETFLAGS)
orreqs reg, reg, reg		= dp_reg_immshift(EQ, ORR, SETFLAGS)
orrseq reg, reg, reg		= dp_reg_immshift(EQ, ORR, SETFLAGS)
orrnes reg, reg, reg		= dp_reg_immshift(NE, ORR, SETFLAGS)
orrsne reg, reg, reg		= dp_reg_immshift(NE, ORR, SETFLAGS)
orrcss reg, reg, reg		= dp_reg_immshift(CS, ORR, SETFLAGS)
orrscs reg, reg, reg		= dp_reg_immshift(CS, ORR, SETFLAGS)
orrccs reg, reg, reg		= dp_reg_immshift(CC, ORR, SETFLAGS)
orrscc reg, reg, reg		= dp_reg_immshift(CC, ORR, SETFLAGS)
orrmis reg, reg, reg		= dp_reg_immshift(MI, ORR, SETFLAGS)
orrsmi reg, reg, reg		= dp_reg_immshift(MI, ORR, SETFLAGS)
orrpls reg, reg, reg		= dp_reg_immshift(PL, ORR, SETFLAGS)
orrspl reg, reg, reg		= dp_reg_immshift(PL, ORR, SETFLAGS)
orrvss reg, reg, reg		= dp_reg_immshift(VS, ORR, SETFLAGS)
orrsvs reg, reg, reg		= dp_reg_immshift(VS, ORR, SETFLAGS)
orrvcs reg, reg, reg		= dp_reg_immshift(VC, ORR, SETFLAGS)
orrsvc reg, reg, reg		= dp_reg_immshift(VC, ORR, SETFLAGS)
orrhis reg, reg, reg		= dp_reg_immshift(HI, ORR, SETFLAGS)
orrshi reg, reg, reg		= dp_reg_immshift(HI, ORR, SETFLAGS)
orrlss reg, reg, reg		= dp_reg_immshift(LS, ORR, SETFLAGS)
orrsls reg, reg, reg		= dp_reg_immshift(LS, ORR, SETFLAGS)
orrges reg, reg, reg		= dp_reg_immshift(GE, ORR, SETFLAGS)
orrsge reg, reg, reg		= dp_reg_immshift(GE, ORR, SETFLAGS)
orrlts reg, reg, reg		= dp_reg_immshift(LT, ORR, SETFLAGS)
orrslt reg, reg, reg		= dp_reg_immshift(LT, ORR, SETFLAGS)
orrgts reg, reg, reg		= dp_reg_immshift(GT, ORR, SETFLAGS)
orrsgt reg, reg, reg		= dp_reg_immshift(GT, ORR, SETFLAGS)
orrles reg, reg, reg		= dp_reg_immshift(LE, ORR, SETFLAGS)
orrsle reg, reg, reg		= dp_reg_immshift(LE, ORR, SETFLAGS)
orrals reg, reg, reg		= dp_reg_immshift(AL, ORR, SETFLAGS)
orrsal reg, reg, reg		= dp_reg_immshift(AL, ORR, SETFLAGS)

# register shifted by immediate
orr reg, reg, reg, ishift	= dp_reg_immshift(AL, ORR, NOFLAGS)
orreq reg, reg, reg, ishift	= dp_reg_immshift(EQ, ORR, NOFLAGS)
orrne reg, reg, reg, ishift	= dp_reg_immshift(NE, ORR, NOFLAGS)
orrcs reg, reg, reg, ishift	= dp_reg_immshift(CS, ORR, NOFLAGS)
orrcc reg, reg, reg, ishift	= dp_reg_immshift(CC, ORR, NOFLAGS)
orrmi reg, reg, reg, ishift	= dp_reg_immshift(MI, ORR, NOFLAGS)
orrpl reg, reg, reg, ishift	= dp_reg_immshift(PL, ORR, NOFLAGS)
orrvs reg, reg, reg, ishift	= dp_reg_immshift(VS, ORR, NOFLAGS)
orrvc reg, reg, reg, ishift	= dp_reg_immshift(VC, ORR, NOFLAGS)
orrhi reg, reg, reg, ishift	= dp_reg_immshift(HI, ORR, NOFLAGS)
orrls reg, reg, reg, ishift	= dp_reg_immshift(LS, ORR, NOFLAGS)
orrge reg, reg, reg, ishift	= dp_reg_immshift(GE, ORR, NOFLAGS)
orrlt reg, reg, reg, ishift	= dp_reg_immshift(LT, ORR, NOFLAGS)
orrgt reg, reg, reg, ishift	= dp_reg_immshift(GT, ORR, NOFLAGS)
orrle reg, reg, reg, ishift	= dp_reg_immshift(LE, ORR, NOFLAGS)
orral reg, reg, reg, ishift	= dp_reg_immshift(AL, ORR, NOFLAGS)

# register shifted by immediate with setflags
orrs reg, reg, reg, ishift	= dp_reg_immshift(AL, ORR, SETFLAGS)
orreqs reg, reg, reg, ishift	= dp_reg_immshift(EQ, ORR, SETFLAGS)
orrseq reg, reg, reg, ishift	= dp_reg_immshift(EQ, ORR, SETFLAGS)
orrnes reg, reg, reg, ishift	= dp_reg_immshift(NE, ORR, SETFLAGS)
orrsne reg, reg, reg, ishift	= dp_reg_immshift(NE, ORR, SETFLAGS)
orrcss reg, reg, reg, ishift	= dp_reg_immshift(CS, ORR, SETFLAGS)
orrscs reg, reg, reg, ishift	= dp_reg_immshift(CS, ORR, SETFLAGS)
orrccs reg, reg, reg, ishift	= dp_reg_immshift(CC, ORR, SETFLAGS)
orrscc reg, reg, reg, ishift	= dp_reg_immshift(CC, ORR, SETFLAGS)
orrmis reg, reg, reg, ishift	= dp_reg_immshift(MI, ORR, SETFLAGS)
orrsmi reg, reg, reg, ishift	= dp_reg_immshift(MI, ORR, SETFLAGS)
orrpls reg, reg, reg, ishift	= dp_reg_immshift(PL, ORR, SETFLAGS)
orrspl reg, reg, reg, ishift	= dp_reg_immshift(PL, ORR, SETFLAGS)
orrvss reg, reg, reg, ishift	= dp_reg_immshift(VS, ORR, SETFLAGS)
orrsvs reg, reg, reg, ishift	= dp_reg_immshift(VS, ORR, SETFLAGS)
orrvcs reg, reg, reg, ishift	= dp_reg_immshift(VC, ORR, SETFLAGS)
orrsvc reg, reg, reg, ishift	= dp_reg_immshift(VC, ORR, SETFLAGS)
orrhis reg, reg, reg, ishift	= dp_reg_immshift(HI, ORR, SETFLAGS)
orrshi reg, reg, reg, ishift	= dp_reg_immshift(HI, ORR, SETFLAGS)
orrlss reg, reg, reg, ishift	= dp_reg_immshift(LS, ORR, SETFLAGS)
orrsls reg, reg, reg, ishift	= dp_reg_immshift(LS, ORR, SETFLAGS)
orrges reg, reg, reg, ishift	= dp_reg_immshift(GE, ORR, SETFLAGS)
orrsge reg, reg, reg, ishift	= dp_reg_immshift(GE, ORR, SETFLAGS)
orrlts reg, reg, reg, ishift	= dp_reg_immshift(LT, ORR, SETFLAGS)
orrslt reg, reg, reg, ishift	= dp_reg_immshift(LT, ORR, SETFLAGS)
orrgts reg, reg, reg, ishift	= dp_reg_immshift(GT, ORR, SETFLAGS)
orrsgt reg, reg, reg, ishift	= dp_reg_immshift(GT, ORR, SETFLAGS)
orrles reg, reg, reg, ishift	= dp_reg_immshift(LE, ORR, SETFLAGS)
orrsle reg, reg, reg, ishift	= dp_reg_immshift(LE, ORR, SETFLAGS)
orrals reg, reg, reg, ishift	= dp_reg_immshift(AL, ORR, SETFLAGS)
orrsal reg, reg, reg, ishift	= dp_reg_immshift(AL, ORR, SETFLAGS)

# register shifted by register
orr reg, reg, reg, rshift	= dp_reg_regshift(AL, ORR, NOFLAGS)
orreq reg, reg, reg, rshift	= dp_reg_regshift(EQ, ORR, NOFLAGS)
orrne reg, reg, reg, rshift	= dp_reg_regshift(NE, ORR, NOFLAGS)
orrcs reg, reg, reg, rshift	= dp_reg_regshift(CS, ORR, NOFLAGS)
orrcc reg, reg, reg, rshift	= dp_reg_regshift(CC, ORR, NOFLAGS)
orrmi reg, reg, reg, rshift	= dp_reg_regshift(MI, ORR, NOFLAGS)
orrpl reg, reg, reg, rshift	= dp_reg_regshift(PL, ORR, NOFLAGS)
orrvs reg, reg, reg, rshift	= dp_reg_regshift(VS, ORR, NOFLAGS)
orrvc reg, reg, reg, rshift	= dp_reg_regshift(VC, ORR, NOFLAGS)
orrhi reg, reg, reg, rshift	= dp_reg_regshift(HI, ORR, NOFLAGS)
orrls reg, reg, reg, rshift	= dp_reg_regshift(LS, ORR, NOFLAGS)
orrge reg, reg, reg, rshift	= dp_reg_regshift(GE, ORR, NOFLAGS)
orrlt reg, reg, reg, rshift	= dp_reg_regshift(LT, ORR, NOFLAGS)
orrgt reg, reg, reg, rshift	= dp_reg_regshift(GT, ORR, NOFLAGS)
orrle reg, reg, reg, rshift	= dp_reg_regshift(LE, ORR, NOFLAGS)
orral reg, reg, reg, rshift	= dp_reg_regshift(AL, ORR, NOFLAGS)

# register shifted by register with setflags
orrs reg, reg, reg, rshift	= dp_reg_regshift(AL, ORR, SETFLAGS)
orreqs reg, reg, reg, rshift	= dp_reg_regshift(EQ, ORR, SETFLAGS)
orrseq reg, reg, reg, rshift	= dp_reg_regshift(EQ, ORR, SETFLAGS)
orrnes reg, reg, reg, rshift	= dp_reg_regshift(NE, ORR, SETFLAGS)
orrsne reg, reg, reg, rshift	= dp_reg_regshift(NE, ORR, SETFLAGS)
orrcss reg, reg, reg, rshift	= dp_reg_regshift(CS, ORR, SETFLAGS)
orrscs reg, reg, reg, rshift	= dp_reg_regshift(CS, ORR, SETFLAGS)
orrccs reg, reg, reg, rshift	= dp_reg_regshift(CC, ORR, SETFLAGS)
orrscc reg, reg, reg, rshift	= dp_reg_regshift(CC, ORR, SETFLAGS)
orrmis reg, reg, reg, rshift	= dp_reg_regshift(MI, ORR, SETFLAGS)
orrsmi reg, reg, reg, rshift	= dp_reg_regshift(MI, ORR, SETFLAGS)
orrpls reg, reg, reg, rshift	= dp_reg_regshift(PL, ORR, SETFLAGS)
orrspl reg, reg, reg, rshift	= dp_reg_regshift(PL, ORR, SETFLAGS)
orrvss reg, reg, reg, rshift	= dp_reg_regshift(VS, ORR, SETFLAGS)
orrsvs reg, reg, reg, rshift	= dp_reg_regshift(VS, ORR, SETFLAGS)
orrvcs reg, reg, reg, rshift	= dp_reg_regshift(VC, ORR, SETFLAGS)
orrsvc reg, reg, reg, rshift	= dp_reg_regshift(VC, ORR, SETFLAGS)
orrhis reg, reg, reg, rshift	= dp_reg_regshift(HI, ORR, SETFLAGS)
orrshi reg, reg, reg, rshift	= dp_reg_regshift(HI, ORR, SETFLAGS)
orrlss reg, reg, reg, rshift	= dp_reg_regshift(LS, ORR, SETFLAGS)
orrsls reg, reg, reg, rshift	= dp_reg_regshift(LS, ORR, SETFLAGS)
orrges reg, reg, reg, rshift	= dp_reg_regshift(GE, ORR, SETFLAGS)
orrsge reg, reg, reg, rshift	= dp_reg_regshift(GE, ORR, SETFLAGS)
orrlts reg, reg, reg, rshift	= dp_reg_regshift(LT, ORR, SETFLAGS)
orrslt reg, reg, reg, rshift	= dp_reg_regshift(LT, ORR, SETFLAGS)
orrgts reg, reg, reg, rshift	= dp_reg_regshift(GT, ORR, SETFLAGS)
orrsgt reg, reg, reg, rshift	= dp_reg_regshift(GT, ORR, SETFLAGS)
orrles reg, reg, reg, rshift	= dp_reg_regshift(LE, ORR, SETFLAGS)
orrsle reg, reg, reg, rshift	= dp_reg_regshift(LE, ORR, SETFLAGS)
orrals reg, reg, reg, rshift	= dp_reg_regshift(AL, ORR, SETFLAGS)
orrsal reg, reg, reg, rshift	= dp_reg_regshift(AL, ORR, SETFLAGS)

# duplicate everything with Rd == Rn

# immediate with Rd == Rn
orr reg, imm			= dp_imm_DN(AL, ORR, NOFLAGS)
orreq reg, imm		= dp_imm_DN(EQ, ORR, NOFLAGS)
orrne reg, imm		= dp_imm_DN(NE, ORR, NOFLAGS)
orrcs reg, imm		= dp_imm_DN(CS, ORR, NOFLAGS)
orrcc reg, imm		= dp_imm_DN(CC, ORR, NOFLAGS)
orrmi reg, imm		= dp_imm_DN(MI, ORR, NOFLAGS)
orrpl reg, imm		= dp_imm_DN(PL, ORR, NOFLAGS)
orrvs reg, imm		= dp_imm_DN(VS, ORR, NOFLAGS)
orrvc reg, imm		= dp_imm_DN(VC, ORR, NOFLAGS)
orrhi reg, imm		= dp_imm_DN(HI, ORR, NOFLAGS)
orrls reg, imm		= dp_imm_DN(LS, ORR, NOFLAGS)
orrge reg, imm		= dp_imm_DN(GE, ORR, NOFLAGS)
orrlt reg, imm		= dp_imm_DN(LT, ORR, NOFLAGS)
orrgt reg, imm		= dp_imm_DN(GT, ORR, NOFLAGS)
orrle reg, imm		= dp_imm_DN(LE, ORR, NOFLAGS)
orral reg, imm		= dp_imm_DN(AL, ORR, NOFLAGS)

# immediate with setflags with Rd == Rn
orrs reg, imm		= dp_imm_DN(AL, ORR, SETFLAGS)
orrseq reg, imm		= dp_imm_DN(EQ, ORR, SETFLAGS)
orreqs reg, imm		= dp_imm_DN(EQ, ORR, SETFLAGS)
orrsne reg, imm		= dp_imm_DN(NE, ORR, SETFLAGS)
orrnes reg, imm		= dp_imm_DN(NE, ORR, SETFLAGS)
orrscs reg, imm		= dp_imm_DN(CS, ORR, SETFLAGS)
orrcss reg, imm		= dp_imm_DN(CS, ORR, SETFLAGS)
orrscc reg, imm		= dp_imm_DN(CC, ORR, SETFLAGS)
orrccs reg, imm		= dp_imm_DN(CC, ORR, SETFLAGS)
orrsmi reg, imm		= dp_imm_DN(MI, ORR, SETFLAGS)
orrmis reg, imm		= dp_imm_DN(MI, ORR, SETFLAGS)
orrspl reg, imm		= dp_imm_DN(PL, ORR, SETFLAGS)
orrpls reg, imm		= dp_imm_DN(PL, ORR, SETFLAGS)
orrsvs reg, imm		= dp_imm_DN(VS, ORR, SETFLAGS)
orrvss reg, imm		= dp_imm_DN(VS, ORR, SETFLAGS)
orrsvc reg, imm		= dp_imm_DN(VC, ORR, SETFLAGS)
orrvcs reg, imm		= dp_imm_DN(VC, ORR, SETFLAGS)
orrshi reg, imm		= dp_imm_DN(HI, ORR, SETFLAGS)
orrhis reg, imm		= dp_imm_DN(HI, ORR, SETFLAGS)
orrsls reg, imm		= dp_imm_DN(LS, ORR, SETFLAGS)
orrlss reg, imm		= dp_imm_DN(LS, ORR, SETFLAGS)
orrsge reg, imm		= dp_imm_DN(GE, ORR, SETFLAGS)
orrges reg, imm		= dp_imm_DN(GE, ORR, SETFLAGS)
orrslt reg, imm		= dp_imm_DN(LT, ORR, SETFLAGS)
orrlts reg, imm		= dp_imm_DN(LT, ORR, SETFLAGS)
orrsgt reg, imm		= dp_imm_DN(GT, ORR, SETFLAGS)
orrgts reg, imm		= dp_imm_DN(GT, ORR, SETFLAGS)
orrsle reg, imm		= dp_imm_DN(LE, ORR, SETFLAGS)
orrles reg, imm		= dp_imm_DN(LE, ORR, SETFLAGS)
orrsal reg, imm		= dp_imm_DN(AL, ORR, SETFLAGS)
orrals reg, imm		= dp_imm_DN(AL, ORR, SETFLAGS)

# register shifted by nothing with Rd == Rn
orr reg, reg			= dp_reg_immshift_DN(AL, ORR, NOFLAGS)
orreq reg, reg			= dp_reg_immshift_DN(EQ, ORR, NOFLAGS)
orrne reg, reg			= dp_reg_immshift_DN(NE, ORR, NOFLAGS)
orrcs reg, reg			= dp_reg_immshift_DN(CS, ORR, NOFLAGS)
orrcc reg, reg			= dp_reg_immshift_DN(CC, ORR, NOFLAGS)
orrmi reg, reg			= dp_reg_immshift_DN(MI, ORR, NOFLAGS)
orrpl reg, reg			= dp_reg_immshift_DN(PL, ORR, NOFLAGS)
orrvs reg, reg			= dp_reg_immshift_DN(VS, ORR, NOFLAGS)
orrvc reg, reg			= dp_reg_immshift_DN(VC, ORR, NOFLAGS)
orrhi reg, reg			= dp_reg_immshift_DN(HI, ORR, NOFLAGS)
orrls reg, reg			= dp_reg_immshift_DN(LS, ORR, NOFLAGS)
orrge reg, reg			= dp_reg_immshift_DN(GE, ORR, NOFLAGS)
orrlt reg, reg			= dp_reg_immshift_DN(LT, ORR, NOFLAGS)
orrgt reg, reg			= dp_reg_immshift_DN(GT, ORR, NOFLAGS)
orrle reg, reg			= dp_reg_immshift_DN(LE, ORR, NOFLAGS)
orral reg, reg			= dp_reg_immshift_DN(AL, ORR, NOFLAGS)

# register shifted by nothing with setflags with Rd == Rn
orrs reg, reg			= dp_reg_immshift_DN(AL, ORR, SETFLAGS)
orreqs reg, reg			= dp_reg_immshift_DN(EQ, ORR, SETFLAGS)
orrseq reg, reg			= dp_reg_immshift_DN(EQ, ORR, SETFLAGS)
orrnes reg, reg			= dp_reg_immshift_DN(NE, ORR, SETFLAGS)
orrsne reg, reg			= dp_reg_immshift_DN(NE, ORR, SETFLAGS)
orrcss reg, reg			= dp_reg_immshift_DN(CS, ORR, SETFLAGS)
orrscs reg, reg			= dp_reg_immshift_DN(CS, ORR, SETFLAGS)
orrccs reg, reg			= dp_reg_immshift_DN(CC, ORR, SETFLAGS)
orrscc reg, reg			= dp_reg_immshift_DN(CC, ORR, SETFLAGS)
orrmis reg, reg			= dp_reg_immshift_DN(MI, ORR, SETFLAGS)
orrsmi reg, reg			= dp_reg_immshift_DN(MI, ORR, SETFLAGS)
orrpls reg, reg			= dp_reg_immshift_DN(PL, ORR, SETFLAGS)
orrspl reg, reg			= dp_reg_immshift_DN(PL, ORR, SETFLAGS)
orrvss reg, reg			= dp_reg_immshift_DN(VS, ORR, SETFLAGS)
orrsvs reg, reg			= dp_reg_immshift_DN(VS, ORR, SETFLAGS)
orrvcs reg, reg			= dp_reg_immshift_DN(VC, ORR, SETFLAGS)
orrsvc reg, reg			= dp_reg_immshift_DN(VC, ORR, SETFLAGS)
orrhis reg, reg			= dp_reg_immshift_DN(HI, ORR, SETFLAGS)
orrshi reg, reg			= dp_reg_immshift_DN(HI, ORR, SETFLAGS)
orrlss reg, reg			= dp_reg_immshift_DN(LS, ORR, SETFLAGS)
orrsls reg, reg			= dp_reg_immshift_DN(LS, ORR, SETFLAGS)
orrges reg, reg			= dp_reg_immshift_DN(GE, ORR, SETFLAGS)
orrsge reg, reg			= dp_reg_immshift_DN(GE, ORR, SETFLAGS)
orrlts reg, reg			= dp_reg_immshift_DN(LT, ORR, SETFLAGS)
orrslt reg, reg			= dp_reg_immshift_DN(LT, ORR, SETFLAGS)
orrgts reg, reg			= dp_reg_immshift_DN(GT, ORR, SETFLAGS)
orrsgt reg, reg			= dp_reg_immshift_DN(GT, ORR, SETFLAGS)
orrles reg, reg			= dp_reg_immshift_DN(LE, ORR, SETFLAGS)
orrsle reg, reg			= dp_reg_immshift_DN(LE, ORR, SETFLAGS)
orrals reg, reg			= dp_reg_immshift_DN(AL, ORR, SETFLAGS)
orrsal reg, reg			= dp_reg_immshift_DN(AL, ORR, SETFLAGS)

# register shifted by immediate with Rd == Rn
orr reg, reg, ishift		= dp_reg_immshift_DN(AL, ORR, NOFLAGS)
orreq reg, reg, ishift		= dp_reg_immshift_DN(EQ, ORR, NOFLAGS)
orrne reg, reg, ishift		= dp_reg_immshift_DN(NE, ORR, NOFLAGS)
orrcs reg, reg, ishift		= dp_reg_immshift_DN(CS, ORR, NOFLAGS)
orrcc reg, reg, ishift		= dp_reg_immshift_DN(CC, ORR, NOFLAGS)
orrmi reg, reg, ishift		= dp_reg_immshift_DN(MI, ORR, NOFLAGS)
orrpl reg, reg, ishift		= dp_reg_immshift_DN(PL, ORR, NOFLAGS)
orrvs reg, reg, ishift		= dp_reg_immshift_DN(VS, ORR, NOFLAGS)
orrvc reg, reg, ishift		= dp_reg_immshift_DN(VC, ORR, NOFLAGS)
orrhi reg, reg, ishift		= dp_reg_immshift_DN(HI, ORR, NOFLAGS)
orrls reg, reg, ishift		= dp_reg_immshift_DN(LS, ORR, NOFLAGS)
orrge reg, reg, ishift		= dp_reg_immshift_DN(GE, ORR, NOFLAGS)
orrlt reg, reg, ishift		= dp_reg_immshift_DN(LT, ORR, NOFLAGS)
orrgt reg, reg, ishift		= dp_reg_immshift_DN(GT, ORR, NOFLAGS)
orrle reg, reg, ishift		= dp_reg_immshift_DN(LE, ORR, NOFLAGS)
orral reg, reg, ishift		= dp_reg_immshift_DN(AL, ORR, NOFLAGS)

# register shifted by immediate with setflags with Rd == Rn
orrs reg, reg, ishift		= dp_reg_immshift_DN(AL, ORR, SETFLAGS)
orreqs reg, reg, ishift		= dp_reg_immshift_DN(EQ, ORR, SETFLAGS)
orrseq reg, reg, ishift		= dp_reg_immshift_DN(EQ, ORR, SETFLAGS)
orrnes reg, reg, ishift		= dp_reg_immshift_DN(NE, ORR, SETFLAGS)
orrsne reg, reg, ishift		= dp_reg_immshift_DN(NE, ORR, SETFLAGS)
orrcss reg, reg, ishift		= dp_reg_immshift_DN(CS, ORR, SETFLAGS)
orrscs reg, reg, ishift		= dp_reg_immshift_DN(CS, ORR, SETFLAGS)
orrccs reg, reg, ishift		= dp_reg_immshift_DN(CC, ORR, SETFLAGS)
orrscc reg, reg, ishift		= dp_reg_immshift_DN(CC, ORR, SETFLAGS)
orrmis reg, reg, ishift		= dp_reg_immshift_DN(MI, ORR, SETFLAGS)
orrsmi reg, reg, ishift		= dp_reg_immshift_DN(MI, ORR, SETFLAGS)
orrpls reg, reg, ishift		= dp_reg_immshift_DN(PL, ORR, SETFLAGS)
orrspl reg, reg, ishift		= dp_reg_immshift_DN(PL, ORR, SETFLAGS)
orrvss reg, reg, ishift		= dp_reg_immshift_DN(VS, ORR, SETFLAGS)
orrsvs reg, reg, ishift		= dp_reg_immshift_DN(VS, ORR, SETFLAGS)
orrvcs reg, reg, ishift		= dp_reg_immshift_DN(VC, ORR, SETFLAGS)
orrsvc reg, reg, ishift		= dp_reg_immshift_DN(VC, ORR, SETFLAGS)
orrhis reg, reg, ishift		= dp_reg_immshift_DN(HI, ORR, SETFLAGS)
orrshi reg, reg, ishift		= dp_reg_immshift_DN(HI, ORR, SETFLAGS)
orrlss reg, reg, ishift		= dp_reg_immshift_DN(LS, ORR, SETFLAGS)
orrsls reg, reg, ishift		= dp_reg_immshift_DN(LS, ORR, SETFLAGS)
orrges reg, reg, ishift		= dp_reg_immshift_DN(GE, ORR, SETFLAGS)
orrsge reg, reg, ishift		= dp_reg_immshift_DN(GE, ORR, SETFLAGS)
orrlts reg, reg, ishift		= dp_reg_immshift_DN(LT, ORR, SETFLAGS)
orrslt reg, reg, ishift		= dp_reg_immshift_DN(LT, ORR, SETFLAGS)
orrgts reg, reg, ishift		= dp_reg_immshift_DN(GT, ORR, SETFLAGS)
orrsgt reg, reg, ishift		= dp_reg_immshift_DN(GT, ORR, SETFLAGS)
orrles reg, reg, ishift		= dp_reg_immshift_DN(LE, ORR, SETFLAGS)
orrsle reg, reg, ishift		= dp_reg_immshift_DN(LE, ORR, SETFLAGS)
orrals reg, reg, ishift		= dp_reg_immshift_DN(AL, ORR, SETFLAGS)
orrsal reg, reg, ishift		= dp_reg_immshift_DN(AL, ORR, SETFLAGS)

# register shifted by register with Rd == Rn
orr reg, reg, rshift		= dp_reg_regshift_DN(AL, ORR, NOFLAGS)
orreq reg, reg, rshift		= dp_reg_regshift_DN(EQ, ORR, NOFLAGS)
orrne reg, reg, rshift		= dp_reg_regshift_DN(NE, ORR, NOFLAGS)
orrcs reg, reg, rshift		= dp_reg_regshift_DN(CS, ORR, NOFLAGS)
orrcc reg, reg, rshift		= dp_reg_regshift_DN(CC, ORR, NOFLAGS)
orrmi reg, reg, rshift		= dp_reg_regshift_DN(MI, ORR, NOFLAGS)
orrpl reg, reg, rshift		= dp_reg_regshift_DN(PL, ORR, NOFLAGS)
orrvs reg, reg, rshift		= dp_reg_regshift_DN(VS, ORR, NOFLAGS)
orrvc reg, reg, rshift		= dp_reg_regshift_DN(VC, ORR, NOFLAGS)
orrhi reg, reg, rshift		= dp_reg_regshift_DN(HI, ORR, NOFLAGS)
orrls reg, reg, rshift		= dp_reg_regshift_DN(LS, ORR, NOFLAGS)
orrge reg, reg, rshift		= dp_reg_regshift_DN(GE, ORR, NOFLAGS)
orrlt reg, reg, rshift		= dp_reg_regshift_DN(LT, ORR, NOFLAGS)
orrgt reg, reg, rshift		= dp_reg_regshift_DN(GT, ORR, NOFLAGS)
orrle reg, reg, rshift		= dp_reg_regshift_DN(LE, ORR, NOFLAGS)
orral reg, reg, rshift		= dp_reg_regshift_DN(AL, ORR, NOFLAGS)

# register shifted by register with setflags with Rd == Rn
orrs reg, reg, rshift		= dp_reg_regshift_DN(AL, ORR, SETFLAGS)
orreqs reg, reg, rshift		= dp_reg_regshift_DN(EQ, ORR, SETFLAGS)
orrseq reg, reg, rshift		= dp_reg_regshift_DN(EQ, ORR, SETFLAGS)
orrnes reg, reg, rshift		= dp_reg_regshift_DN(NE, ORR, SETFLAGS)
orrsne reg, reg, rshift		= dp_reg_regshift_DN(NE, ORR, SETFLAGS)
orrcss reg, reg, rshift		= dp_reg_regshift_DN(CS, ORR, SETFLAGS)
orrscs reg, reg, rshift		= dp_reg_regshift_DN(CS, ORR, SETFLAGS)
orrccs reg, reg, rshift		= dp_reg_regshift_DN(CC, ORR, SETFLAGS)
orrscc reg, reg, rshift		= dp_reg_regshift_DN(CC, ORR, SETFLAGS)
orrmis reg, reg, rshift		= dp_reg_regshift_DN(MI, ORR, SETFLAGS)
orrsmi reg, reg, rshift		= dp_reg_regshift_DN(MI, ORR, SETFLAGS)
orrpls reg, reg, rshift		= dp_reg_regshift_DN(PL, ORR, SETFLAGS)
orrspl reg, reg, rshift		= dp_reg_regshift_DN(PL, ORR, SETFLAGS)
orrvss reg, reg, rshift		= dp_reg_regshift_DN(VS, ORR, SETFLAGS)
orrsvs reg, reg, rshift		= dp_reg_regshift_DN(VS, ORR, SETFLAGS)
orrvcs reg, reg, rshift		= dp_reg_regshift_DN(VC, ORR, SETFLAGS)
orrsvc reg, reg, rshift		= dp_reg_regshift_DN(VC, ORR, SETFLAGS)
orrhis reg, reg, rshift		= dp_reg_regshift_DN(HI, ORR, SETFLAGS)
orrshi reg, reg, rshift		= dp_reg_regshift_DN(HI, ORR, SETFLAGS)
orrlss reg, reg, rshift		= dp_reg_regshift_DN(LS, ORR, SETFLAGS)
orrsls reg, reg, rshift		= dp_reg_regshift_DN(LS, ORR, SETFLAGS)
orrges reg, reg, rshift		= dp_reg_regshift_DN(GE, ORR, SETFLAGS)
orrsge reg, reg, rshift		= dp_reg_regshift_DN(GE, ORR, SETFLAGS)
orrlts reg, reg, rshift		= dp_reg_regshift_DN(LT, ORR, SETFLAGS)
orrslt reg, reg, rshift		= dp_reg_regshift_DN(LT, ORR, SETFLAGS)
orrgts reg, reg, rshift		= dp_reg_regshift_DN(GT, ORR, SETFLAGS)
orrsgt reg, reg, rshift		= dp_reg_regshift_DN(GT, ORR, SETFLAGS)
orrles reg, reg, rshift		= dp_reg_regshift_DN(LE, ORR, SETFLAGS)
orrsle reg, reg, rshift		= dp_reg_regshift_DN(LE, ORR, SETFLAGS)
orrals reg, reg, rshift		= dp_reg_regshift_DN(AL, ORR, SETFLAGS)
orrsal reg, reg, rshift		= dp_reg_regshift_DN(AL, ORR, SETFLAGS)

#
# MOV
#

# immediate
mov reg, imm			= dp_imm_N0(AL, MOV, NOFLAGS)
moveq reg, imm			= dp_imm_N0(EQ, MOV, NOFLAGS)
movne reg, imm			= dp_imm_N0(NE, MOV, NOFLAGS)
movcs reg, imm			= dp_imm_N0(CS, MOV, NOFLAGS)
movcc reg, imm			= dp_imm_N0(CC, MOV, NOFLAGS)
movmi reg, imm			= dp_imm_N0(MI, MOV, NOFLAGS)
movpl reg, imm			= dp_imm_N0(PL, MOV, NOFLAGS)
movvs reg, imm			= dp_imm_N0(VS, MOV, NOFLAGS)
movvc reg, imm			= dp_imm_N0(VC, MOV, NOFLAGS)
movhi reg, imm			= dp_imm_N0(HI, MOV, NOFLAGS)
movls reg, imm			= dp_imm_N0(LS, MOV, NOFLAGS)
movge reg, imm			= dp_imm_N0(GE, MOV, NOFLAGS)
movlt reg, imm			= dp_imm_N0(LT, MOV, NOFLAGS)
movgt reg, imm			= dp_imm_N0(GT, MOV, NOFLAGS)
movle reg, imm			= dp_imm_N0(LE, MOV, NOFLAGS)
moval reg, imm			= dp_imm_N0(AL, MOV, NOFLAGS)

# immediate with setflags 
movs reg, imm		= dp_imm_N0(AL, MOV, SETFLAGS)
movseq reg, imm		= dp_imm_N0(EQ, MOV, SETFLAGS)
moveqs reg, imm		= dp_imm_N0(EQ, MOV, SETFLAGS)
movsne reg, imm		= dp_imm_N0(NE, MOV, SETFLAGS)
movnes reg, imm		= dp_imm_N0(NE, MOV, SETFLAGS)
movscs reg, imm		= dp_imm_N0(CS, MOV, SETFLAGS)
movcss reg, imm		= dp_imm_N0(CS, MOV, SETFLAGS)
movscc reg, imm		= dp_imm_N0(CC, MOV, SETFLAGS)
movccs reg, imm		= dp_imm_N0(CC, MOV, SETFLAGS)
movsmi reg, imm		= dp_imm_N0(MI, MOV, SETFLAGS)
movmis reg, imm		= dp_imm_N0(MI, MOV, SETFLAGS)
movspl reg, imm		= dp_imm_N0(PL, MOV, SETFLAGS)
movpls reg, imm		= dp_imm_N0(PL, MOV, SETFLAGS)
movsvs reg, imm		= dp_imm_N0(VS, MOV, SETFLAGS)
movvss reg, imm		= dp_imm_N0(VS, MOV, SETFLAGS)
movsvc reg, imm		= dp_imm_N0(VC, MOV, SETFLAGS)
movvcs reg, imm		= dp_imm_N0(VC, MOV, SETFLAGS)
movshi reg, imm		= dp_imm_N0(HI, MOV, SETFLAGS)
movhis reg, imm		= dp_imm_N0(HI, MOV, SETFLAGS)
movsls reg, imm		= dp_imm_N0(LS, MOV, SETFLAGS)
movlss reg, imm		= dp_imm_N0(LS, MOV, SETFLAGS)
movsge reg, imm		= dp_imm_N0(GE, MOV, SETFLAGS)
movges reg, imm		= dp_imm_N0(GE, MOV, SETFLAGS)
movslt reg, imm		= dp_imm_N0(LT, MOV, SETFLAGS)
movlts reg, imm		= dp_imm_N0(LT, MOV, SETFLAGS)
movsgt reg, imm		= dp_imm_N0(GT, MOV, SETFLAGS)
movgts reg, imm		= dp_imm_N0(GT, MOV, SETFLAGS)
movsle reg, imm		= dp_imm_N0(LE, MOV, SETFLAGS)
movles reg, imm		= dp_imm_N0(LE, MOV, SETFLAGS)
movsal reg, imm		= dp_imm_N0(AL, MOV, SETFLAGS)
movals reg, imm		= dp_imm_N0(AL, MOV, SETFLAGS)

# register shifted by nothing 
mov reg, reg			= dp_reg_immshift_N0(AL, MOV, NOFLAGS)
moveq reg, reg			= dp_reg_immshift_N0(EQ, MOV, NOFLAGS)
movne reg, reg			= dp_reg_immshift_N0(NE, MOV, NOFLAGS)
movcs reg, reg			= dp_reg_immshift_N0(CS, MOV, NOFLAGS)
movcc reg, reg			= dp_reg_immshift_N0(CC, MOV, NOFLAGS)
movmi reg, reg			= dp_reg_immshift_N0(MI, MOV, NOFLAGS)
movpl reg, reg			= dp_reg_immshift_N0(PL, MOV, NOFLAGS)
movvs reg, reg			= dp_reg_immshift_N0(VS, MOV, NOFLAGS)
movvc reg, reg			= dp_reg_immshift_N0(VC, MOV, NOFLAGS)
movhi reg, reg			= dp_reg_immshift_N0(HI, MOV, NOFLAGS)
movls reg, reg			= dp_reg_immshift_N0(LS, MOV, NOFLAGS)
movge reg, reg			= dp_reg_immshift_N0(GE, MOV, NOFLAGS)
movlt reg, reg			= dp_reg_immshift_N0(LT, MOV, NOFLAGS)
movgt reg, reg			= dp_reg_immshift_N0(GT, MOV, NOFLAGS)
movle reg, reg			= dp_reg_immshift_N0(LE, MOV, NOFLAGS)
moval reg, reg			= dp_reg_immshift_N0(AL, MOV, NOFLAGS)

# register shifted by nothing with setflags 
movs reg, reg			= dp_reg_immshift_N0(AL, MOV, SETFLAGS)
moveqs reg, reg			= dp_reg_immshift_N0(EQ, MOV, SETFLAGS)
movseq reg, reg			= dp_reg_immshift_N0(EQ, MOV, SETFLAGS)
movnes reg, reg			= dp_reg_immshift_N0(NE, MOV, SETFLAGS)
movsne reg, reg			= dp_reg_immshift_N0(NE, MOV, SETFLAGS)
movcss reg, reg			= dp_reg_immshift_N0(CS, MOV, SETFLAGS)
movscs reg, reg			= dp_reg_immshift_N0(CS, MOV, SETFLAGS)
movccs reg, reg			= dp_reg_immshift_N0(CC, MOV, SETFLAGS)
movscc reg, reg			= dp_reg_immshift_N0(CC, MOV, SETFLAGS)
movmis reg, reg			= dp_reg_immshift_N0(MI, MOV, SETFLAGS)
movsmi reg, reg			= dp_reg_immshift_N0(MI, MOV, SETFLAGS)
movpls reg, reg			= dp_reg_immshift_N0(PL, MOV, SETFLAGS)
movspl reg, reg			= dp_reg_immshift_N0(PL, MOV, SETFLAGS)
movvss reg, reg			= dp_reg_immshift_N0(VS, MOV, SETFLAGS)
movsvs reg, reg			= dp_reg_immshift_N0(VS, MOV, SETFLAGS)
movvcs reg, reg			= dp_reg_immshift_N0(VC, MOV, SETFLAGS)
movsvc reg, reg			= dp_reg_immshift_N0(VC, MOV, SETFLAGS)
movhis reg, reg			= dp_reg_immshift_N0(HI, MOV, SETFLAGS)
movshi reg, reg			= dp_reg_immshift_N0(HI, MOV, SETFLAGS)
movlss reg, reg			= dp_reg_immshift_N0(LS, MOV, SETFLAGS)
movsls reg, reg			= dp_reg_immshift_N0(LS, MOV, SETFLAGS)
movges reg, reg			= dp_reg_immshift_N0(GE, MOV, SETFLAGS)
movsge reg, reg			= dp_reg_immshift_N0(GE, MOV, SETFLAGS)
movlts reg, reg			= dp_reg_immshift_N0(LT, MOV, SETFLAGS)
movslt reg, reg			= dp_reg_immshift_N0(LT, MOV, SETFLAGS)
movgts reg, reg			= dp_reg_immshift_N0(GT, MOV, SETFLAGS)
movsgt reg, reg			= dp_reg_immshift_N0(GT, MOV, SETFLAGS)
movles reg, reg			= dp_reg_immshift_N0(LE, MOV, SETFLAGS)
movsle reg, reg			= dp_reg_immshift_N0(LE, MOV, SETFLAGS)
movals reg, reg			= dp_reg_immshift_N0(AL, MOV, SETFLAGS)
movsal reg, reg			= dp_reg_immshift_N0(AL, MOV, SETFLAGS)

# register shifted by immediate 
mov reg, reg, ishift		= dp_reg_immshift_N0(AL, MOV, NOFLAGS)
moveq reg, reg, ishift		= dp_reg_immshift_N0(EQ, MOV, NOFLAGS)
movne reg, reg, ishift		= dp_reg_immshift_N0(NE, MOV, NOFLAGS)
movcs reg, reg, ishift		= dp_reg_immshift_N0(CS, MOV, NOFLAGS)
movcc reg, reg, ishift		= dp_reg_immshift_N0(CC, MOV, NOFLAGS)
movmi reg, reg, ishift		= dp_reg_immshift_N0(MI, MOV, NOFLAGS)
movpl reg, reg, ishift		= dp_reg_immshift_N0(PL, MOV, NOFLAGS)
movvs reg, reg, ishift		= dp_reg_immshift_N0(VS, MOV, NOFLAGS)
movvc reg, reg, ishift		= dp_reg_immshift_N0(VC, MOV, NOFLAGS)
movhi reg, reg, ishift		= dp_reg_immshift_N0(HI, MOV, NOFLAGS)
movls reg, reg, ishift		= dp_reg_immshift_N0(LS, MOV, NOFLAGS)
movge reg, reg, ishift		= dp_reg_immshift_N0(GE, MOV, NOFLAGS)
movlt reg, reg, ishift		= dp_reg_immshift_N0(LT, MOV, NOFLAGS)
movgt reg, reg, ishift		= dp_reg_immshift_N0(GT, MOV, NOFLAGS)
movle reg, reg, ishift		= dp_reg_immshift_N0(LE, MOV, NOFLAGS)
moval reg, reg, ishift		= dp_reg_immshift_N0(AL, MOV, NOFLAGS)

# register shifted by immediate with setflags 
movs reg, reg, ishift		= dp_reg_immshift_N0(AL, MOV, SETFLAGS)
moveqs reg, reg, ishift		= dp_reg_immshift_N0(EQ, MOV, SETFLAGS)
movseq reg, reg, ishift		= dp_reg_immshift_N0(EQ, MOV, SETFLAGS)
movnes reg, reg, ishift		= dp_reg_immshift_N0(NE, MOV, SETFLAGS)
movsne reg, reg, ishift		= dp_reg_immshift_N0(NE, MOV, SETFLAGS)
movcss reg, reg, ishift		= dp_reg_immshift_N0(CS, MOV, SETFLAGS)
movscs reg, reg, ishift		= dp_reg_immshift_N0(CS, MOV, SETFLAGS)
movccs reg, reg, ishift		= dp_reg_immshift_N0(CC, MOV, SETFLAGS)
movscc reg, reg, ishift		= dp_reg_immshift_N0(CC, MOV, SETFLAGS)
movmis reg, reg, ishift		= dp_reg_immshift_N0(MI, MOV, SETFLAGS)
movsmi reg, reg, ishift		= dp_reg_immshift_N0(MI, MOV, SETFLAGS)
movpls reg, reg, ishift		= dp_reg_immshift_N0(PL, MOV, SETFLAGS)
movspl reg, reg, ishift		= dp_reg_immshift_N0(PL, MOV, SETFLAGS)
movvss reg, reg, ishift		= dp_reg_immshift_N0(VS, MOV, SETFLAGS)
movsvs reg, reg, ishift		= dp_reg_immshift_N0(VS, MOV, SETFLAGS)
movvcs reg, reg, ishift		= dp_reg_immshift_N0(VC, MOV, SETFLAGS)
movsvc reg, reg, ishift		= dp_reg_immshift_N0(VC, MOV, SETFLAGS)
movhis reg, reg, ishift		= dp_reg_immshift_N0(HI, MOV, SETFLAGS)
movshi reg, reg, ishift		= dp_reg_immshift_N0(HI, MOV, SETFLAGS)
movlss reg, reg, ishift		= dp_reg_immshift_N0(LS, MOV, SETFLAGS)
movsls reg, reg, ishift		= dp_reg_immshift_N0(LS, MOV, SETFLAGS)
movges reg, reg, ishift		= dp_reg_immshift_N0(GE, MOV, SETFLAGS)
movsge reg, reg, ishift		= dp_reg_immshift_N0(GE, MOV, SETFLAGS)
movlts reg, reg, ishift		= dp_reg_immshift_N0(LT, MOV, SETFLAGS)
movslt reg, reg, ishift		= dp_reg_immshift_N0(LT, MOV, SETFLAGS)
movgts reg, reg, ishift		= dp_reg_immshift_N0(GT, MOV, SETFLAGS)
movsgt reg, reg, ishift		= dp_reg_immshift_N0(GT, MOV, SETFLAGS)
movles reg, reg, ishift		= dp_reg_immshift_N0(LE, MOV, SETFLAGS)
movsle reg, reg, ishift		= dp_reg_immshift_N0(LE, MOV, SETFLAGS)
movals reg, reg, ishift		= dp_reg_immshift_N0(AL, MOV, SETFLAGS)
movsal reg, reg, ishift		= dp_reg_immshift_N0(AL, MOV, SETFLAGS)

# register shifted by register 
mov reg, reg, rshift		= dp_reg_regshift_N0(AL, MOV, NOFLAGS)
moveq reg, reg, rshift		= dp_reg_regshift_N0(EQ, MOV, NOFLAGS)
movne reg, reg, rshift		= dp_reg_regshift_N0(NE, MOV, NOFLAGS)
movcs reg, reg, rshift		= dp_reg_regshift_N0(CS, MOV, NOFLAGS)
movcc reg, reg, rshift		= dp_reg_regshift_N0(CC, MOV, NOFLAGS)
movmi reg, reg, rshift		= dp_reg_regshift_N0(MI, MOV, NOFLAGS)
movpl reg, reg, rshift		= dp_reg_regshift_N0(PL, MOV, NOFLAGS)
movvs reg, reg, rshift		= dp_reg_regshift_N0(VS, MOV, NOFLAGS)
movvc reg, reg, rshift		= dp_reg_regshift_N0(VC, MOV, NOFLAGS)
movhi reg, reg, rshift		= dp_reg_regshift_N0(HI, MOV, NOFLAGS)
movls reg, reg, rshift		= dp_reg_regshift_N0(LS, MOV, NOFLAGS)
movge reg, reg, rshift		= dp_reg_regshift_N0(GE, MOV, NOFLAGS)
movlt reg, reg, rshift		= dp_reg_regshift_N0(LT, MOV, NOFLAGS)
movgt reg, reg, rshift		= dp_reg_regshift_N0(GT, MOV, NOFLAGS)
movle reg, reg, rshift		= dp_reg_regshift_N0(LE, MOV, NOFLAGS)
moval reg, reg, rshift		= dp_reg_regshift_N0(AL, MOV, NOFLAGS)

# register shifted by register with setflags
movs reg, reg, rshift		= dp_reg_regshift_N0(AL, MOV, SETFLAGS)
moveqs reg, reg, rshift		= dp_reg_regshift_N0(EQ, MOV, SETFLAGS)
movseq reg, reg, rshift		= dp_reg_regshift_N0(EQ, MOV, SETFLAGS)
movnes reg, reg, rshift		= dp_reg_regshift_N0(NE, MOV, SETFLAGS)
movsne reg, reg, rshift		= dp_reg_regshift_N0(NE, MOV, SETFLAGS)
movcss reg, reg, rshift		= dp_reg_regshift_N0(CS, MOV, SETFLAGS)
movscs reg, reg, rshift		= dp_reg_regshift_N0(CS, MOV, SETFLAGS)
movccs reg, reg, rshift		= dp_reg_regshift_N0(CC, MOV, SETFLAGS)
movscc reg, reg, rshift		= dp_reg_regshift_N0(CC, MOV, SETFLAGS)
movmis reg, reg, rshift		= dp_reg_regshift_N0(MI, MOV, SETFLAGS)
movsmi reg, reg, rshift		= dp_reg_regshift_N0(MI, MOV, SETFLAGS)
movpls reg, reg, rshift		= dp_reg_regshift_N0(PL, MOV, SETFLAGS)
movspl reg, reg, rshift		= dp_reg_regshift_N0(PL, MOV, SETFLAGS)
movvss reg, reg, rshift		= dp_reg_regshift_N0(VS, MOV, SETFLAGS)
movsvs reg, reg, rshift		= dp_reg_regshift_N0(VS, MOV, SETFLAGS)
movvcs reg, reg, rshift		= dp_reg_regshift_N0(VC, MOV, SETFLAGS)
movsvc reg, reg, rshift		= dp_reg_regshift_N0(VC, MOV, SETFLAGS)
movhis reg, reg, rshift		= dp_reg_regshift_N0(HI, MOV, SETFLAGS)
movshi reg, reg, rshift		= dp_reg_regshift_N0(HI, MOV, SETFLAGS)
movlss reg, reg, rshift		= dp_reg_regshift_N0(LS, MOV, SETFLAGS)
movsls reg, reg, rshift		= dp_reg_regshift_N0(LS, MOV, SETFLAGS)
movges reg, reg, rshift		= dp_reg_regshift_N0(GE, MOV, SETFLAGS)
movsge reg, reg, rshift		= dp_reg_regshift_N0(GE, MOV, SETFLAGS)
movlts reg, reg, rshift		= dp_reg_regshift_N0(LT, MOV, SETFLAGS)
movslt reg, reg, rshift		= dp_reg_regshift_N0(LT, MOV, SETFLAGS)
movgts reg, reg, rshift		= dp_reg_regshift_N0(GT, MOV, SETFLAGS)
movsgt reg, reg, rshift		= dp_reg_regshift_N0(GT, MOV, SETFLAGS)
movles reg, reg, rshift		= dp_reg_regshift_N0(LE, MOV, SETFLAGS)
movsle reg, reg, rshift		= dp_reg_regshift_N0(LE, MOV, SETFLAGS)
movals reg, reg, rshift		= dp_reg_regshift_N0(AL, MOV, SETFLAGS)
movsal reg, reg, rshift		= dp_reg_regshift_N0(AL, MOV, SETFLAGS)

#
# MVN
#

# immediate
mvn reg, imm			= dp_imm_N0(AL, MVN, NOFLAGS)
mvneq reg, imm		= dp_imm_N0(EQ, MVN, NOFLAGS)
mvnne reg, imm		= dp_imm_N0(NE, MVN, NOFLAGS)
mvncs reg, imm		= dp_imm_N0(CS, MVN, NOFLAGS)
mvncc reg, imm		= dp_imm_N0(CC, MVN, NOFLAGS)
mvnmi reg, imm		= dp_imm_N0(MI, MVN, NOFLAGS)
mvnpl reg, imm		= dp_imm_N0(PL, MVN, NOFLAGS)
mvnvs reg, imm		= dp_imm_N0(VS, MVN, NOFLAGS)
mvnvc reg, imm		= dp_imm_N0(VC, MVN, NOFLAGS)
mvnhi reg, imm		= dp_imm_N0(HI, MVN, NOFLAGS)
mvnls reg, imm		= dp_imm_N0(LS, MVN, NOFLAGS)
mvnge reg, imm		= dp_imm_N0(GE, MVN, NOFLAGS)
mvnlt reg, imm		= dp_imm_N0(LT, MVN, NOFLAGS)
mvngt reg, imm		= dp_imm_N0(GT, MVN, NOFLAGS)
mvnle reg, imm		= dp_imm_N0(LE, MVN, NOFLAGS)
mvnal reg, imm		= dp_imm_N0(AL, MVN, NOFLAGS)

# immediate with setflags 
mvns reg, imm		= dp_imm_N0(AL, MVN, SETFLAGS)
mvnseq reg, imm		= dp_imm_N0(EQ, MVN, SETFLAGS)
mvneqs reg, imm		= dp_imm_N0(EQ, MVN, SETFLAGS)
mvnsne reg, imm		= dp_imm_N0(NE, MVN, SETFLAGS)
mvnnes reg, imm		= dp_imm_N0(NE, MVN, SETFLAGS)
mvnscs reg, imm		= dp_imm_N0(CS, MVN, SETFLAGS)
mvncss reg, imm		= dp_imm_N0(CS, MVN, SETFLAGS)
mvnscc reg, imm		= dp_imm_N0(CC, MVN, SETFLAGS)
mvnccs reg, imm		= dp_imm_N0(CC, MVN, SETFLAGS)
mvnsmi reg, imm		= dp_imm_N0(MI, MVN, SETFLAGS)
mvnmis reg, imm		= dp_imm_N0(MI, MVN, SETFLAGS)
mvnspl reg, imm		= dp_imm_N0(PL, MVN, SETFLAGS)
mvnpls reg, imm		= dp_imm_N0(PL, MVN, SETFLAGS)
mvnsvs reg, imm		= dp_imm_N0(VS, MVN, SETFLAGS)
mvnvss reg, imm		= dp_imm_N0(VS, MVN, SETFLAGS)
mvnsvc reg, imm		= dp_imm_N0(VC, MVN, SETFLAGS)
mvnvcs reg, imm		= dp_imm_N0(VC, MVN, SETFLAGS)
mvnshi reg, imm		= dp_imm_N0(HI, MVN, SETFLAGS)
mvnhis reg, imm		= dp_imm_N0(HI, MVN, SETFLAGS)
mvnsls reg, imm		= dp_imm_N0(LS, MVN, SETFLAGS)
mvnlss reg, imm		= dp_imm_N0(LS, MVN, SETFLAGS)
mvnsge reg, imm		= dp_imm_N0(GE, MVN, SETFLAGS)
mvnges reg, imm		= dp_imm_N0(GE, MVN, SETFLAGS)
mvnslt reg, imm		= dp_imm_N0(LT, MVN, SETFLAGS)
mvnlts reg, imm		= dp_imm_N0(LT, MVN, SETFLAGS)
mvnsgt reg, imm		= dp_imm_N0(GT, MVN, SETFLAGS)
mvngts reg, imm		= dp_imm_N0(GT, MVN, SETFLAGS)
mvnsle reg, imm		= dp_imm_N0(LE, MVN, SETFLAGS)
mvnles reg, imm		= dp_imm_N0(LE, MVN, SETFLAGS)
mvnsal reg, imm		= dp_imm_N0(AL, MVN, SETFLAGS)
mvnals reg, imm		= dp_imm_N0(AL, MVN, SETFLAGS)

# register shifted by nothing 
mvn reg, reg			= dp_reg_immshift_N0(AL, MVN, NOFLAGS)
mvneq reg, reg			= dp_reg_immshift_N0(EQ, MVN, NOFLAGS)
mvnne reg, reg			= dp_reg_immshift_N0(NE, MVN, NOFLAGS)
mvncs reg, reg			= dp_reg_immshift_N0(CS, MVN, NOFLAGS)
mvncc reg, reg			= dp_reg_immshift_N0(CC, MVN, NOFLAGS)
mvnmi reg, reg			= dp_reg_immshift_N0(MI, MVN, NOFLAGS)
mvnpl reg, reg			= dp_reg_immshift_N0(PL, MVN, NOFLAGS)
mvnvs reg, reg			= dp_reg_immshift_N0(VS, MVN, NOFLAGS)
mvnvc reg, reg			= dp_reg_immshift_N0(VC, MVN, NOFLAGS)
mvnhi reg, reg			= dp_reg_immshift_N0(HI, MVN, NOFLAGS)
mvnls reg, reg			= dp_reg_immshift_N0(LS, MVN, NOFLAGS)
mvnge reg, reg			= dp_reg_immshift_N0(GE, MVN, NOFLAGS)
mvnlt reg, reg			= dp_reg_immshift_N0(LT, MVN, NOFLAGS)
mvngt reg, reg			= dp_reg_immshift_N0(GT, MVN, NOFLAGS)
mvnle reg, reg			= dp_reg_immshift_N0(LE, MVN, NOFLAGS)
mvnal reg, reg			= dp_reg_immshift_N0(AL, MVN, NOFLAGS)

# register shifted by nothing with setflags 
mvns reg, reg			= dp_reg_immshift_N0(AL, MVN, SETFLAGS)
mvneqs reg, reg			= dp_reg_immshift_N0(EQ, MVN, SETFLAGS)
mvnseq reg, reg			= dp_reg_immshift_N0(EQ, MVN, SETFLAGS)
mvnnes reg, reg			= dp_reg_immshift_N0(NE, MVN, SETFLAGS)
mvnsne reg, reg			= dp_reg_immshift_N0(NE, MVN, SETFLAGS)
mvncss reg, reg			= dp_reg_immshift_N0(CS, MVN, SETFLAGS)
mvnscs reg, reg			= dp_reg_immshift_N0(CS, MVN, SETFLAGS)
mvnccs reg, reg			= dp_reg_immshift_N0(CC, MVN, SETFLAGS)
mvnscc reg, reg			= dp_reg_immshift_N0(CC, MVN, SETFLAGS)
mvnmis reg, reg			= dp_reg_immshift_N0(MI, MVN, SETFLAGS)
mvnsmi reg, reg			= dp_reg_immshift_N0(MI, MVN, SETFLAGS)
mvnpls reg, reg			= dp_reg_immshift_N0(PL, MVN, SETFLAGS)
mvnspl reg, reg			= dp_reg_immshift_N0(PL, MVN, SETFLAGS)
mvnvss reg, reg			= dp_reg_immshift_N0(VS, MVN, SETFLAGS)
mvnsvs reg, reg			= dp_reg_immshift_N0(VS, MVN, SETFLAGS)
mvnvcs reg, reg			= dp_reg_immshift_N0(VC, MVN, SETFLAGS)
mvnsvc reg, reg			= dp_reg_immshift_N0(VC, MVN, SETFLAGS)
mvnhis reg, reg			= dp_reg_immshift_N0(HI, MVN, SETFLAGS)
mvnshi reg, reg			= dp_reg_immshift_N0(HI, MVN, SETFLAGS)
mvnlss reg, reg			= dp_reg_immshift_N0(LS, MVN, SETFLAGS)
mvnsls reg, reg			= dp_reg_immshift_N0(LS, MVN, SETFLAGS)
mvnges reg, reg			= dp_reg_immshift_N0(GE, MVN, SETFLAGS)
mvnsge reg, reg			= dp_reg_immshift_N0(GE, MVN, SETFLAGS)
mvnlts reg, reg			= dp_reg_immshift_N0(LT, MVN, SETFLAGS)
mvnslt reg, reg			= dp_reg_immshift_N0(LT, MVN, SETFLAGS)
mvngts reg, reg			= dp_reg_immshift_N0(GT, MVN, SETFLAGS)
mvnsgt reg, reg			= dp_reg_immshift_N0(GT, MVN, SETFLAGS)
mvnles reg, reg			= dp_reg_immshift_N0(LE, MVN, SETFLAGS)
mvnsle reg, reg			= dp_reg_immshift_N0(LE, MVN, SETFLAGS)
mvnals reg, reg			= dp_reg_immshift_N0(AL, MVN, SETFLAGS)
mvnsal reg, reg			= dp_reg_immshift_N0(AL, MVN, SETFLAGS)

# register shifted by immediate 
mvn reg, reg, ishift		= dp_reg_immshift_N0(AL, MVN, NOFLAGS)
mvneq reg, reg, ishift		= dp_reg_immshift_N0(EQ, MVN, NOFLAGS)
mvnne reg, reg, ishift		= dp_reg_immshift_N0(NE, MVN, NOFLAGS)
mvncs reg, reg, ishift		= dp_reg_immshift_N0(CS, MVN, NOFLAGS)
mvncc reg, reg, ishift		= dp_reg_immshift_N0(CC, MVN, NOFLAGS)
mvnmi reg, reg, ishift		= dp_reg_immshift_N0(MI, MVN, NOFLAGS)
mvnpl reg, reg, ishift		= dp_reg_immshift_N0(PL, MVN, NOFLAGS)
mvnvs reg, reg, ishift		= dp_reg_immshift_N0(VS, MVN, NOFLAGS)
mvnvc reg, reg, ishift		= dp_reg_immshift_N0(VC, MVN, NOFLAGS)
mvnhi reg, reg, ishift		= dp_reg_immshift_N0(HI, MVN, NOFLAGS)
mvnls reg, reg, ishift		= dp_reg_immshift_N0(LS, MVN, NOFLAGS)
mvnge reg, reg, ishift		= dp_reg_immshift_N0(GE, MVN, NOFLAGS)
mvnlt reg, reg, ishift		= dp_reg_immshift_N0(LT, MVN, NOFLAGS)
mvngt reg, reg, ishift		= dp_reg_immshift_N0(GT, MVN, NOFLAGS)
mvnle reg, reg, ishift		= dp_reg_immshift_N0(LE, MVN, NOFLAGS)
mvnal reg, reg, ishift		= dp_reg_immshift_N0(AL, MVN, NOFLAGS)

# register shifted by immediate with setflags 
mvns reg, reg, ishift		= dp_reg_immshift_N0(AL, MVN, SETFLAGS)
mvneqs reg, reg, ishift		= dp_reg_immshift_N0(EQ, MVN, SETFLAGS)
mvnseq reg, reg, ishift		= dp_reg_immshift_N0(EQ, MVN, SETFLAGS)
mvnnes reg, reg, ishift		= dp_reg_immshift_N0(NE, MVN, SETFLAGS)
mvnsne reg, reg, ishift		= dp_reg_immshift_N0(NE, MVN, SETFLAGS)
mvncss reg, reg, ishift		= dp_reg_immshift_N0(CS, MVN, SETFLAGS)
mvnscs reg, reg, ishift		= dp_reg_immshift_N0(CS, MVN, SETFLAGS)
mvnccs reg, reg, ishift		= dp_reg_immshift_N0(CC, MVN, SETFLAGS)
mvnscc reg, reg, ishift		= dp_reg_immshift_N0(CC, MVN, SETFLAGS)
mvnmis reg, reg, ishift		= dp_reg_immshift_N0(MI, MVN, SETFLAGS)
mvnsmi reg, reg, ishift		= dp_reg_immshift_N0(MI, MVN, SETFLAGS)
mvnpls reg, reg, ishift		= dp_reg_immshift_N0(PL, MVN, SETFLAGS)
mvnspl reg, reg, ishift		= dp_reg_immshift_N0(PL, MVN, SETFLAGS)
mvnvss reg, reg, ishift		= dp_reg_immshift_N0(VS, MVN, SETFLAGS)
mvnsvs reg, reg, ishift		= dp_reg_immshift_N0(VS, MVN, SETFLAGS)
mvnvcs reg, reg, ishift		= dp_reg_immshift_N0(VC, MVN, SETFLAGS)
mvnsvc reg, reg, ishift		= dp_reg_immshift_N0(VC, MVN, SETFLAGS)
mvnhis reg, reg, ishift		= dp_reg_immshift_N0(HI, MVN, SETFLAGS)
mvnshi reg, reg, ishift		= dp_reg_immshift_N0(HI, MVN, SETFLAGS)
mvnlss reg, reg, ishift		= dp_reg_immshift_N0(LS, MVN, SETFLAGS)
mvnsls reg, reg, ishift		= dp_reg_immshift_N0(LS, MVN, SETFLAGS)
mvnges reg, reg, ishift		= dp_reg_immshift_N0(GE, MVN, SETFLAGS)
mvnsge reg, reg, ishift		= dp_reg_immshift_N0(GE, MVN, SETFLAGS)
mvnlts reg, reg, ishift		= dp_reg_immshift_N0(LT, MVN, SETFLAGS)
mvnslt reg, reg, ishift		= dp_reg_immshift_N0(LT, MVN, SETFLAGS)
mvngts reg, reg, ishift		= dp_reg_immshift_N0(GT, MVN, SETFLAGS)
mvnsgt reg, reg, ishift		= dp_reg_immshift_N0(GT, MVN, SETFLAGS)
mvnles reg, reg, ishift		= dp_reg_immshift_N0(LE, MVN, SETFLAGS)
mvnsle reg, reg, ishift		= dp_reg_immshift_N0(LE, MVN, SETFLAGS)
mvnals reg, reg, ishift		= dp_reg_immshift_N0(AL, MVN, SETFLAGS)
mvnsal reg, reg, ishift		= dp_reg_immshift_N0(AL, MVN, SETFLAGS)

# register shifted by register 
mvn reg, reg, rshift		= dp_reg_regshift_N0(AL, MVN, NOFLAGS)
mvneq reg, reg, rshift		= dp_reg_regshift_N0(EQ, MVN, NOFLAGS)
mvnne reg, reg, rshift		= dp_reg_regshift_N0(NE, MVN, NOFLAGS)
mvncs reg, reg, rshift		= dp_reg_regshift_N0(CS, MVN, NOFLAGS)
mvncc reg, reg, rshift		= dp_reg_regshift_N0(CC, MVN, NOFLAGS)
mvnmi reg, reg, rshift		= dp_reg_regshift_N0(MI, MVN, NOFLAGS)
mvnpl reg, reg, rshift		= dp_reg_regshift_N0(PL, MVN, NOFLAGS)
mvnvs reg, reg, rshift		= dp_reg_regshift_N0(VS, MVN, NOFLAGS)
mvnvc reg, reg, rshift		= dp_reg_regshift_N0(VC, MVN, NOFLAGS)
mvnhi reg, reg, rshift		= dp_reg_regshift_N0(HI, MVN, NOFLAGS)
mvnls reg, reg, rshift		= dp_reg_regshift_N0(LS, MVN, NOFLAGS)
mvnge reg, reg, rshift		= dp_reg_regshift_N0(GE, MVN, NOFLAGS)
mvnlt reg, reg, rshift		= dp_reg_regshift_N0(LT, MVN, NOFLAGS)
mvngt reg, reg, rshift		= dp_reg_regshift_N0(GT, MVN, NOFLAGS)
mvnle reg, reg, rshift		= dp_reg_regshift_N0(LE, MVN, NOFLAGS)
mvnal reg, reg, rshift		= dp_reg_regshift_N0(AL, MVN, NOFLAGS)

# register shifted by register with setflags
mvns reg, reg, rshift		= dp_reg_regshift_N0(AL, MVN, SETFLAGS)
mvneqs reg, reg, rshift		= dp_reg_regshift_N0(EQ, MVN, SETFLAGS)
mvnseq reg, reg, rshift		= dp_reg_regshift_N0(EQ, MVN, SETFLAGS)
mvnnes reg, reg, rshift		= dp_reg_regshift_N0(NE, MVN, SETFLAGS)
mvnsne reg, reg, rshift		= dp_reg_regshift_N0(NE, MVN, SETFLAGS)
mvncss reg, reg, rshift		= dp_reg_regshift_N0(CS, MVN, SETFLAGS)
mvnscs reg, reg, rshift		= dp_reg_regshift_N0(CS, MVN, SETFLAGS)
mvnccs reg, reg, rshift		= dp_reg_regshift_N0(CC, MVN, SETFLAGS)
mvnscc reg, reg, rshift		= dp_reg_regshift_N0(CC, MVN, SETFLAGS)
mvnmis reg, reg, rshift		= dp_reg_regshift_N0(MI, MVN, SETFLAGS)
mvnsmi reg, reg, rshift		= dp_reg_regshift_N0(MI, MVN, SETFLAGS)
mvnpls reg, reg, rshift		= dp_reg_regshift_N0(PL, MVN, SETFLAGS)
mvnspl reg, reg, rshift		= dp_reg_regshift_N0(PL, MVN, SETFLAGS)
mvnvss reg, reg, rshift		= dp_reg_regshift_N0(VS, MVN, SETFLAGS)
mvnsvs reg, reg, rshift		= dp_reg_regshift_N0(VS, MVN, SETFLAGS)
mvnvcs reg, reg, rshift		= dp_reg_regshift_N0(VC, MVN, SETFLAGS)
mvnsvc reg, reg, rshift		= dp_reg_regshift_N0(VC, MVN, SETFLAGS)
mvnhis reg, reg, rshift		= dp_reg_regshift_N0(HI, MVN, SETFLAGS)
mvnshi reg, reg, rshift		= dp_reg_regshift_N0(HI, MVN, SETFLAGS)
mvnlss reg, reg, rshift		= dp_reg_regshift_N0(LS, MVN, SETFLAGS)
mvnsls reg, reg, rshift		= dp_reg_regshift_N0(LS, MVN, SETFLAGS)
mvnges reg, reg, rshift		= dp_reg_regshift_N0(GE, MVN, SETFLAGS)
mvnsge reg, reg, rshift		= dp_reg_regshift_N0(GE, MVN, SETFLAGS)
mvnlts reg, reg, rshift		= dp_reg_regshift_N0(LT, MVN, SETFLAGS)
mvnslt reg, reg, rshift		= dp_reg_regshift_N0(LT, MVN, SETFLAGS)
mvngts reg, reg, rshift		= dp_reg_regshift_N0(GT, MVN, SETFLAGS)
mvnsgt reg, reg, rshift		= dp_reg_regshift_N0(GT, MVN, SETFLAGS)
mvnles reg, reg, rshift		= dp_reg_regshift_N0(LE, MVN, SETFLAGS)
mvnsle reg, reg, rshift		= dp_reg_regshift_N0(LE, MVN, SETFLAGS)
mvnals reg, reg, rshift		= dp_reg_regshift_N0(AL, MVN, SETFLAGS)
mvnsal reg, reg, rshift		= dp_reg_regshift_N0(AL, MVN, SETFLAGS)

#
# CMP
#

# immediate with Rd == Rn
cmp reg, imm			= dp_imm_D0(AL, CMP, SETFLAGS)
cmpeq reg, imm		= dp_imm_D0(EQ, CMP, SETFLAGS)
cmpne reg, imm		= dp_imm_D0(NE, CMP, SETFLAGS)
cmpcs reg, imm		= dp_imm_D0(CS, CMP, SETFLAGS)
cmpcc reg, imm		= dp_imm_D0(CC, CMP, SETFLAGS)
cmpmi reg, imm		= dp_imm_D0(MI, CMP, SETFLAGS)
cmppl reg, imm		= dp_imm_D0(PL, CMP, SETFLAGS)
cmpvs reg, imm		= dp_imm_D0(VS, CMP, SETFLAGS)
cmpvc reg, imm		= dp_imm_D0(VC, CMP, SETFLAGS)
cmphi reg, imm		= dp_imm_D0(HI, CMP, SETFLAGS)
cmpls reg, imm		= dp_imm_D0(LS, CMP, SETFLAGS)
cmpge reg, imm		= dp_imm_D0(GE, CMP, SETFLAGS)
cmplt reg, imm		= dp_imm_D0(LT, CMP, SETFLAGS)
cmpgt reg, imm		= dp_imm_D0(GT, CMP, SETFLAGS)
cmple reg, imm		= dp_imm_D0(LE, CMP, SETFLAGS)
cmpal reg, imm		= dp_imm_D0(AL, CMP, SETFLAGS)

# register shifted by nothing with Rd == Rn
cmp reg, reg			= dp_reg_immshift_D0(AL, CMP, SETFLAGS)
cmpeq reg, reg			= dp_reg_immshift_D0(EQ, CMP, SETFLAGS)
cmpne reg, reg			= dp_reg_immshift_D0(NE, CMP, SETFLAGS)
cmpcs reg, reg			= dp_reg_immshift_D0(CS, CMP, SETFLAGS)
cmpcc reg, reg			= dp_reg_immshift_D0(CC, CMP, SETFLAGS)
cmpmi reg, reg			= dp_reg_immshift_D0(MI, CMP, SETFLAGS)
cmppl reg, reg			= dp_reg_immshift_D0(PL, CMP, SETFLAGS)
cmpvs reg, reg			= dp_reg_immshift_D0(VS, CMP, SETFLAGS)
cmpvc reg, reg			= dp_reg_immshift_D0(VC, CMP, SETFLAGS)
cmphi reg, reg			= dp_reg_immshift_D0(HI, CMP, SETFLAGS)
cmpls reg, reg			= dp_reg_immshift_D0(LS, CMP, SETFLAGS)
cmpge reg, reg			= dp_reg_immshift_D0(GE, CMP, SETFLAGS)
cmplt reg, reg			= dp_reg_immshift_D0(LT, CMP, SETFLAGS)
cmpgt reg, reg			= dp_reg_immshift_D0(GT, CMP, SETFLAGS)
cmple reg, reg			= dp_reg_immshift_D0(LE, CMP, SETFLAGS)
cmpal reg, reg			= dp_reg_immshift_D0(AL, CMP, SETFLAGS)

# register shifted by immediate with Rd == Rn
cmp reg, reg, ishift		= dp_reg_immshift_D0(AL, CMP, SETFLAGS)
cmpeq reg, reg, ishift		= dp_reg_immshift_D0(EQ, CMP, SETFLAGS)
cmpne reg, reg, ishift		= dp_reg_immshift_D0(NE, CMP, SETFLAGS)
cmpcs reg, reg, ishift		= dp_reg_immshift_D0(CS, CMP, SETFLAGS)
cmpcc reg, reg, ishift		= dp_reg_immshift_D0(CC, CMP, SETFLAGS)
cmpmi reg, reg, ishift		= dp_reg_immshift_D0(MI, CMP, SETFLAGS)
cmppl reg, reg, ishift		= dp_reg_immshift_D0(PL, CMP, SETFLAGS)
cmpvs reg, reg, ishift		= dp_reg_immshift_D0(VS, CMP, SETFLAGS)
cmpvc reg, reg, ishift		= dp_reg_immshift_D0(VC, CMP, SETFLAGS)
cmphi reg, reg, ishift		= dp_reg_immshift_D0(HI, CMP, SETFLAGS)
cmpls reg, reg, ishift		= dp_reg_immshift_D0(LS, CMP, SETFLAGS)
cmpge reg, reg, ishift		= dp_reg_immshift_D0(GE, CMP, SETFLAGS)
cmplt reg, reg, ishift		= dp_reg_immshift_D0(LT, CMP, SETFLAGS)
cmpgt reg, reg, ishift		= dp_reg_immshift_D0(GT, CMP, SETFLAGS)
cmple reg, reg, ishift		= dp_reg_immshift_D0(LE, CMP, SETFLAGS)
cmpal reg, reg, ishift		= dp_reg_immshift_D0(AL, CMP, SETFLAGS)

# register shifted by register with Rd == Rn
cmp reg, reg, rshift		= dp_reg_regshift_D0(AL, CMP, SETFLAGS)
cmpeq reg, reg, rshift		= dp_reg_regshift_D0(EQ, CMP, SETFLAGS)
cmpne reg, reg, rshift		= dp_reg_regshift_D0(NE, CMP, SETFLAGS)
cmpcs reg, reg, rshift		= dp_reg_regshift_D0(CS, CMP, SETFLAGS)
cmpcc reg, reg, rshift		= dp_reg_regshift_D0(CC, CMP, SETFLAGS)
cmpmi reg, reg, rshift		= dp_reg_regshift_D0(MI, CMP, SETFLAGS)
cmppl reg, reg, rshift		= dp_reg_regshift_D0(PL, CMP, SETFLAGS)
cmpvs reg, reg, rshift		= dp_reg_regshift_D0(VS, CMP, SETFLAGS)
cmpvc reg, reg, rshift		= dp_reg_regshift_D0(VC, CMP, SETFLAGS)
cmphi reg, reg, rshift		= dp_reg_regshift_D0(HI, CMP, SETFLAGS)
cmpls reg, reg, rshift		= dp_reg_regshift_D0(LS, CMP, SETFLAGS)
cmpge reg, reg, rshift		= dp_reg_regshift_D0(GE, CMP, SETFLAGS)
cmplt reg, reg, rshift		= dp_reg_regshift_D0(LT, CMP, SETFLAGS)
cmpgt reg, reg, rshift		= dp_reg_regshift_D0(GT, CMP, SETFLAGS)
cmple reg, reg, rshift		= dp_reg_regshift_D0(LE, CMP, SETFLAGS)
cmpal reg, reg, rshift		= dp_reg_regshift_D0(AL, CMP, SETFLAGS)

#
# CMN
#

# immediate with Rd == Rn
cmn reg, imm			= dp_imm_D0(AL, CMN, SETFLAGS)
cmneq reg, imm		= dp_imm_D0(EQ, CMN, SETFLAGS)
cmnne reg, imm		= dp_imm_D0(NE, CMN, SETFLAGS)
cmncs reg, imm		= dp_imm_D0(CS, CMN, SETFLAGS)
cmncc reg, imm		= dp_imm_D0(CC, CMN, SETFLAGS)
cmnmi reg, imm		= dp_imm_D0(MI, CMN, SETFLAGS)
cmnpl reg, imm		= dp_imm_D0(PL, CMN, SETFLAGS)
cmnvs reg, imm		= dp_imm_D0(VS, CMN, SETFLAGS)
cmnvc reg, imm		= dp_imm_D0(VC, CMN, SETFLAGS)
cmnhi reg, imm		= dp_imm_D0(HI, CMN, SETFLAGS)
cmnls reg, imm		= dp_imm_D0(LS, CMN, SETFLAGS)
cmnge reg, imm		= dp_imm_D0(GE, CMN, SETFLAGS)
cmnlt reg, imm		= dp_imm_D0(LT, CMN, SETFLAGS)
cmngt reg, imm		= dp_imm_D0(GT, CMN, SETFLAGS)
cmnle reg, imm		= dp_imm_D0(LE, CMN, SETFLAGS)
cmnal reg, imm		= dp_imm_D0(AL, CMN, SETFLAGS)

# register shifted by nothing with Rd == Rn
cmn reg, reg			= dp_reg_immshift_D0(AL, CMN, SETFLAGS)
cmneq reg, reg			= dp_reg_immshift_D0(EQ, CMN, SETFLAGS)
cmnne reg, reg			= dp_reg_immshift_D0(NE, CMN, SETFLAGS)
cmncs reg, reg			= dp_reg_immshift_D0(CS, CMN, SETFLAGS)
cmncc reg, reg			= dp_reg_immshift_D0(CC, CMN, SETFLAGS)
cmnmi reg, reg			= dp_reg_immshift_D0(MI, CMN, SETFLAGS)
cmnpl reg, reg			= dp_reg_immshift_D0(PL, CMN, SETFLAGS)
cmnvs reg, reg			= dp_reg_immshift_D0(VS, CMN, SETFLAGS)
cmnvc reg, reg			= dp_reg_immshift_D0(VC, CMN, SETFLAGS)
cmnhi reg, reg			= dp_reg_immshift_D0(HI, CMN, SETFLAGS)
cmnls reg, reg			= dp_reg_immshift_D0(LS, CMN, SETFLAGS)
cmnge reg, reg			= dp_reg_immshift_D0(GE, CMN, SETFLAGS)
cmnlt reg, reg			= dp_reg_immshift_D0(LT, CMN, SETFLAGS)
cmngt reg, reg			= dp_reg_immshift_D0(GT, CMN, SETFLAGS)
cmnle reg, reg			= dp_reg_immshift_D0(LE, CMN, SETFLAGS)
cmnal reg, reg			= dp_reg_immshift_D0(AL, CMN, SETFLAGS)

# register shifted by immediate with Rd == Rn
cmn reg, reg, ishift		= dp_reg_immshift_D0(AL, CMN, SETFLAGS)
cmneq reg, reg, ishift		= dp_reg_immshift_D0(EQ, CMN, SETFLAGS)
cmnne reg, reg, ishift		= dp_reg_immshift_D0(NE, CMN, SETFLAGS)
cmncs reg, reg, ishift		= dp_reg_immshift_D0(CS, CMN, SETFLAGS)
cmncc reg, reg, ishift		= dp_reg_immshift_D0(CC, CMN, SETFLAGS)
cmnmi reg, reg, ishift		= dp_reg_immshift_D0(MI, CMN, SETFLAGS)
cmnpl reg, reg, ishift		= dp_reg_immshift_D0(PL, CMN, SETFLAGS)
cmnvs reg, reg, ishift		= dp_reg_immshift_D0(VS, CMN, SETFLAGS)
cmnvc reg, reg, ishift		= dp_reg_immshift_D0(VC, CMN, SETFLAGS)
cmnhi reg, reg, ishift		= dp_reg_immshift_D0(HI, CMN, SETFLAGS)
cmnls reg, reg, ishift		= dp_reg_immshift_D0(LS, CMN, SETFLAGS)
cmnge reg, reg, ishift		= dp_reg_immshift_D0(GE, CMN, SETFLAGS)
cmnlt reg, reg, ishift		= dp_reg_immshift_D0(LT, CMN, SETFLAGS)
cmngt reg, reg, ishift		= dp_reg_immshift_D0(GT, CMN, SETFLAGS)
cmnle reg, reg, ishift		= dp_reg_immshift_D0(LE, CMN, SETFLAGS)
cmnal reg, reg, ishift		= dp_reg_immshift_D0(AL, CMN, SETFLAGS)

# register shifted by register with Rd == Rn
cmn reg, reg, rshift		= dp_reg_regshift_D0(AL, CMN, SETFLAGS)
cmneq reg, reg, rshift		= dp_reg_regshift_D0(EQ, CMN, SETFLAGS)
cmnne reg, reg, rshift		= dp_reg_regshift_D0(NE, CMN, SETFLAGS)
cmncs reg, reg, rshift		= dp_reg_regshift_D0(CS, CMN, SETFLAGS)
cmncc reg, reg, rshift		= dp_reg_regshift_D0(CC, CMN, SETFLAGS)
cmnmi reg, reg, rshift		= dp_reg_regshift_D0(MI, CMN, SETFLAGS)
cmnpl reg, reg, rshift		= dp_reg_regshift_D0(PL, CMN, SETFLAGS)
cmnvs reg, reg, rshift		= dp_reg_regshift_D0(VS, CMN, SETFLAGS)
cmnvc reg, reg, rshift		= dp_reg_regshift_D0(VC, CMN, SETFLAGS)
cmnhi reg, reg, rshift		= dp_reg_regshift_D0(HI, CMN, SETFLAGS)
cmnls reg, reg, rshift		= dp_reg_regshift_D0(LS, CMN, SETFLAGS)
cmnge reg, reg, rshift		= dp_reg_regshift_D0(GE, CMN, SETFLAGS)
cmnlt reg, reg, rshift		= dp_reg_regshift_D0(LT, CMN, SETFLAGS)
cmngt reg, reg, rshift		= dp_reg_regshift_D0(GT, CMN, SETFLAGS)
cmnle reg, reg, rshift		= dp_reg_regshift_D0(LE, CMN, SETFLAGS)
cmnal reg, reg, rshift		= dp_reg_regshift_D0(AL, CMN, SETFLAGS)

#
# TST
#

# immediate with Rd == Rn
tst reg, imm			= dp_imm_D0(AL, TST, SETFLAGS)
tsteq reg, imm		= dp_imm_D0(EQ, TST, SETFLAGS)
tstne reg, imm		= dp_imm_D0(NE, TST, SETFLAGS)
tstcs reg, imm		= dp_imm_D0(CS, TST, SETFLAGS)
tstcc reg, imm		= dp_imm_D0(CC, TST, SETFLAGS)
tstmi reg, imm		= dp_imm_D0(MI, TST, SETFLAGS)
tstpl reg, imm		= dp_imm_D0(PL, TST, SETFLAGS)
tstvs reg, imm		= dp_imm_D0(VS, TST, SETFLAGS)
tstvc reg, imm		= dp_imm_D0(VC, TST, SETFLAGS)
tsthi reg, imm		= dp_imm_D0(HI, TST, SETFLAGS)
tstls reg, imm		= dp_imm_D0(LS, TST, SETFLAGS)
tstge reg, imm		= dp_imm_D0(GE, TST, SETFLAGS)
tstlt reg, imm		= dp_imm_D0(LT, TST, SETFLAGS)
tstgt reg, imm		= dp_imm_D0(GT, TST, SETFLAGS)
tstle reg, imm		= dp_imm_D0(LE, TST, SETFLAGS)
tstal reg, imm		= dp_imm_D0(AL, TST, SETFLAGS)

# register shifted by nothing with Rd == Rn
tst reg, reg			= dp_reg_immshift_D0(AL, TST, SETFLAGS)
tsteq reg, reg			= dp_reg_immshift_D0(EQ, TST, SETFLAGS)
tstne reg, reg			= dp_reg_immshift_D0(NE, TST, SETFLAGS)
tstcs reg, reg			= dp_reg_immshift_D0(CS, TST, SETFLAGS)
tstcc reg, reg			= dp_reg_immshift_D0(CC, TST, SETFLAGS)
tstmi reg, reg			= dp_reg_immshift_D0(MI, TST, SETFLAGS)
tstpl reg, reg			= dp_reg_immshift_D0(PL, TST, SETFLAGS)
tstvs reg, reg			= dp_reg_immshift_D0(VS, TST, SETFLAGS)
tstvc reg, reg			= dp_reg_immshift_D0(VC, TST, SETFLAGS)
tsthi reg, reg			= dp_reg_immshift_D0(HI, TST, SETFLAGS)
tstls reg, reg			= dp_reg_immshift_D0(LS, TST, SETFLAGS)
tstge reg, reg			= dp_reg_immshift_D0(GE, TST, SETFLAGS)
tstlt reg, reg			= dp_reg_immshift_D0(LT, TST, SETFLAGS)
tstgt reg, reg			= dp_reg_immshift_D0(GT, TST, SETFLAGS)
tstle reg, reg			= dp_reg_immshift_D0(LE, TST, SETFLAGS)
tstal reg, reg			= dp_reg_immshift_D0(AL, TST, SETFLAGS)

# register shifted by immediate with Rd == Rn
tst reg, reg, ishift		= dp_reg_immshift_D0(AL, TST, SETFLAGS)
tsteq reg, reg, ishift		= dp_reg_immshift_D0(EQ, TST, SETFLAGS)
tstne reg, reg, ishift		= dp_reg_immshift_D0(NE, TST, SETFLAGS)
tstcs reg, reg, ishift		= dp_reg_immshift_D0(CS, TST, SETFLAGS)
tstcc reg, reg, ishift		= dp_reg_immshift_D0(CC, TST, SETFLAGS)
tstmi reg, reg, ishift		= dp_reg_immshift_D0(MI, TST, SETFLAGS)
tstpl reg, reg, ishift		= dp_reg_immshift_D0(PL, TST, SETFLAGS)
tstvs reg, reg, ishift		= dp_reg_immshift_D0(VS, TST, SETFLAGS)
tstvc reg, reg, ishift		= dp_reg_immshift_D0(VC, TST, SETFLAGS)
tsthi reg, reg, ishift		= dp_reg_immshift_D0(HI, TST, SETFLAGS)
tstls reg, reg, ishift		= dp_reg_immshift_D0(LS, TST, SETFLAGS)
tstge reg, reg, ishift		= dp_reg_immshift_D0(GE, TST, SETFLAGS)
tstlt reg, reg, ishift		= dp_reg_immshift_D0(LT, TST, SETFLAGS)
tstgt reg, reg, ishift		= dp_reg_immshift_D0(GT, TST, SETFLAGS)
tstle reg, reg, ishift		= dp_reg_immshift_D0(LE, TST, SETFLAGS)
tstal reg, reg, ishift		= dp_reg_immshift_D0(AL, TST, SETFLAGS)

# register shifted by register with Rd == Rn
tst reg, reg, rshift		= dp_reg_regshift_D0(AL, TST, SETFLAGS)
tsteq reg, reg, rshift		= dp_reg_regshift_D0(EQ, TST, SETFLAGS)
tstne reg, reg, rshift		= dp_reg_regshift_D0(NE, TST, SETFLAGS)
tstcs reg, reg, rshift		= dp_reg_regshift_D0(CS, TST, SETFLAGS)
tstcc reg, reg, rshift		= dp_reg_regshift_D0(CC, TST, SETFLAGS)
tstmi reg, reg, rshift		= dp_reg_regshift_D0(MI, TST, SETFLAGS)
tstpl reg, reg, rshift		= dp_reg_regshift_D0(PL, TST, SETFLAGS)
tstvs reg, reg, rshift		= dp_reg_regshift_D0(VS, TST, SETFLAGS)
tstvc reg, reg, rshift		= dp_reg_regshift_D0(VC, TST, SETFLAGS)
tsthi reg, reg, rshift		= dp_reg_regshift_D0(HI, TST, SETFLAGS)
tstls reg, reg, rshift		= dp_reg_regshift_D0(LS, TST, SETFLAGS)
tstge reg, reg, rshift		= dp_reg_regshift_D0(GE, TST, SETFLAGS)
tstlt reg, reg, rshift		= dp_reg_regshift_D0(LT, TST, SETFLAGS)
tstgt reg, reg, rshift		= dp_reg_regshift_D0(GT, TST, SETFLAGS)
tstle reg, reg, rshift		= dp_reg_regshift_D0(LE, TST, SETFLAGS)
tstal reg, reg, rshift		= dp_reg_regshift_D0(AL, TST, SETFLAGS)

#
# TEQ
#

# immediate with Rd == Rn
teq reg, imm			= dp_imm_D0(AL, TEQ, SETFLAGS)
teqeq reg, imm		= dp_imm_D0(EQ, TEQ, SETFLAGS)
teqne reg, imm		= dp_imm_D0(NE, TEQ, SETFLAGS)
teqcs reg, imm		= dp_imm_D0(CS, TEQ, SETFLAGS)
teqcc reg, imm		= dp_imm_D0(CC, TEQ, SETFLAGS)
teqmi reg, imm		= dp_imm_D0(MI, TEQ, SETFLAGS)
teqpl reg, imm		= dp_imm_D0(PL, TEQ, SETFLAGS)
teqvs reg, imm		= dp_imm_D0(VS, TEQ, SETFLAGS)
teqvc reg, imm		= dp_imm_D0(VC, TEQ, SETFLAGS)
teqhi reg, imm		= dp_imm_D0(HI, TEQ, SETFLAGS)
teqls reg, imm		= dp_imm_D0(LS, TEQ, SETFLAGS)
teqge reg, imm		= dp_imm_D0(GE, TEQ, SETFLAGS)
teqlt reg, imm		= dp_imm_D0(LT, TEQ, SETFLAGS)
teqgt reg, imm		= dp_imm_D0(GT, TEQ, SETFLAGS)
teqle reg, imm		= dp_imm_D0(LE, TEQ, SETFLAGS)
teqal reg, imm		= dp_imm_D0(AL, TEQ, SETFLAGS)

# register shifted by nothing with Rd == Rn
teq reg, reg			= dp_reg_immshift_D0(AL, TEQ, SETFLAGS)
teqeq reg, reg			= dp_reg_immshift_D0(EQ, TEQ, SETFLAGS)
teqne reg, reg			= dp_reg_immshift_D0(NE, TEQ, SETFLAGS)
teqcs reg, reg			= dp_reg_immshift_D0(CS, TEQ, SETFLAGS)
teqcc reg, reg			= dp_reg_immshift_D0(CC, TEQ, SETFLAGS)
teqmi reg, reg			= dp_reg_immshift_D0(MI, TEQ, SETFLAGS)
teqpl reg, reg			= dp_reg_immshift_D0(PL, TEQ, SETFLAGS)
teqvs reg, reg			= dp_reg_immshift_D0(VS, TEQ, SETFLAGS)
teqvc reg, reg			= dp_reg_immshift_D0(VC, TEQ, SETFLAGS)
teqhi reg, reg			= dp_reg_immshift_D0(HI, TEQ, SETFLAGS)
teqls reg, reg			= dp_reg_immshift_D0(LS, TEQ, SETFLAGS)
teqge reg, reg			= dp_reg_immshift_D0(GE, TEQ, SETFLAGS)
teqlt reg, reg			= dp_reg_immshift_D0(LT, TEQ, SETFLAGS)
teqgt reg, reg			= dp_reg_immshift_D0(GT, TEQ, SETFLAGS)
teqle reg, reg			= dp_reg_immshift_D0(LE, TEQ, SETFLAGS)
teqal reg, reg			= dp_reg_immshift_D0(AL, TEQ, SETFLAGS)

# register shifted by immediate with Rd == Rn
teq reg, reg, ishift		= dp_reg_immshift_D0(AL, TEQ, SETFLAGS)
teqeq reg, reg, ishift		= dp_reg_immshift_D0(EQ, TEQ, SETFLAGS)
teqne reg, reg, ishift		= dp_reg_immshift_D0(NE, TEQ, SETFLAGS)
teqcs reg, reg, ishift		= dp_reg_immshift_D0(CS, TEQ, SETFLAGS)
teqcc reg, reg, ishift		= dp_reg_immshift_D0(CC, TEQ, SETFLAGS)
teqmi reg, reg, ishift		= dp_reg_immshift_D0(MI, TEQ, SETFLAGS)
teqpl reg, reg, ishift		= dp_reg_immshift_D0(PL, TEQ, SETFLAGS)
teqvs reg, reg, ishift		= dp_reg_immshift_D0(VS, TEQ, SETFLAGS)
teqvc reg, reg, ishift		= dp_reg_immshift_D0(VC, TEQ, SETFLAGS)
teqhi reg, reg, ishift		= dp_reg_immshift_D0(HI, TEQ, SETFLAGS)
teqls reg, reg, ishift		= dp_reg_immshift_D0(LS, TEQ, SETFLAGS)
teqge reg, reg, ishift		= dp_reg_immshift_D0(GE, TEQ, SETFLAGS)
teqlt reg, reg, ishift		= dp_reg_immshift_D0(LT, TEQ, SETFLAGS)
teqgt reg, reg, ishift		= dp_reg_immshift_D0(GT, TEQ, SETFLAGS)
teqle reg, reg, ishift		= dp_reg_immshift_D0(LE, TEQ, SETFLAGS)
teqal reg, reg, ishift		= dp_reg_immshift_D0(AL, TEQ, SETFLAGS)

# register shifted by register with Rd == Rn
teq reg, reg, rshift		= dp_reg_regshift_D0(AL, TEQ, SETFLAGS)
teqeq reg, reg, rshift		= dp_reg_regshift_D0(EQ, TEQ, SETFLAGS)
teqne reg, reg, rshift		= dp_reg_regshift_D0(NE, TEQ, SETFLAGS)
teqcs reg, reg, rshift		= dp_reg_regshift_D0(CS, TEQ, SETFLAGS)
teqcc reg, reg, rshift		= dp_reg_regshift_D0(CC, TEQ, SETFLAGS)
teqmi reg, reg, rshift		= dp_reg_regshift_D0(MI, TEQ, SETFLAGS)
teqpl reg, reg, rshift		= dp_reg_regshift_D0(PL, TEQ, SETFLAGS)
teqvs reg, reg, rshift		= dp_reg_regshift_D0(VS, TEQ, SETFLAGS)
teqvc reg, reg, rshift		= dp_reg_regshift_D0(VC, TEQ, SETFLAGS)
teqhi reg, reg, rshift		= dp_reg_regshift_D0(HI, TEQ, SETFLAGS)
teqls reg, reg, rshift		= dp_reg_regshift_D0(LS, TEQ, SETFLAGS)
teqge reg, reg, rshift		= dp_reg_regshift_D0(GE, TEQ, SETFLAGS)
teqlt reg, reg, rshift		= dp_reg_regshift_D0(LT, TEQ, SETFLAGS)
teqgt reg, reg, rshift		= dp_reg_regshift_D0(GT, TEQ, SETFLAGS)
teqle reg, reg, rshift		= dp_reg_regshift_D0(LE, TEQ, SETFLAGS)
teqal reg, reg, rshift		= dp_reg_regshift_D0(AL, TEQ, SETFLAGS)

#
# LSL
# (LSL is a macro that expands to a MOV)
#

# immediate
lsl reg, reg, imm			= shift(AL, LSL, NOFLAGS)
lsleq reg, reg, imm			= shift(EQ, LSL, NOFLAGS)
lslne reg, reg, imm			= shift(NE, LSL, NOFLAGS)
lslcs reg, reg, imm			= shift(CS, LSL, NOFLAGS)
lslcc reg, reg, imm			= shift(CC, LSL, NOFLAGS)
lslmi reg, reg, imm			= shift(MI, LSL, NOFLAGS)
lslpl reg, reg, imm			= shift(PL, LSL, NOFLAGS)
lslvs reg, reg, imm			= shift(VS, LSL, NOFLAGS)
lslvc reg, reg, imm			= shift(VC, LSL, NOFLAGS)
lslhi reg, reg, imm			= shift(HI, LSL, NOFLAGS)
lslls reg, reg, imm			= shift(LS, LSL, NOFLAGS)
lslge reg, reg, imm			= shift(GE, LSL, NOFLAGS)
lsllt reg, reg, imm			= shift(LT, LSL, NOFLAGS)
lslgt reg, reg, imm			= shift(GT, LSL, NOFLAGS)
lslle reg, reg, imm			= shift(LE, LSL, NOFLAGS)
lslal reg, reg, imm			= shift(AL, LSL, NOFLAGS)

# immediate with Rd == Rn (actually it's Rm)
lsl reg, imm				= shift(AL, LSL, NOFLAGS)
lsleq reg, imm			= shift(EQ, LSL, NOFLAGS)
lslne reg, imm			= shift(NE, LSL, NOFLAGS)
lslcs reg, imm			= shift(CS, LSL, NOFLAGS)
lslcc reg, imm			= shift(CC, LSL, NOFLAGS)
lslmi reg, imm			= shift(MI, LSL, NOFLAGS)
lslpl reg, imm			= shift(PL, LSL, NOFLAGS)
lslvs reg, imm			= shift(VS, LSL, NOFLAGS)
lslvc reg, imm			= shift(VC, LSL, NOFLAGS)
lslhi reg, imm			= shift(HI, LSL, NOFLAGS)
lslls reg, imm			= shift(LS, LSL, NOFLAGS)
lslge reg, imm			= shift(GE, LSL, NOFLAGS)
lsllt reg, imm			= shift(LT, LSL, NOFLAGS)
lslgt reg, imm			= shift(GT, LSL, NOFLAGS)
lslle reg, imm			= shift(LE, LSL, NOFLAGS)
lslal reg, imm			= shift(AL, LSL, NOFLAGS)

# register
lsl reg, reg, reg			= shift(AL, LSL, NOFLAGS)
lsleq reg, reg, reg			= shift(EQ, LSL, NOFLAGS)
lslne reg, reg, reg			= shift(NE, LSL, NOFLAGS)
lslcs reg, reg, reg			= shift(CS, LSL, NOFLAGS)
lslcc reg, reg, reg			= shift(CC, LSL, NOFLAGS)
lslmi reg, reg, reg			= shift(MI, LSL, NOFLAGS)
lslpl reg, reg, reg			= shift(PL, LSL, NOFLAGS)
lslvs reg, reg, reg			= shift(VS, LSL, NOFLAGS)
lslvc reg, reg, reg			= shift(VC, LSL, NOFLAGS)
lslhi reg, reg, reg			= shift(HI, LSL, NOFLAGS)
lslls reg, reg, reg			= shift(LS, LSL, NOFLAGS)
lslge reg, reg, reg			= shift(GE, LSL, NOFLAGS)
lsllt reg, reg, reg			= shift(LT, LSL, NOFLAGS)
lslgt reg, reg, reg			= shift(GT, LSL, NOFLAGS)
lslle reg, reg, reg			= shift(LE, LSL, NOFLAGS)
lslal reg, reg, reg			= shift(AL, LSL, NOFLAGS)

# register with Rd == Rn (actually it's Rm)
lsl reg, reg				= shift(AL, LSL, NOFLAGS)
lsleq reg, reg				= shift(EQ, LSL, NOFLAGS)
lslne reg, reg				= shift(NE, LSL, NOFLAGS)
lslcs reg, reg				= shift(CS, LSL, NOFLAGS)
lslcc reg, reg				= shift(CC, LSL, NOFLAGS)
lslmi reg, reg				= shift(MI, LSL, NOFLAGS)
lslpl reg, reg				= shift(PL, LSL, NOFLAGS)
lslvs reg, reg				= shift(VS, LSL, NOFLAGS)
lslvc reg, reg				= shift(VC, LSL, NOFLAGS)
lslhi reg, reg				= shift(HI, LSL, NOFLAGS)
lslls reg, reg				= shift(LS, LSL, NOFLAGS)
lslge reg, reg				= shift(GE, LSL, NOFLAGS)
lsllt reg, reg				= shift(LT, LSL, NOFLAGS)
lslgt reg, reg				= shift(GT, LSL, NOFLAGS)
lslle reg, reg				= shift(LE, LSL, NOFLAGS)
lslal reg, reg				= shift(AL, LSL, NOFLAGS)

# immediate with setflags
lsls reg, reg, imm			= shift(AL, LSL, SETFLAGS)
lsleqs reg, reg, imm			= shift(EQ, LSL, SETFLAGS)
lslnes reg, reg, imm			= shift(NE, LSL, SETFLAGS)
lslcss reg, reg, imm			= shift(CS, LSL, SETFLAGS)
lslccs reg, reg, imm			= shift(CC, LSL, SETFLAGS)
lslmis reg, reg, imm			= shift(MI, LSL, SETFLAGS)
lslpls reg, reg, imm			= shift(PL, LSL, SETFLAGS)
lslvss reg, reg, imm			= shift(VS, LSL, SETFLAGS)
lslvcs reg, reg, imm			= shift(VC, LSL, SETFLAGS)
lslhis reg, reg, imm			= shift(HI, LSL, SETFLAGS)
lsllss reg, reg, imm			= shift(LS, LSL, SETFLAGS)
lslges reg, reg, imm			= shift(GE, LSL, SETFLAGS)
lsllts reg, reg, imm			= shift(LT, LSL, SETFLAGS)
lslgts reg, reg, imm			= shift(GT, LSL, SETFLAGS)
lslles reg, reg, imm			= shift(LE, LSL, SETFLAGS)
lslals reg, reg, imm			= shift(AL, LSL, SETFLAGS)
lslseq reg, reg, imm			= shift(EQ, LSL, SETFLAGS)
lslsne reg, reg, imm			= shift(NE, LSL, SETFLAGS)
lslscs reg, reg, imm			= shift(CS, LSL, SETFLAGS)
lslscc reg, reg, imm			= shift(CC, LSL, SETFLAGS)
lslsmi reg, reg, imm			= shift(MI, LSL, SETFLAGS)
lslspl reg, reg, imm			= shift(PL, LSL, SETFLAGS)
lslsvs reg, reg, imm			= shift(VS, LSL, SETFLAGS)
lslsvc reg, reg, imm			= shift(VC, LSL, SETFLAGS)
lslshi reg, reg, imm			= shift(HI, LSL, SETFLAGS)
lslsls reg, reg, imm			= shift(LS, LSL, SETFLAGS)
lslsge reg, reg, imm			= shift(GE, LSL, SETFLAGS)
lslslt reg, reg, imm			= shift(LT, LSL, SETFLAGS)
lslsgt reg, reg, imm			= shift(GT, LSL, SETFLAGS)
lslsle reg, reg, imm			= shift(LE, LSL, SETFLAGS)
lslsal reg, reg, imm			= shift(AL, LSL, SETFLAGS)

# immediate with setflags with Rd == Rn (actually it's Rm)
lsls reg, imm			= shift(AL, LSL, SETFLAGS)
lsleqs reg, imm			= shift(EQ, LSL, SETFLAGS)
lslnes reg, imm			= shift(NE, LSL, SETFLAGS)
lslcss reg, imm			= shift(CS, LSL, SETFLAGS)
lslccs reg, imm			= shift(CC, LSL, SETFLAGS)
lslmis reg, imm			= shift(MI, LSL, SETFLAGS)
lslpls reg, imm			= shift(PL, LSL, SETFLAGS)
lslvss reg, imm			= shift(VS, LSL, SETFLAGS)
lslvcs reg, imm			= shift(VC, LSL, SETFLAGS)
lslhis reg, imm			= shift(HI, LSL, SETFLAGS)
lsllss reg, imm			= shift(LS, LSL, SETFLAGS)
lslges reg, imm			= shift(GE, LSL, SETFLAGS)
lsllts reg, imm			= shift(LT, LSL, SETFLAGS)
lslgts reg, imm			= shift(GT, LSL, SETFLAGS)
lslles reg, imm			= shift(LE, LSL, SETFLAGS)
lslals reg, imm			= shift(AL, LSL, SETFLAGS)
lslseq reg, imm			= shift(EQ, LSL, SETFLAGS)
lslsne reg, imm			= shift(NE, LSL, SETFLAGS)
lslscs reg, imm			= shift(CS, LSL, SETFLAGS)
lslscc reg, imm			= shift(CC, LSL, SETFLAGS)
lslsmi reg, imm			= shift(MI, LSL, SETFLAGS)
lslspl reg, imm			= shift(PL, LSL, SETFLAGS)
lslsvs reg, imm			= shift(VS, LSL, SETFLAGS)
lslsvc reg, imm			= shift(VC, LSL, SETFLAGS)
lslshi reg, imm			= shift(HI, LSL, SETFLAGS)
lslsls reg, imm			= shift(LS, LSL, SETFLAGS)
lslsge reg, imm			= shift(GE, LSL, SETFLAGS)
lslslt reg, imm			= shift(LT, LSL, SETFLAGS)
lslsgt reg, imm			= shift(GT, LSL, SETFLAGS)
lslsle reg, imm			= shift(LE, LSL, SETFLAGS)
lslsal reg, imm			= shift(AL, LSL, SETFLAGS)

# register with setflags
lsls reg, reg, reg			= shift(AL, LSL, SETFLAGS)
lsleqs reg, reg, reg			= shift(EQ, LSL, SETFLAGS)
lslnes reg, reg, reg			= shift(NE, LSL, SETFLAGS)
lslcss reg, reg, reg			= shift(CS, LSL, SETFLAGS)
lslccs reg, reg, reg			= shift(CC, LSL, SETFLAGS)
lslmis reg, reg, reg			= shift(MI, LSL, SETFLAGS)
lslpls reg, reg, reg			= shift(PL, LSL, SETFLAGS)
lslvss reg, reg, reg			= shift(VS, LSL, SETFLAGS)
lslvcs reg, reg, reg			= shift(VC, LSL, SETFLAGS)
lslhis reg, reg, reg			= shift(HI, LSL, SETFLAGS)
lsllss reg, reg, reg			= shift(LS, LSL, SETFLAGS)
lslges reg, reg, reg			= shift(GE, LSL, SETFLAGS)
lsllts reg, reg, reg			= shift(LT, LSL, SETFLAGS)
lslgts reg, reg, reg			= shift(GT, LSL, SETFLAGS)
lslles reg, reg, reg			= shift(LE, LSL, SETFLAGS)
lslals reg, reg, reg			= shift(AL, LSL, SETFLAGS)
lslseq reg, reg, reg			= shift(EQ, LSL, SETFLAGS)
lslsne reg, reg, reg			= shift(NE, LSL, SETFLAGS)
lslscs reg, reg, reg			= shift(CS, LSL, SETFLAGS)
lslscc reg, reg, reg			= shift(CC, LSL, SETFLAGS)
lslsmi reg, reg, reg			= shift(MI, LSL, SETFLAGS)
lslspl reg, reg, reg			= shift(PL, LSL, SETFLAGS)
lslsvs reg, reg, reg			= shift(VS, LSL, SETFLAGS)
lslsvc reg, reg, reg			= shift(VC, LSL, SETFLAGS)
lslshi reg, reg, reg			= shift(HI, LSL, SETFLAGS)
lslsls reg, reg, reg			= shift(LS, LSL, SETFLAGS)
lslsge reg, reg, reg			= shift(GE, LSL, SETFLAGS)
lslslt reg, reg, reg			= shift(LT, LSL, SETFLAGS)
lslsgt reg, reg, reg			= shift(GT, LSL, SETFLAGS)
lslsle reg, reg, reg			= shift(LE, LSL, SETFLAGS)
lslsal reg, reg, reg			= shift(AL, LSL, SETFLAGS)

# register with setflags with Rd == Rn (actually it's Rm)
lsls reg, reg				= shift(AL, LSL, SETFLAGS)
lsleqs reg, reg				= shift(EQ, LSL, SETFLAGS)
lslnes reg, reg				= shift(NE, LSL, SETFLAGS)
lslcss reg, reg				= shift(CS, LSL, SETFLAGS)
lslccs reg, reg				= shift(CC, LSL, SETFLAGS)
lslmis reg, reg				= shift(MI, LSL, SETFLAGS)
lslpls reg, reg				= shift(PL, LSL, SETFLAGS)
lslvss reg, reg				= shift(VS, LSL, SETFLAGS)
lslvcs reg, reg				= shift(VC, LSL, SETFLAGS)
lslhis reg, reg				= shift(HI, LSL, SETFLAGS)
lsllss reg, reg				= shift(LS, LSL, SETFLAGS)
lslges reg, reg				= shift(GE, LSL, SETFLAGS)
lsllts reg, reg				= shift(LT, LSL, SETFLAGS)
lslgts reg, reg				= shift(GT, LSL, SETFLAGS)
lslles reg, reg				= shift(LE, LSL, SETFLAGS)
lslals reg, reg				= shift(AL, LSL, SETFLAGS)
lslseq reg, reg				= shift(EQ, LSL, SETFLAGS)
lslsne reg, reg				= shift(NE, LSL, SETFLAGS)
lslscs reg, reg				= shift(CS, LSL, SETFLAGS)
lslscc reg, reg				= shift(CC, LSL, SETFLAGS)
lslsmi reg, reg				= shift(MI, LSL, SETFLAGS)
lslspl reg, reg				= shift(PL, LSL, SETFLAGS)
lslsvs reg, reg				= shift(VS, LSL, SETFLAGS)
lslsvc reg, reg				= shift(VC, LSL, SETFLAGS)
lslshi reg, reg				= shift(HI, LSL, SETFLAGS)
lslsls reg, reg				= shift(LS, LSL, SETFLAGS)
lslsge reg, reg				= shift(GE, LSL, SETFLAGS)
lslslt reg, reg				= shift(LT, LSL, SETFLAGS)
lslsgt reg, reg				= shift(GT, LSL, SETFLAGS)
lslsle reg, reg				= shift(LE, LSL, SETFLAGS)
lslsal reg, reg				= shift(AL, LSL, SETFLAGS)

#
# LSR
# (LSR is a macro that expands to a MOV)
#

# immediate
lsr reg, reg, imm			= shift(AL, LSR, NOFLAGS)
lsreq reg, reg, imm			= shift(EQ, LSR, NOFLAGS)
lsrne reg, reg, imm			= shift(NE, LSR, NOFLAGS)
lsrcs reg, reg, imm			= shift(CS, LSR, NOFLAGS)
lsrcc reg, reg, imm			= shift(CC, LSR, NOFLAGS)
lsrmi reg, reg, imm			= shift(MI, LSR, NOFLAGS)
lsrpl reg, reg, imm			= shift(PL, LSR, NOFLAGS)
lsrvs reg, reg, imm			= shift(VS, LSR, NOFLAGS)
lsrvc reg, reg, imm			= shift(VC, LSR, NOFLAGS)
lsrhi reg, reg, imm			= shift(HI, LSR, NOFLAGS)
lsrls reg, reg, imm			= shift(LS, LSR, NOFLAGS)
lsrge reg, reg, imm			= shift(GE, LSR, NOFLAGS)
lsrlt reg, reg, imm			= shift(LT, LSR, NOFLAGS)
lsrgt reg, reg, imm			= shift(GT, LSR, NOFLAGS)
lsrle reg, reg, imm			= shift(LE, LSR, NOFLAGS)
lsral reg, reg, imm			= shift(AL, LSR, NOFLAGS)

# immediate with Rd == Rn (actually it's Rm)
lsr reg, imm				= shift(AL, LSR, NOFLAGS)
lsreq reg, imm			= shift(EQ, LSR, NOFLAGS)
lsrne reg, imm			= shift(NE, LSR, NOFLAGS)
lsrcs reg, imm			= shift(CS, LSR, NOFLAGS)
lsrcc reg, imm			= shift(CC, LSR, NOFLAGS)
lsrmi reg, imm			= shift(MI, LSR, NOFLAGS)
lsrpl reg, imm			= shift(PL, LSR, NOFLAGS)
lsrvs reg, imm			= shift(VS, LSR, NOFLAGS)
lsrvc reg, imm			= shift(VC, LSR, NOFLAGS)
lsrhi reg, imm			= shift(HI, LSR, NOFLAGS)
lsrls reg, imm			= shift(LS, LSR, NOFLAGS)
lsrge reg, imm			= shift(GE, LSR, NOFLAGS)
lsrlt reg, imm			= shift(LT, LSR, NOFLAGS)
lsrgt reg, imm			= shift(GT, LSR, NOFLAGS)
lsrle reg, imm			= shift(LE, LSR, NOFLAGS)
lsral reg, imm			= shift(AL, LSR, NOFLAGS)

# register
lsr reg, reg, reg			= shift(AL, LSR, NOFLAGS)
lsreq reg, reg, reg			= shift(EQ, LSR, NOFLAGS)
lsrne reg, reg, reg			= shift(NE, LSR, NOFLAGS)
lsrcs reg, reg, reg			= shift(CS, LSR, NOFLAGS)
lsrcc reg, reg, reg			= shift(CC, LSR, NOFLAGS)
lsrmi reg, reg, reg			= shift(MI, LSR, NOFLAGS)
lsrpl reg, reg, reg			= shift(PL, LSR, NOFLAGS)
lsrvs reg, reg, reg			= shift(VS, LSR, NOFLAGS)
lsrvc reg, reg, reg			= shift(VC, LSR, NOFLAGS)
lsrhi reg, reg, reg			= shift(HI, LSR, NOFLAGS)
lsrls reg, reg, reg			= shift(LS, LSR, NOFLAGS)
lsrge reg, reg, reg			= shift(GE, LSR, NOFLAGS)
lsrlt reg, reg, reg			= shift(LT, LSR, NOFLAGS)
lsrgt reg, reg, reg			= shift(GT, LSR, NOFLAGS)
lsrle reg, reg, reg			= shift(LE, LSR, NOFLAGS)
lsral reg, reg, reg			= shift(AL, LSR, NOFLAGS)

# register with Rd == Rn (actually it's Rm)
lsr reg, reg				= shift(AL, LSR, NOFLAGS)
lsreq reg, reg				= shift(EQ, LSR, NOFLAGS)
lsrne reg, reg				= shift(NE, LSR, NOFLAGS)
lsrcs reg, reg				= shift(CS, LSR, NOFLAGS)
lsrcc reg, reg				= shift(CC, LSR, NOFLAGS)
lsrmi reg, reg				= shift(MI, LSR, NOFLAGS)
lsrpl reg, reg				= shift(PL, LSR, NOFLAGS)
lsrvs reg, reg				= shift(VS, LSR, NOFLAGS)
lsrvc reg, reg				= shift(VC, LSR, NOFLAGS)
lsrhi reg, reg				= shift(HI, LSR, NOFLAGS)
lsrls reg, reg				= shift(LS, LSR, NOFLAGS)
lsrge reg, reg				= shift(GE, LSR, NOFLAGS)
lsrlt reg, reg				= shift(LT, LSR, NOFLAGS)
lsrgt reg, reg				= shift(GT, LSR, NOFLAGS)
lsrle reg, reg				= shift(LE, LSR, NOFLAGS)
lsral reg, reg				= shift(AL, LSR, NOFLAGS)

# immediate with setflags
lsrs reg, reg, imm			= shift(AL, LSR, SETFLAGS)
lsreqs reg, reg, imm			= shift(EQ, LSR, SETFLAGS)
lsrnes reg, reg, imm			= shift(NE, LSR, SETFLAGS)
lsrcss reg, reg, imm			= shift(CS, LSR, SETFLAGS)
lsrccs reg, reg, imm			= shift(CC, LSR, SETFLAGS)
lsrmis reg, reg, imm			= shift(MI, LSR, SETFLAGS)
lsrpls reg, reg, imm			= shift(PL, LSR, SETFLAGS)
lsrvss reg, reg, imm			= shift(VS, LSR, SETFLAGS)
lsrvcs reg, reg, imm			= shift(VC, LSR, SETFLAGS)
lsrhis reg, reg, imm			= shift(HI, LSR, SETFLAGS)
lsrlss reg, reg, imm			= shift(LS, LSR, SETFLAGS)
lsrges reg, reg, imm			= shift(GE, LSR, SETFLAGS)
lsrlts reg, reg, imm			= shift(LT, LSR, SETFLAGS)
lsrgts reg, reg, imm			= shift(GT, LSR, SETFLAGS)
lsrles reg, reg, imm			= shift(LE, LSR, SETFLAGS)
lsrals reg, reg, imm			= shift(AL, LSR, SETFLAGS)
lsrseq reg, reg, imm			= shift(EQ, LSR, SETFLAGS)
lsrsne reg, reg, imm			= shift(NE, LSR, SETFLAGS)
lsrscs reg, reg, imm			= shift(CS, LSR, SETFLAGS)
lsrscc reg, reg, imm			= shift(CC, LSR, SETFLAGS)
lsrsmi reg, reg, imm			= shift(MI, LSR, SETFLAGS)
lsrspl reg, reg, imm			= shift(PL, LSR, SETFLAGS)
lsrsvs reg, reg, imm			= shift(VS, LSR, SETFLAGS)
lsrsvc reg, reg, imm			= shift(VC, LSR, SETFLAGS)
lsrshi reg, reg, imm			= shift(HI, LSR, SETFLAGS)
lsrsls reg, reg, imm			= shift(LS, LSR, SETFLAGS)
lsrsge reg, reg, imm			= shift(GE, LSR, SETFLAGS)
lsrslt reg, reg, imm			= shift(LT, LSR, SETFLAGS)
lsrsgt reg, reg, imm			= shift(GT, LSR, SETFLAGS)
lsrsle reg, reg, imm			= shift(LE, LSR, SETFLAGS)
lsrsal reg, reg, imm			= shift(AL, LSR, SETFLAGS)

# immediate with setflags with Rd == Rn (actually it's Rm)
lsrs reg, imm			= shift(AL, LSR, SETFLAGS)
lsreqs reg, imm			= shift(EQ, LSR, SETFLAGS)
lsrnes reg, imm			= shift(NE, LSR, SETFLAGS)
lsrcss reg, imm			= shift(CS, LSR, SETFLAGS)
lsrccs reg, imm			= shift(CC, LSR, SETFLAGS)
lsrmis reg, imm			= shift(MI, LSR, SETFLAGS)
lsrpls reg, imm			= shift(PL, LSR, SETFLAGS)
lsrvss reg, imm			= shift(VS, LSR, SETFLAGS)
lsrvcs reg, imm			= shift(VC, LSR, SETFLAGS)
lsrhis reg, imm			= shift(HI, LSR, SETFLAGS)
lsrlss reg, imm			= shift(LS, LSR, SETFLAGS)
lsrges reg, imm			= shift(GE, LSR, SETFLAGS)
lsrlts reg, imm			= shift(LT, LSR, SETFLAGS)
lsrgts reg, imm			= shift(GT, LSR, SETFLAGS)
lsrles reg, imm			= shift(LE, LSR, SETFLAGS)
lsrals reg, imm			= shift(AL, LSR, SETFLAGS)
lsrseq reg, imm			= shift(EQ, LSR, SETFLAGS)
lsrsne reg, imm			= shift(NE, LSR, SETFLAGS)
lsrscs reg, imm			= shift(CS, LSR, SETFLAGS)
lsrscc reg, imm			= shift(CC, LSR, SETFLAGS)
lsrsmi reg, imm			= shift(MI, LSR, SETFLAGS)
lsrspl reg, imm			= shift(PL, LSR, SETFLAGS)
lsrsvs reg, imm			= shift(VS, LSR, SETFLAGS)
lsrsvc reg, imm			= shift(VC, LSR, SETFLAGS)
lsrshi reg, imm			= shift(HI, LSR, SETFLAGS)
lsrsls reg, imm			= shift(LS, LSR, SETFLAGS)
lsrsge reg, imm			= shift(GE, LSR, SETFLAGS)
lsrslt reg, imm			= shift(LT, LSR, SETFLAGS)
lsrsgt reg, imm			= shift(GT, LSR, SETFLAGS)
lsrsle reg, imm			= shift(LE, LSR, SETFLAGS)
lsrsal reg, imm			= shift(AL, LSR, SETFLAGS)

# register with setflags
lsrs reg, reg, reg			= shift(AL, LSR, SETFLAGS)
lsreqs reg, reg, reg			= shift(EQ, LSR, SETFLAGS)
lsrnes reg, reg, reg			= shift(NE, LSR, SETFLAGS)
lsrcss reg, reg, reg			= shift(CS, LSR, SETFLAGS)
lsrccs reg, reg, reg			= shift(CC, LSR, SETFLAGS)
lsrmis reg, reg, reg			= shift(MI, LSR, SETFLAGS)
lsrpls reg, reg, reg			= shift(PL, LSR, SETFLAGS)
lsrvss reg, reg, reg			= shift(VS, LSR, SETFLAGS)
lsrvcs reg, reg, reg			= shift(VC, LSR, SETFLAGS)
lsrhis reg, reg, reg			= shift(HI, LSR, SETFLAGS)
lsrlss reg, reg, reg			= shift(LS, LSR, SETFLAGS)
lsrges reg, reg, reg			= shift(GE, LSR, SETFLAGS)
lsrlts reg, reg, reg			= shift(LT, LSR, SETFLAGS)
lsrgts reg, reg, reg			= shift(GT, LSR, SETFLAGS)
lsrles reg, reg, reg			= shift(LE, LSR, SETFLAGS)
lsrals reg, reg, reg			= shift(AL, LSR, SETFLAGS)
lsrseq reg, reg, reg			= shift(EQ, LSR, SETFLAGS)
lsrsne reg, reg, reg			= shift(NE, LSR, SETFLAGS)
lsrscs reg, reg, reg			= shift(CS, LSR, SETFLAGS)
lsrscc reg, reg, reg			= shift(CC, LSR, SETFLAGS)
lsrsmi reg, reg, reg			= shift(MI, LSR, SETFLAGS)
lsrspl reg, reg, reg			= shift(PL, LSR, SETFLAGS)
lsrsvs reg, reg, reg			= shift(VS, LSR, SETFLAGS)
lsrsvc reg, reg, reg			= shift(VC, LSR, SETFLAGS)
lsrshi reg, reg, reg			= shift(HI, LSR, SETFLAGS)
lsrsls reg, reg, reg			= shift(LS, LSR, SETFLAGS)
lsrsge reg, reg, reg			= shift(GE, LSR, SETFLAGS)
lsrslt reg, reg, reg			= shift(LT, LSR, SETFLAGS)
lsrsgt reg, reg, reg			= shift(GT, LSR, SETFLAGS)
lsrsle reg, reg, reg			= shift(LE, LSR, SETFLAGS)
lsrsal reg, reg, reg			= shift(AL, LSR, SETFLAGS)

# register with setflags with Rd == Rn (actually it's Rm)
lsrs reg, reg				= shift(AL, LSR, SETFLAGS)
lsreqs reg, reg				= shift(EQ, LSR, SETFLAGS)
lsrnes reg, reg				= shift(NE, LSR, SETFLAGS)
lsrcss reg, reg				= shift(CS, LSR, SETFLAGS)
lsrccs reg, reg				= shift(CC, LSR, SETFLAGS)
lsrmis reg, reg				= shift(MI, LSR, SETFLAGS)
lsrpls reg, reg				= shift(PL, LSR, SETFLAGS)
lsrvss reg, reg				= shift(VS, LSR, SETFLAGS)
lsrvcs reg, reg				= shift(VC, LSR, SETFLAGS)
lsrhis reg, reg				= shift(HI, LSR, SETFLAGS)
lsrlss reg, reg				= shift(LS, LSR, SETFLAGS)
lsrges reg, reg				= shift(GE, LSR, SETFLAGS)
lsrlts reg, reg				= shift(LT, LSR, SETFLAGS)
lsrgts reg, reg				= shift(GT, LSR, SETFLAGS)
lsrles reg, reg				= shift(LE, LSR, SETFLAGS)
lsrals reg, reg				= shift(AL, LSR, SETFLAGS)
lsrseq reg, reg				= shift(EQ, LSR, SETFLAGS)
lsrsne reg, reg				= shift(NE, LSR, SETFLAGS)
lsrscs reg, reg				= shift(CS, LSR, SETFLAGS)
lsrscc reg, reg				= shift(CC, LSR, SETFLAGS)
lsrsmi reg, reg				= shift(MI, LSR, SETFLAGS)
lsrspl reg, reg				= shift(PL, LSR, SETFLAGS)
lsrsvs reg, reg				= shift(VS, LSR, SETFLAGS)
lsrsvc reg, reg				= shift(VC, LSR, SETFLAGS)
lsrshi reg, reg				= shift(HI, LSR, SETFLAGS)
lsrsls reg, reg				= shift(LS, LSR, SETFLAGS)
lsrsge reg, reg				= shift(GE, LSR, SETFLAGS)
lsrslt reg, reg				= shift(LT, LSR, SETFLAGS)
lsrsgt reg, reg				= shift(GT, LSR, SETFLAGS)
lsrsle reg, reg				= shift(LE, LSR, SETFLAGS)
lsrsal reg, reg				= shift(AL, LSR, SETFLAGS)

#
# ASR
# (ASR is a macro that expands to a MOV)
#

# immediate
asr reg, reg, imm			= shift(AL, ASR, NOFLAGS)
asreq reg, reg, imm			= shift(EQ, ASR, NOFLAGS)
asrne reg, reg, imm			= shift(NE, ASR, NOFLAGS)
asrcs reg, reg, imm			= shift(CS, ASR, NOFLAGS)
asrcc reg, reg, imm			= shift(CC, ASR, NOFLAGS)
asrmi reg, reg, imm			= shift(MI, ASR, NOFLAGS)
asrpl reg, reg, imm			= shift(PL, ASR, NOFLAGS)
asrvs reg, reg, imm			= shift(VS, ASR, NOFLAGS)
asrvc reg, reg, imm			= shift(VC, ASR, NOFLAGS)
asrhi reg, reg, imm			= shift(HI, ASR, NOFLAGS)
asrls reg, reg, imm			= shift(LS, ASR, NOFLAGS)
asrge reg, reg, imm			= shift(GE, ASR, NOFLAGS)
asrlt reg, reg, imm			= shift(LT, ASR, NOFLAGS)
asrgt reg, reg, imm			= shift(GT, ASR, NOFLAGS)
asrle reg, reg, imm			= shift(LE, ASR, NOFLAGS)
asral reg, reg, imm			= shift(AL, ASR, NOFLAGS)

# immediate with Rd == Rn (actually it's Rm)
asr reg, imm				= shift(AL, ASR, NOFLAGS)
asreq reg, imm			= shift(EQ, ASR, NOFLAGS)
asrne reg, imm			= shift(NE, ASR, NOFLAGS)
asrcs reg, imm			= shift(CS, ASR, NOFLAGS)
asrcc reg, imm			= shift(CC, ASR, NOFLAGS)
asrmi reg, imm			= shift(MI, ASR, NOFLAGS)
asrpl reg, imm			= shift(PL, ASR, NOFLAGS)
asrvs reg, imm			= shift(VS, ASR, NOFLAGS)
asrvc reg, imm			= shift(VC, ASR, NOFLAGS)
asrhi reg, imm			= shift(HI, ASR, NOFLAGS)
asrls reg, imm			= shift(LS, ASR, NOFLAGS)
asrge reg, imm			= shift(GE, ASR, NOFLAGS)
asrlt reg, imm			= shift(LT, ASR, NOFLAGS)
asrgt reg, imm			= shift(GT, ASR, NOFLAGS)
asrle reg, imm			= shift(LE, ASR, NOFLAGS)
asral reg, imm			= shift(AL, ASR, NOFLAGS)

# register
asr reg, reg, reg			= shift(AL, ASR, NOFLAGS)
asreq reg, reg, reg			= shift(EQ, ASR, NOFLAGS)
asrne reg, reg, reg			= shift(NE, ASR, NOFLAGS)
asrcs reg, reg, reg			= shift(CS, ASR, NOFLAGS)
asrcc reg, reg, reg			= shift(CC, ASR, NOFLAGS)
asrmi reg, reg, reg			= shift(MI, ASR, NOFLAGS)
asrpl reg, reg, reg			= shift(PL, ASR, NOFLAGS)
asrvs reg, reg, reg			= shift(VS, ASR, NOFLAGS)
asrvc reg, reg, reg			= shift(VC, ASR, NOFLAGS)
asrhi reg, reg, reg			= shift(HI, ASR, NOFLAGS)
asrls reg, reg, reg			= shift(LS, ASR, NOFLAGS)
asrge reg, reg, reg			= shift(GE, ASR, NOFLAGS)
asrlt reg, reg, reg			= shift(LT, ASR, NOFLAGS)
asrgt reg, reg, reg			= shift(GT, ASR, NOFLAGS)
asrle reg, reg, reg			= shift(LE, ASR, NOFLAGS)
asral reg, reg, reg			= shift(AL, ASR, NOFLAGS)

# register with Rd == Rn (actually it's Rm)
asr reg, reg				= shift(AL, ASR, NOFLAGS)
asreq reg, reg				= shift(EQ, ASR, NOFLAGS)
asrne reg, reg				= shift(NE, ASR, NOFLAGS)
asrcs reg, reg				= shift(CS, ASR, NOFLAGS)
asrcc reg, reg				= shift(CC, ASR, NOFLAGS)
asrmi reg, reg				= shift(MI, ASR, NOFLAGS)
asrpl reg, reg				= shift(PL, ASR, NOFLAGS)
asrvs reg, reg				= shift(VS, ASR, NOFLAGS)
asrvc reg, reg				= shift(VC, ASR, NOFLAGS)
asrhi reg, reg				= shift(HI, ASR, NOFLAGS)
asrls reg, reg				= shift(LS, ASR, NOFLAGS)
asrge reg, reg				= shift(GE, ASR, NOFLAGS)
asrlt reg, reg				= shift(LT, ASR, NOFLAGS)
asrgt reg, reg				= shift(GT, ASR, NOFLAGS)
asrle reg, reg				= shift(LE, ASR, NOFLAGS)
asral reg, reg				= shift(AL, ASR, NOFLAGS)

# immediate with setflags
asrs reg, reg, imm			= shift(AL, ASR, SETFLAGS)
asreqs reg, reg, imm			= shift(EQ, ASR, SETFLAGS)
asrnes reg, reg, imm			= shift(NE, ASR, SETFLAGS)
asrcss reg, reg, imm			= shift(CS, ASR, SETFLAGS)
asrccs reg, reg, imm			= shift(CC, ASR, SETFLAGS)
asrmis reg, reg, imm			= shift(MI, ASR, SETFLAGS)
asrpls reg, reg, imm			= shift(PL, ASR, SETFLAGS)
asrvss reg, reg, imm			= shift(VS, ASR, SETFLAGS)
asrvcs reg, reg, imm			= shift(VC, ASR, SETFLAGS)
asrhis reg, reg, imm			= shift(HI, ASR, SETFLAGS)
asrlss reg, reg, imm			= shift(LS, ASR, SETFLAGS)
asrges reg, reg, imm			= shift(GE, ASR, SETFLAGS)
asrlts reg, reg, imm			= shift(LT, ASR, SETFLAGS)
asrgts reg, reg, imm			= shift(GT, ASR, SETFLAGS)
asrles reg, reg, imm			= shift(LE, ASR, SETFLAGS)
asrals reg, reg, imm			= shift(AL, ASR, SETFLAGS)
asrseq reg, reg, imm			= shift(EQ, ASR, SETFLAGS)
asrsne reg, reg, imm			= shift(NE, ASR, SETFLAGS)
asrscs reg, reg, imm			= shift(CS, ASR, SETFLAGS)
asrscc reg, reg, imm			= shift(CC, ASR, SETFLAGS)
asrsmi reg, reg, imm			= shift(MI, ASR, SETFLAGS)
asrspl reg, reg, imm			= shift(PL, ASR, SETFLAGS)
asrsvs reg, reg, imm			= shift(VS, ASR, SETFLAGS)
asrsvc reg, reg, imm			= shift(VC, ASR, SETFLAGS)
asrshi reg, reg, imm			= shift(HI, ASR, SETFLAGS)
asrsls reg, reg, imm			= shift(LS, ASR, SETFLAGS)
asrsge reg, reg, imm			= shift(GE, ASR, SETFLAGS)
asrslt reg, reg, imm			= shift(LT, ASR, SETFLAGS)
asrsgt reg, reg, imm			= shift(GT, ASR, SETFLAGS)
asrsle reg, reg, imm			= shift(LE, ASR, SETFLAGS)
asrsal reg, reg, imm			= shift(AL, ASR, SETFLAGS)

# immediate with setflags with Rd == Rn (actually it's Rm)
asrs reg, imm			= shift(AL, ASR, SETFLAGS)
asreqs reg, imm			= shift(EQ, ASR, SETFLAGS)
asrnes reg, imm			= shift(NE, ASR, SETFLAGS)
asrcss reg, imm			= shift(CS, ASR, SETFLAGS)
asrccs reg, imm			= shift(CC, ASR, SETFLAGS)
asrmis reg, imm			= shift(MI, ASR, SETFLAGS)
asrpls reg, imm			= shift(PL, ASR, SETFLAGS)
asrvss reg, imm			= shift(VS, ASR, SETFLAGS)
asrvcs reg, imm			= shift(VC, ASR, SETFLAGS)
asrhis reg, imm			= shift(HI, ASR, SETFLAGS)
asrlss reg, imm			= shift(LS, ASR, SETFLAGS)
asrges reg, imm			= shift(GE, ASR, SETFLAGS)
asrlts reg, imm			= shift(LT, ASR, SETFLAGS)
asrgts reg, imm			= shift(GT, ASR, SETFLAGS)
asrles reg, imm			= shift(LE, ASR, SETFLAGS)
asrals reg, imm			= shift(AL, ASR, SETFLAGS)
asrseq reg, imm			= shift(EQ, ASR, SETFLAGS)
asrsne reg, imm			= shift(NE, ASR, SETFLAGS)
asrscs reg, imm			= shift(CS, ASR, SETFLAGS)
asrscc reg, imm			= shift(CC, ASR, SETFLAGS)
asrsmi reg, imm			= shift(MI, ASR, SETFLAGS)
asrspl reg, imm			= shift(PL, ASR, SETFLAGS)
asrsvs reg, imm			= shift(VS, ASR, SETFLAGS)
asrsvc reg, imm			= shift(VC, ASR, SETFLAGS)
asrshi reg, imm			= shift(HI, ASR, SETFLAGS)
asrsls reg, imm			= shift(LS, ASR, SETFLAGS)
asrsge reg, imm			= shift(GE, ASR, SETFLAGS)
asrslt reg, imm			= shift(LT, ASR, SETFLAGS)
asrsgt reg, imm			= shift(GT, ASR, SETFLAGS)
asrsle reg, imm			= shift(LE, ASR, SETFLAGS)
asrsal reg, imm			= shift(AL, ASR, SETFLAGS)

# register with setflags
asrs reg, reg, reg			= shift(AL, ASR, SETFLAGS)
asreqs reg, reg, reg			= shift(EQ, ASR, SETFLAGS)
asrnes reg, reg, reg			= shift(NE, ASR, SETFLAGS)
asrcss reg, reg, reg			= shift(CS, ASR, SETFLAGS)
asrccs reg, reg, reg			= shift(CC, ASR, SETFLAGS)
asrmis reg, reg, reg			= shift(MI, ASR, SETFLAGS)
asrpls reg, reg, reg			= shift(PL, ASR, SETFLAGS)
asrvss reg, reg, reg			= shift(VS, ASR, SETFLAGS)
asrvcs reg, reg, reg			= shift(VC, ASR, SETFLAGS)
asrhis reg, reg, reg			= shift(HI, ASR, SETFLAGS)
asrlss reg, reg, reg			= shift(LS, ASR, SETFLAGS)
asrges reg, reg, reg			= shift(GE, ASR, SETFLAGS)
asrlts reg, reg, reg			= shift(LT, ASR, SETFLAGS)
asrgts reg, reg, reg			= shift(GT, ASR, SETFLAGS)
asrles reg, reg, reg			= shift(LE, ASR, SETFLAGS)
asrals reg, reg, reg			= shift(AL, ASR, SETFLAGS)
asrseq reg, reg, reg			= shift(EQ, ASR, SETFLAGS)
asrsne reg, reg, reg			= shift(NE, ASR, SETFLAGS)
asrscs reg, reg, reg			= shift(CS, ASR, SETFLAGS)
asrscc reg, reg, reg			= shift(CC, ASR, SETFLAGS)
asrsmi reg, reg, reg			= shift(MI, ASR, SETFLAGS)
asrspl reg, reg, reg			= shift(PL, ASR, SETFLAGS)
asrsvs reg, reg, reg			= shift(VS, ASR, SETFLAGS)
asrsvc reg, reg, reg			= shift(VC, ASR, SETFLAGS)
asrshi reg, reg, reg			= shift(HI, ASR, SETFLAGS)
asrsls reg, reg, reg			= shift(LS, ASR, SETFLAGS)
asrsge reg, reg, reg			= shift(GE, ASR, SETFLAGS)
asrslt reg, reg, reg			= shift(LT, ASR, SETFLAGS)
asrsgt reg, reg, reg			= shift(GT, ASR, SETFLAGS)
asrsle reg, reg, reg			= shift(LE, ASR, SETFLAGS)
asrsal reg, reg, reg			= shift(AL, ASR, SETFLAGS)

# register with setflags with Rd == Rn (actually it's Rm)
asrs reg, reg				= shift(AL, ASR, SETFLAGS)
asreqs reg, reg				= shift(EQ, ASR, SETFLAGS)
asrnes reg, reg				= shift(NE, ASR, SETFLAGS)
asrcss reg, reg				= shift(CS, ASR, SETFLAGS)
asrccs reg, reg				= shift(CC, ASR, SETFLAGS)
asrmis reg, reg				= shift(MI, ASR, SETFLAGS)
asrpls reg, reg				= shift(PL, ASR, SETFLAGS)
asrvss reg, reg				= shift(VS, ASR, SETFLAGS)
asrvcs reg, reg				= shift(VC, ASR, SETFLAGS)
asrhis reg, reg				= shift(HI, ASR, SETFLAGS)
asrlss reg, reg				= shift(LS, ASR, SETFLAGS)
asrges reg, reg				= shift(GE, ASR, SETFLAGS)
asrlts reg, reg				= shift(LT, ASR, SETFLAGS)
asrgts reg, reg				= shift(GT, ASR, SETFLAGS)
asrles reg, reg				= shift(LE, ASR, SETFLAGS)
asrals reg, reg				= shift(AL, ASR, SETFLAGS)
asrseq reg, reg				= shift(EQ, ASR, SETFLAGS)
asrsne reg, reg				= shift(NE, ASR, SETFLAGS)
asrscs reg, reg				= shift(CS, ASR, SETFLAGS)
asrscc reg, reg				= shift(CC, ASR, SETFLAGS)
asrsmi reg, reg				= shift(MI, ASR, SETFLAGS)
asrspl reg, reg				= shift(PL, ASR, SETFLAGS)
asrsvs reg, reg				= shift(VS, ASR, SETFLAGS)
asrsvc reg, reg				= shift(VC, ASR, SETFLAGS)
asrshi reg, reg				= shift(HI, ASR, SETFLAGS)
asrsls reg, reg				= shift(LS, ASR, SETFLAGS)
asrsge reg, reg				= shift(GE, ASR, SETFLAGS)
asrslt reg, reg				= shift(LT, ASR, SETFLAGS)
asrsgt reg, reg				= shift(GT, ASR, SETFLAGS)
asrsle reg, reg				= shift(LE, ASR, SETFLAGS)
asrsal reg, reg				= shift(AL, ASR, SETFLAGS)

#
# ROR
# (ROR is a macro that expands to a MOV)
#

# immediate
ror reg, reg, imm			= shift(AL, ROR, NOFLAGS)
roreq reg, reg, imm			= shift(EQ, ROR, NOFLAGS)
rorne reg, reg, imm			= shift(NE, ROR, NOFLAGS)
rorcs reg, reg, imm			= shift(CS, ROR, NOFLAGS)
rorcc reg, reg, imm			= shift(CC, ROR, NOFLAGS)
rormi reg, reg, imm			= shift(MI, ROR, NOFLAGS)
rorpl reg, reg, imm			= shift(PL, ROR, NOFLAGS)
rorvs reg, reg, imm			= shift(VS, ROR, NOFLAGS)
rorvc reg, reg, imm			= shift(VC, ROR, NOFLAGS)
rorhi reg, reg, imm			= shift(HI, ROR, NOFLAGS)
rorls reg, reg, imm			= shift(LS, ROR, NOFLAGS)
rorge reg, reg, imm			= shift(GE, ROR, NOFLAGS)
rorlt reg, reg, imm			= shift(LT, ROR, NOFLAGS)
rorgt reg, reg, imm			= shift(GT, ROR, NOFLAGS)
rorle reg, reg, imm			= shift(LE, ROR, NOFLAGS)
roral reg, reg, imm			= shift(AL, ROR, NOFLAGS)

# immediate with Rd == Rn (actually it's Rm)
ror reg, imm				= shift(AL, ROR, NOFLAGS)
roreq reg, imm			= shift(EQ, ROR, NOFLAGS)
rorne reg, imm			= shift(NE, ROR, NOFLAGS)
rorcs reg, imm			= shift(CS, ROR, NOFLAGS)
rorcc reg, imm			= shift(CC, ROR, NOFLAGS)
rormi reg, imm			= shift(MI, ROR, NOFLAGS)
rorpl reg, imm			= shift(PL, ROR, NOFLAGS)
rorvs reg, imm			= shift(VS, ROR, NOFLAGS)
rorvc reg, imm			= shift(VC, ROR, NOFLAGS)
rorhi reg, imm			= shift(HI, ROR, NOFLAGS)
rorls reg, imm			= shift(LS, ROR, NOFLAGS)
rorge reg, imm			= shift(GE, ROR, NOFLAGS)
rorlt reg, imm			= shift(LT, ROR, NOFLAGS)
rorgt reg, imm			= shift(GT, ROR, NOFLAGS)
rorle reg, imm			= shift(LE, ROR, NOFLAGS)
roral reg, imm			= shift(AL, ROR, NOFLAGS)

# register
ror reg, reg, reg			= shift(AL, ROR, NOFLAGS)
roreq reg, reg, reg			= shift(EQ, ROR, NOFLAGS)
rorne reg, reg, reg			= shift(NE, ROR, NOFLAGS)
rorcs reg, reg, reg			= shift(CS, ROR, NOFLAGS)
rorcc reg, reg, reg			= shift(CC, ROR, NOFLAGS)
rormi reg, reg, reg			= shift(MI, ROR, NOFLAGS)
rorpl reg, reg, reg			= shift(PL, ROR, NOFLAGS)
rorvs reg, reg, reg			= shift(VS, ROR, NOFLAGS)
rorvc reg, reg, reg			= shift(VC, ROR, NOFLAGS)
rorhi reg, reg, reg			= shift(HI, ROR, NOFLAGS)
rorls reg, reg, reg			= shift(LS, ROR, NOFLAGS)
rorge reg, reg, reg			= shift(GE, ROR, NOFLAGS)
rorlt reg, reg, reg			= shift(LT, ROR, NOFLAGS)
rorgt reg, reg, reg			= shift(GT, ROR, NOFLAGS)
rorle reg, reg, reg			= shift(LE, ROR, NOFLAGS)
roral reg, reg, reg			= shift(AL, ROR, NOFLAGS)

# register with Rd == Rn (actually it's Rm)
ror reg, reg				= shift(AL, ROR, NOFLAGS)
roreq reg, reg				= shift(EQ, ROR, NOFLAGS)
rorne reg, reg				= shift(NE, ROR, NOFLAGS)
rorcs reg, reg				= shift(CS, ROR, NOFLAGS)
rorcc reg, reg				= shift(CC, ROR, NOFLAGS)
rormi reg, reg				= shift(MI, ROR, NOFLAGS)
rorpl reg, reg				= shift(PL, ROR, NOFLAGS)
rorvs reg, reg				= shift(VS, ROR, NOFLAGS)
rorvc reg, reg				= shift(VC, ROR, NOFLAGS)
rorhi reg, reg				= shift(HI, ROR, NOFLAGS)
rorls reg, reg				= shift(LS, ROR, NOFLAGS)
rorge reg, reg				= shift(GE, ROR, NOFLAGS)
rorlt reg, reg				= shift(LT, ROR, NOFLAGS)
rorgt reg, reg				= shift(GT, ROR, NOFLAGS)
rorle reg, reg				= shift(LE, ROR, NOFLAGS)
roral reg, reg				= shift(AL, ROR, NOFLAGS)

# immediate with setflags
rors reg, reg, imm			= shift(AL, ROR, SETFLAGS)
roreqs reg, reg, imm			= shift(EQ, ROR, SETFLAGS)
rornes reg, reg, imm			= shift(NE, ROR, SETFLAGS)
rorcss reg, reg, imm			= shift(CS, ROR, SETFLAGS)
rorccs reg, reg, imm			= shift(CC, ROR, SETFLAGS)
rormis reg, reg, imm			= shift(MI, ROR, SETFLAGS)
rorpls reg, reg, imm			= shift(PL, ROR, SETFLAGS)
rorvss reg, reg, imm			= shift(VS, ROR, SETFLAGS)
rorvcs reg, reg, imm			= shift(VC, ROR, SETFLAGS)
rorhis reg, reg, imm			= shift(HI, ROR, SETFLAGS)
rorlss reg, reg, imm			= shift(LS, ROR, SETFLAGS)
rorges reg, reg, imm			= shift(GE, ROR, SETFLAGS)
rorlts reg, reg, imm			= shift(LT, ROR, SETFLAGS)
rorgts reg, reg, imm			= shift(GT, ROR, SETFLAGS)
rorles reg, reg, imm			= shift(LE, ROR, SETFLAGS)
rorals reg, reg, imm			= shift(AL, ROR, SETFLAGS)
rorseq reg, reg, imm			= shift(EQ, ROR, SETFLAGS)
rorsne reg, reg, imm			= shift(NE, ROR, SETFLAGS)
rorscs reg, reg, imm			= shift(CS, ROR, SETFLAGS)
rorscc reg, reg, imm			= shift(CC, ROR, SETFLAGS)
rorsmi reg, reg, imm			= shift(MI, ROR, SETFLAGS)
rorspl reg, reg, imm			= shift(PL, ROR, SETFLAGS)
rorsvs reg, reg, imm			= shift(VS, ROR, SETFLAGS)
rorsvc reg, reg, imm			= shift(VC, ROR, SETFLAGS)
rorshi reg, reg, imm			= shift(HI, ROR, SETFLAGS)
rorsls reg, reg, imm			= shift(LS, ROR, SETFLAGS)
rorsge reg, reg, imm			= shift(GE, ROR, SETFLAGS)
rorslt reg, reg, imm			= shift(LT, ROR, SETFLAGS)
rorsgt reg, reg, imm			= shift(GT, ROR, SETFLAGS)
rorsle reg, reg, imm			= shift(LE, ROR, SETFLAGS)
rorsal reg, reg, imm			= shift(AL, ROR, SETFLAGS)

# immediate with setflags with Rd == Rn (actually it's Rm)
rors reg, imm				= shift(AL, ROR, SETFLAGS)
roreqs reg, imm			= shift(EQ, ROR, SETFLAGS)
rornes reg, imm			= shift(NE, ROR, SETFLAGS)
rorcss reg, imm			= shift(CS, ROR, SETFLAGS)
rorccs reg, imm			= shift(CC, ROR, SETFLAGS)
rormis reg, imm			= shift(MI, ROR, SETFLAGS)
rorpls reg, imm			= shift(PL, ROR, SETFLAGS)
rorvss reg, imm			= shift(VS, ROR, SETFLAGS)
rorvcs reg, imm			= shift(VC, ROR, SETFLAGS)
rorhis reg, imm			= shift(HI, ROR, SETFLAGS)
rorlss reg, imm			= shift(LS, ROR, SETFLAGS)
rorges reg, imm			= shift(GE, ROR, SETFLAGS)
rorlts reg, imm			= shift(LT, ROR, SETFLAGS)
rorgts reg, imm			= shift(GT, ROR, SETFLAGS)
rorles reg, imm			= shift(LE, ROR, SETFLAGS)
rorals reg, imm			= shift(AL, ROR, SETFLAGS)
rorseq reg, imm			= shift(EQ, ROR, SETFLAGS)
rorsne reg, imm			= shift(NE, ROR, SETFLAGS)
rorscs reg, imm			= shift(CS, ROR, SETFLAGS)
rorscc reg, imm			= shift(CC, ROR, SETFLAGS)
rorsmi reg, imm			= shift(MI, ROR, SETFLAGS)
rorspl reg, imm			= shift(PL, ROR, SETFLAGS)
rorsvs reg, imm			= shift(VS, ROR, SETFLAGS)
rorsvc reg, imm			= shift(VC, ROR, SETFLAGS)
rorshi reg, imm			= shift(HI, ROR, SETFLAGS)
rorsls reg, imm			= shift(LS, ROR, SETFLAGS)
rorsge reg, imm			= shift(GE, ROR, SETFLAGS)
rorslt reg, imm			= shift(LT, ROR, SETFLAGS)
rorsgt reg, imm			= shift(GT, ROR, SETFLAGS)
rorsle reg, imm			= shift(LE, ROR, SETFLAGS)
rorsal reg, imm			= shift(AL, ROR, SETFLAGS)

# register with setflags
rors reg, reg, reg			= shift(AL, ROR, SETFLAGS)
roreqs reg, reg, reg			= shift(EQ, ROR, SETFLAGS)
rornes reg, reg, reg			= shift(NE, ROR, SETFLAGS)
rorcss reg, reg, reg			= shift(CS, ROR, SETFLAGS)
rorccs reg, reg, reg			= shift(CC, ROR, SETFLAGS)
rormis reg, reg, reg			= shift(MI, ROR, SETFLAGS)
rorpls reg, reg, reg			= shift(PL, ROR, SETFLAGS)
rorvss reg, reg, reg			= shift(VS, ROR, SETFLAGS)
rorvcs reg, reg, reg			= shift(VC, ROR, SETFLAGS)
rorhis reg, reg, reg			= shift(HI, ROR, SETFLAGS)
rorlss reg, reg, reg			= shift(LS, ROR, SETFLAGS)
rorges reg, reg, reg			= shift(GE, ROR, SETFLAGS)
rorlts reg, reg, reg			= shift(LT, ROR, SETFLAGS)
rorgts reg, reg, reg			= shift(GT, ROR, SETFLAGS)
rorles reg, reg, reg			= shift(LE, ROR, SETFLAGS)
rorals reg, reg, reg			= shift(AL, ROR, SETFLAGS)
rorseq reg, reg, reg			= shift(EQ, ROR, SETFLAGS)
rorsne reg, reg, reg			= shift(NE, ROR, SETFLAGS)
rorscs reg, reg, reg			= shift(CS, ROR, SETFLAGS)
rorscc reg, reg, reg			= shift(CC, ROR, SETFLAGS)
rorsmi reg, reg, reg			= shift(MI, ROR, SETFLAGS)
rorspl reg, reg, reg			= shift(PL, ROR, SETFLAGS)
rorsvs reg, reg, reg			= shift(VS, ROR, SETFLAGS)
rorsvc reg, reg, reg			= shift(VC, ROR, SETFLAGS)
rorshi reg, reg, reg			= shift(HI, ROR, SETFLAGS)
rorsls reg, reg, reg			= shift(LS, ROR, SETFLAGS)
rorsge reg, reg, reg			= shift(GE, ROR, SETFLAGS)
rorslt reg, reg, reg			= shift(LT, ROR, SETFLAGS)
rorsgt reg, reg, reg			= shift(GT, ROR, SETFLAGS)
rorsle reg, reg, reg			= shift(LE, ROR, SETFLAGS)
rorsal reg, reg, reg			= shift(AL, ROR, SETFLAGS)

# register with setflags with Rd == Rn (actually it's Rm)
rors reg, reg				= shift(AL, ROR, SETFLAGS)
roreqs reg, reg				= shift(EQ, ROR, SETFLAGS)
rornes reg, reg				= shift(NE, ROR, SETFLAGS)
rorcss reg, reg				= shift(CS, ROR, SETFLAGS)
rorccs reg, reg				= shift(CC, ROR, SETFLAGS)
rormis reg, reg				= shift(MI, ROR, SETFLAGS)
rorpls reg, reg				= shift(PL, ROR, SETFLAGS)
rorvss reg, reg				= shift(VS, ROR, SETFLAGS)
rorvcs reg, reg				= shift(VC, ROR, SETFLAGS)
rorhis reg, reg				= shift(HI, ROR, SETFLAGS)
rorlss reg, reg				= shift(LS, ROR, SETFLAGS)
rorges reg, reg				= shift(GE, ROR, SETFLAGS)
rorlts reg, reg				= shift(LT, ROR, SETFLAGS)
rorgts reg, reg				= shift(GT, ROR, SETFLAGS)
rorles reg, reg				= shift(LE, ROR, SETFLAGS)
rorals reg, reg				= shift(AL, ROR, SETFLAGS)
rorseq reg, reg				= shift(EQ, ROR, SETFLAGS)
rorsne reg, reg				= shift(NE, ROR, SETFLAGS)
rorscs reg, reg				= shift(CS, ROR, SETFLAGS)
rorscc reg, reg				= shift(CC, ROR, SETFLAGS)
rorsmi reg, reg				= shift(MI, ROR, SETFLAGS)
rorspl reg, reg				= shift(PL, ROR, SETFLAGS)
rorsvs reg, reg				= shift(VS, ROR, SETFLAGS)
rorsvc reg, reg				= shift(VC, ROR, SETFLAGS)
rorshi reg, reg				= shift(HI, ROR, SETFLAGS)
rorsls reg, reg				= shift(LS, ROR, SETFLAGS)
rorsge reg, reg				= shift(GE, ROR, SETFLAGS)
rorslt reg, reg				= shift(LT, ROR, SETFLAGS)
rorsgt reg, reg				= shift(GT, ROR, SETFLAGS)
rorsle reg, reg				= shift(LE, ROR, SETFLAGS)
rorsal reg, reg				= shift(AL, ROR, SETFLAGS)

#
# ADR
# (adr is a synthetic that expands to either add or sub)
#

adr reg, expr				= loadaddr(AL)
adreq reg, expr				= loadaddr(EQ)
adrne reg, expr				= loadaddr(NE)
adrcs reg, expr				= loadaddr(CS)
adrcc reg, expr				= loadaddr(CC)
adrmi reg, expr				= loadaddr(MI)
adrpl reg, expr				= loadaddr(PL)
adrvs reg, expr				= loadaddr(VS)
adrvc reg, expr				= loadaddr(VC)
adrhi reg, expr				= loadaddr(HI)
adrls reg, expr				= loadaddr(LS)
adrge reg, expr				= loadaddr(GE)
adrlt reg, expr				= loadaddr(LT)
adrgt reg, expr				= loadaddr(GT)
adrle reg, expr				= loadaddr(LE)
adral reg, expr				= loadaddr(AL)


############################################################
#                        multiply                          #
############################################################

#
# MLA
# v6 pg. a4-66 (pdf page 216)
#

mla reg, reg, reg, reg			= mla_(AL, NOFLAGS)
mlaeq reg, reg, reg, reg		= mla_(EQ, NOFLAGS)
mlane reg, reg, reg, reg		= mla_(NE, NOFLAGS)
mlacs reg, reg, reg, reg		= mla_(CS, NOFLAGS)
mlacc reg, reg, reg, reg		= mla_(CC, NOFLAGS)
mlami reg, reg, reg, reg		= mla_(MI, NOFLAGS)
mlapl reg, reg, reg, reg		= mla_(PL, NOFLAGS)
mlavs reg, reg, reg, reg		= mla_(VS, NOFLAGS)
mlavc reg, reg, reg, reg		= mla_(VC, NOFLAGS)
mlahi reg, reg, reg, reg		= mla_(HI, NOFLAGS)
mlals reg, reg, reg, reg		= mla_(LS, NOFLAGS)
mlage reg, reg, reg, reg		= mla_(GE, NOFLAGS)
mlalt reg, reg, reg, reg		= mla_(LT, NOFLAGS)
mlagt reg, reg, reg, reg		= mla_(GT, NOFLAGS)
mlale reg, reg, reg, reg		= mla_(LE, NOFLAGS)
mlaal reg, reg, reg, reg		= mla_(AL, NOFLAGS)

mlas reg, reg, reg, reg			= mla_(AL, SETFLAGS)
mlaeqs reg, reg, reg, reg		= mla_(EQ, SETFLAGS)
mlanes reg, reg, reg, reg		= mla_(NE, SETFLAGS)
mlacss reg, reg, reg, reg		= mla_(CS, SETFLAGS)
mlaccs reg, reg, reg, reg		= mla_(CC, SETFLAGS)
mlamis reg, reg, reg, reg		= mla_(MI, SETFLAGS)
mlapls reg, reg, reg, reg		= mla_(PL, SETFLAGS)
mlavss reg, reg, reg, reg		= mla_(VS, SETFLAGS)
mlavcs reg, reg, reg, reg		= mla_(VC, SETFLAGS)
mlahis reg, reg, reg, reg		= mla_(HI, SETFLAGS)
mlalss reg, reg, reg, reg		= mla_(LS, SETFLAGS)
mlages reg, reg, reg, reg		= mla_(GE, SETFLAGS)
mlalts reg, reg, reg, reg		= mla_(LT, SETFLAGS)
mlagts reg, reg, reg, reg		= mla_(GT, SETFLAGS)
mlales reg, reg, reg, reg		= mla_(LE, SETFLAGS)
mlaals reg, reg, reg, reg		= mla_(AL, SETFLAGS)
mlaseq reg, reg, reg, reg		= mla_(EQ, SETFLAGS)
mlasne reg, reg, reg, reg		= mla_(NE, SETFLAGS)
mlascs reg, reg, reg, reg		= mla_(CS, SETFLAGS)
mlascc reg, reg, reg, reg		= mla_(CC, SETFLAGS)
mlasmi reg, reg, reg, reg		= mla_(MI, SETFLAGS)
mlaspl reg, reg, reg, reg		= mla_(PL, SETFLAGS)
mlasvs reg, reg, reg, reg		= mla_(VS, SETFLAGS)
mlasvc reg, reg, reg, reg		= mla_(VC, SETFLAGS)
mlashi reg, reg, reg, reg		= mla_(HI, SETFLAGS)
mlasls reg, reg, reg, reg		= mla_(LS, SETFLAGS)
mlasge reg, reg, reg, reg		= mla_(GE, SETFLAGS)
mlaslt reg, reg, reg, reg		= mla_(LT, SETFLAGS)
mlasgt reg, reg, reg, reg		= mla_(GT, SETFLAGS)
mlasle reg, reg, reg, reg		= mla_(LE, SETFLAGS)
mlasal reg, reg, reg, reg		= mla_(AL, SETFLAGS)

#
# MUL
# v6 pg. a4-80 (pdf page 230)
#

mul reg, reg, reg			= mul_(AL, NOFLAGS)
muleq reg, reg, reg			= mul_(EQ, NOFLAGS)
mulne reg, reg, reg			= mul_(NE, NOFLAGS)
mulcs reg, reg, reg			= mul_(CS, NOFLAGS)
mulcc reg, reg, reg			= mul_(CC, NOFLAGS)
mulmi reg, reg, reg			= mul_(MI, NOFLAGS)
mulpl reg, reg, reg			= mul_(PL, NOFLAGS)
mulvs reg, reg, reg			= mul_(VS, NOFLAGS)
mulvc reg, reg, reg			= mul_(VC, NOFLAGS)
mulhi reg, reg, reg			= mul_(HI, NOFLAGS)
mulls reg, reg, reg			= mul_(LS, NOFLAGS)
mulge reg, reg, reg			= mul_(GE, NOFLAGS)
mullt reg, reg, reg			= mul_(LT, NOFLAGS)
mulgt reg, reg, reg			= mul_(GT, NOFLAGS)
mulle reg, reg, reg			= mul_(LE, NOFLAGS)
mulal reg, reg, reg			= mul_(AL, NOFLAGS)

muls reg, reg, reg			= mul_(AL, SETFLAGS)
muleqs reg, reg, reg			= mul_(EQ, SETFLAGS)
mulnes reg, reg, reg			= mul_(NE, SETFLAGS)
mulcss reg, reg, reg			= mul_(CS, SETFLAGS)
mulccs reg, reg, reg			= mul_(CC, SETFLAGS)
mulmis reg, reg, reg			= mul_(MI, SETFLAGS)
mulpls reg, reg, reg			= mul_(PL, SETFLAGS)
mulvss reg, reg, reg			= mul_(VS, SETFLAGS)
mulvcs reg, reg, reg			= mul_(VC, SETFLAGS)
mulhis reg, reg, reg			= mul_(HI, SETFLAGS)
mullss reg, reg, reg			= mul_(LS, SETFLAGS)
mulges reg, reg, reg			= mul_(GE, SETFLAGS)
mullts reg, reg, reg			= mul_(LT, SETFLAGS)
mulgts reg, reg, reg			= mul_(GT, SETFLAGS)
mulles reg, reg, reg			= mul_(LE, SETFLAGS)
mulals reg, reg, reg			= mul_(AL, SETFLAGS)
mulseq reg, reg, reg			= mul_(EQ, SETFLAGS)
mulsne reg, reg, reg			= mul_(NE, SETFLAGS)
mulscs reg, reg, reg			= mul_(CS, SETFLAGS)
mulscc reg, reg, reg			= mul_(CC, SETFLAGS)
mulsmi reg, reg, reg			= mul_(MI, SETFLAGS)
mulspl reg, reg, reg			= mul_(PL, SETFLAGS)
mulsvs reg, reg, reg			= mul_(VS, SETFLAGS)
mulsvc reg, reg, reg			= mul_(VC, SETFLAGS)
mulshi reg, reg, reg			= mul_(HI, SETFLAGS)
mulsls reg, reg, reg			= mul_(LS, SETFLAGS)
mulsge reg, reg, reg			= mul_(GE, SETFLAGS)
mulslt reg, reg, reg			= mul_(LT, SETFLAGS)
mulsgt reg, reg, reg			= mul_(GT, SETFLAGS)
mulsle reg, reg, reg			= mul_(LE, SETFLAGS)
mulsal reg, reg, reg			= mul_(AL, SETFLAGS)

#
# SMULL
# v6 pg. a4-168 (pdf page 318)
#

smull reg, reg, reg, reg		= mulaccum(AL, SMULL, NOFLAGS)
smulleq reg, reg, reg, reg		= mulaccum(EQ, SMULL, NOFLAGS)
smullne reg, reg, reg, reg		= mulaccum(NE, SMULL, NOFLAGS)
smullcs reg, reg, reg, reg		= mulaccum(CS, SMULL, NOFLAGS)
smullcc reg, reg, reg, reg		= mulaccum(CC, SMULL, NOFLAGS)
smullmi reg, reg, reg, reg		= mulaccum(MI, SMULL, NOFLAGS)
smullpl reg, reg, reg, reg		= mulaccum(PL, SMULL, NOFLAGS)
smullvs reg, reg, reg, reg		= mulaccum(VS, SMULL, NOFLAGS)
smullvc reg, reg, reg, reg		= mulaccum(VC, SMULL, NOFLAGS)
smullhi reg, reg, reg, reg		= mulaccum(HI, SMULL, NOFLAGS)
smullls reg, reg, reg, reg		= mulaccum(LS, SMULL, NOFLAGS)
smullge reg, reg, reg, reg		= mulaccum(GE, SMULL, NOFLAGS)
smulllt reg, reg, reg, reg		= mulaccum(LT, SMULL, NOFLAGS)
smullgt reg, reg, reg, reg		= mulaccum(GT, SMULL, NOFLAGS)
smullle reg, reg, reg, reg		= mulaccum(LE, SMULL, NOFLAGS)
smullal reg, reg, reg, reg		= mulaccum(AL, SMULL, NOFLAGS)

smulls reg, reg, reg, reg		= mulaccum(AL, SMULL, SETFLAGS)
smulleqs reg, reg, reg, reg		= mulaccum(EQ, SMULL, SETFLAGS)
smullnes reg, reg, reg, reg		= mulaccum(NE, SMULL, SETFLAGS)
smullcss reg, reg, reg, reg		= mulaccum(CS, SMULL, SETFLAGS)
smullccs reg, reg, reg, reg		= mulaccum(CC, SMULL, SETFLAGS)
smullmis reg, reg, reg, reg		= mulaccum(MI, SMULL, SETFLAGS)
smullpls reg, reg, reg, reg		= mulaccum(PL, SMULL, SETFLAGS)
smullvss reg, reg, reg, reg		= mulaccum(VS, SMULL, SETFLAGS)
smullvcs reg, reg, reg, reg		= mulaccum(VC, SMULL, SETFLAGS)
smullhis reg, reg, reg, reg		= mulaccum(HI, SMULL, SETFLAGS)
smulllss reg, reg, reg, reg		= mulaccum(LS, SMULL, SETFLAGS)
smullges reg, reg, reg, reg		= mulaccum(GE, SMULL, SETFLAGS)
smulllts reg, reg, reg, reg		= mulaccum(LT, SMULL, SETFLAGS)
smullgts reg, reg, reg, reg		= mulaccum(GT, SMULL, SETFLAGS)
smullles reg, reg, reg, reg		= mulaccum(LE, SMULL, SETFLAGS)
smullals reg, reg, reg, reg		= mulaccum(AL, SMULL, SETFLAGS)
smullseq reg, reg, reg, reg		= mulaccum(EQ, SMULL, SETFLAGS)
smullsne reg, reg, reg, reg		= mulaccum(NE, SMULL, SETFLAGS)
smullscs reg, reg, reg, reg		= mulaccum(CS, SMULL, SETFLAGS)
smullscc reg, reg, reg, reg		= mulaccum(CC, SMULL, SETFLAGS)
smullsmi reg, reg, reg, reg		= mulaccum(MI, SMULL, SETFLAGS)
smullspl reg, reg, reg, reg		= mulaccum(PL, SMULL, SETFLAGS)
smullsvs reg, reg, reg, reg		= mulaccum(VS, SMULL, SETFLAGS)
smullsvc reg, reg, reg, reg		= mulaccum(VC, SMULL, SETFLAGS)
smullshi reg, reg, reg, reg		= mulaccum(HI, SMULL, SETFLAGS)
smullsls reg, reg, reg, reg		= mulaccum(LS, SMULL, SETFLAGS)
smullsge reg, reg, reg, reg		= mulaccum(GE, SMULL, SETFLAGS)
smullslt reg, reg, reg, reg		= mulaccum(LT, SMULL, SETFLAGS)
smullsgt reg, reg, reg, reg		= mulaccum(GT, SMULL, SETFLAGS)
smullsle reg, reg, reg, reg		= mulaccum(LE, SMULL, SETFLAGS)
smullsal reg, reg, reg, reg		= mulaccum(AL, SMULL, SETFLAGS)

#
# UMULL
# v6 pg. a4-251 (pdf page 401)
#

umull reg, reg, reg, reg		= mulaccum(AL, UMULL, NOFLAGS)
umulleq reg, reg, reg, reg		= mulaccum(EQ, UMULL, NOFLAGS)
umullne reg, reg, reg, reg		= mulaccum(NE, UMULL, NOFLAGS)
umullcs reg, reg, reg, reg		= mulaccum(CS, UMULL, NOFLAGS)
umullcc reg, reg, reg, reg		= mulaccum(CC, UMULL, NOFLAGS)
umullmi reg, reg, reg, reg		= mulaccum(MI, UMULL, NOFLAGS)
umullpl reg, reg, reg, reg		= mulaccum(PL, UMULL, NOFLAGS)
umullvs reg, reg, reg, reg		= mulaccum(VS, UMULL, NOFLAGS)
umullvc reg, reg, reg, reg		= mulaccum(VC, UMULL, NOFLAGS)
umullhi reg, reg, reg, reg		= mulaccum(HI, UMULL, NOFLAGS)
umullls reg, reg, reg, reg		= mulaccum(LS, UMULL, NOFLAGS)
umullge reg, reg, reg, reg		= mulaccum(GE, UMULL, NOFLAGS)
umulllt reg, reg, reg, reg		= mulaccum(LT, UMULL, NOFLAGS)
umullgt reg, reg, reg, reg		= mulaccum(GT, UMULL, NOFLAGS)
umullle reg, reg, reg, reg		= mulaccum(LE, UMULL, NOFLAGS)
umullal reg, reg, reg, reg		= mulaccum(AL, UMULL, NOFLAGS)

umulls reg, reg, reg, reg		= mulaccum(AL, UMULL, SETFLAGS)
umulleqs reg, reg, reg, reg		= mulaccum(EQ, UMULL, SETFLAGS)
umullnes reg, reg, reg, reg		= mulaccum(NE, UMULL, SETFLAGS)
umullcss reg, reg, reg, reg		= mulaccum(CS, UMULL, SETFLAGS)
umullccs reg, reg, reg, reg		= mulaccum(CC, UMULL, SETFLAGS)
umullmis reg, reg, reg, reg		= mulaccum(MI, UMULL, SETFLAGS)
umullpls reg, reg, reg, reg		= mulaccum(PL, UMULL, SETFLAGS)
umullvss reg, reg, reg, reg		= mulaccum(VS, UMULL, SETFLAGS)
umullvcs reg, reg, reg, reg		= mulaccum(VC, UMULL, SETFLAGS)
umullhis reg, reg, reg, reg		= mulaccum(HI, UMULL, SETFLAGS)
umulllss reg, reg, reg, reg		= mulaccum(LS, UMULL, SETFLAGS)
umullges reg, reg, reg, reg		= mulaccum(GE, UMULL, SETFLAGS)
umulllts reg, reg, reg, reg		= mulaccum(LT, UMULL, SETFLAGS)
umullgts reg, reg, reg, reg		= mulaccum(GT, UMULL, SETFLAGS)
umullles reg, reg, reg, reg		= mulaccum(LE, UMULL, SETFLAGS)
umullals reg, reg, reg, reg		= mulaccum(AL, UMULL, SETFLAGS)
umullseq reg, reg, reg, reg		= mulaccum(EQ, UMULL, SETFLAGS)
umullsne reg, reg, reg, reg		= mulaccum(NE, UMULL, SETFLAGS)
umullscs reg, reg, reg, reg		= mulaccum(CS, UMULL, SETFLAGS)
umullscc reg, reg, reg, reg		= mulaccum(CC, UMULL, SETFLAGS)
umullsmi reg, reg, reg, reg		= mulaccum(MI, UMULL, SETFLAGS)
umullspl reg, reg, reg, reg		= mulaccum(PL, UMULL, SETFLAGS)
umullsvs reg, reg, reg, reg		= mulaccum(VS, UMULL, SETFLAGS)
umullsvc reg, reg, reg, reg		= mulaccum(VC, UMULL, SETFLAGS)
umullshi reg, reg, reg, reg		= mulaccum(HI, UMULL, SETFLAGS)
umullsls reg, reg, reg, reg		= mulaccum(LS, UMULL, SETFLAGS)
umullsge reg, reg, reg, reg		= mulaccum(GE, UMULL, SETFLAGS)
umullslt reg, reg, reg, reg		= mulaccum(LT, UMULL, SETFLAGS)
umullsgt reg, reg, reg, reg		= mulaccum(GT, UMULL, SETFLAGS)
umullsle reg, reg, reg, reg		= mulaccum(LE, UMULL, SETFLAGS)
umullsal reg, reg, reg, reg		= mulaccum(AL, UMULL, SETFLAGS)

#
# SMLAL
# v6 pg. a4-146 (pdf page 296)
#

smlal reg, reg, reg, reg		= mulaccum(AL, SMLAL, NOFLAGS)
smlaleq reg, reg, reg, reg		= mulaccum(EQ, SMLAL, NOFLAGS)
smlalne reg, reg, reg, reg		= mulaccum(NE, SMLAL, NOFLAGS)
smlalcs reg, reg, reg, reg		= mulaccum(CS, SMLAL, NOFLAGS)
smlalcc reg, reg, reg, reg		= mulaccum(CC, SMLAL, NOFLAGS)
smlalmi reg, reg, reg, reg		= mulaccum(MI, SMLAL, NOFLAGS)
smlalpl reg, reg, reg, reg		= mulaccum(PL, SMLAL, NOFLAGS)
smlalvs reg, reg, reg, reg		= mulaccum(VS, SMLAL, NOFLAGS)
smlalvc reg, reg, reg, reg		= mulaccum(VC, SMLAL, NOFLAGS)
smlalhi reg, reg, reg, reg		= mulaccum(HI, SMLAL, NOFLAGS)
smlalls reg, reg, reg, reg		= mulaccum(LS, SMLAL, NOFLAGS)
smlalge reg, reg, reg, reg		= mulaccum(GE, SMLAL, NOFLAGS)
smlallt reg, reg, reg, reg		= mulaccum(LT, SMLAL, NOFLAGS)
smlalgt reg, reg, reg, reg		= mulaccum(GT, SMLAL, NOFLAGS)
smlalle reg, reg, reg, reg		= mulaccum(LE, SMLAL, NOFLAGS)
smlalal reg, reg, reg, reg		= mulaccum(AL, SMLAL, NOFLAGS)

smlals reg, reg, reg, reg		= mulaccum(AL, SMLAL, SETFLAGS)
smlalseq reg, reg, reg, reg		= mulaccum(EQ, SMLAL, SETFLAGS)
smlalsne reg, reg, reg, reg		= mulaccum(NE, SMLAL, SETFLAGS)
smlalscs reg, reg, reg, reg		= mulaccum(CS, SMLAL, SETFLAGS)
smlalscc reg, reg, reg, reg		= mulaccum(CC, SMLAL, SETFLAGS)
smlalsmi reg, reg, reg, reg		= mulaccum(MI, SMLAL, SETFLAGS)
smlalspl reg, reg, reg, reg		= mulaccum(PL, SMLAL, SETFLAGS)
smlalsvs reg, reg, reg, reg		= mulaccum(VS, SMLAL, SETFLAGS)
smlalsvc reg, reg, reg, reg		= mulaccum(VC, SMLAL, SETFLAGS)
smlalshi reg, reg, reg, reg		= mulaccum(HI, SMLAL, SETFLAGS)
smlalsls reg, reg, reg, reg		= mulaccum(LS, SMLAL, SETFLAGS)
smlalsge reg, reg, reg, reg		= mulaccum(GE, SMLAL, SETFLAGS)
smlalslt reg, reg, reg, reg		= mulaccum(LT, SMLAL, SETFLAGS)
smlalsgt reg, reg, reg, reg		= mulaccum(GT, SMLAL, SETFLAGS)
smlalsle reg, reg, reg, reg		= mulaccum(LE, SMLAL, SETFLAGS)
smlalsal reg, reg, reg, reg		= mulaccum(AL, SMLAL, SETFLAGS)
smlaleqs reg, reg, reg, reg		= mulaccum(EQ, SMLAL, SETFLAGS)
smlalnes reg, reg, reg, reg		= mulaccum(NE, SMLAL, SETFLAGS)
smlalcss reg, reg, reg, reg		= mulaccum(CS, SMLAL, SETFLAGS)
smlalccs reg, reg, reg, reg		= mulaccum(CC, SMLAL, SETFLAGS)
smlalmis reg, reg, reg, reg		= mulaccum(MI, SMLAL, SETFLAGS)
smlalpls reg, reg, reg, reg		= mulaccum(PL, SMLAL, SETFLAGS)
smlalvss reg, reg, reg, reg		= mulaccum(VS, SMLAL, SETFLAGS)
smlalvcs reg, reg, reg, reg		= mulaccum(VC, SMLAL, SETFLAGS)
smlalhis reg, reg, reg, reg		= mulaccum(HI, SMLAL, SETFLAGS)
smlallss reg, reg, reg, reg		= mulaccum(LS, SMLAL, SETFLAGS)
smlalges reg, reg, reg, reg		= mulaccum(GE, SMLAL, SETFLAGS)
smlallts reg, reg, reg, reg		= mulaccum(LT, SMLAL, SETFLAGS)
smlalgts reg, reg, reg, reg		= mulaccum(GT, SMLAL, SETFLAGS)
smlalles reg, reg, reg, reg		= mulaccum(LE, SMLAL, SETFLAGS)
smlalals reg, reg, reg, reg		= mulaccum(AL, SMLAL, SETFLAGS)
#......

#
# UMLAL
#

umlal reg, reg, reg, reg		= mulaccum(AL, UMLAL, NOFLAGS)
umlaleq reg, reg, reg, reg		= mulaccum(EQ, UMLAL, NOFLAGS)
umlalne reg, reg, reg, reg		= mulaccum(NE, UMLAL, NOFLAGS)
umlalcs reg, reg, reg, reg		= mulaccum(CS, UMLAL, NOFLAGS)
umlalcc reg, reg, reg, reg		= mulaccum(CC, UMLAL, NOFLAGS)
umlalmi reg, reg, reg, reg		= mulaccum(MI, UMLAL, NOFLAGS)
umlalpl reg, reg, reg, reg		= mulaccum(PL, UMLAL, NOFLAGS)
umlalvs reg, reg, reg, reg		= mulaccum(VS, UMLAL, NOFLAGS)
umlalvc reg, reg, reg, reg		= mulaccum(VC, UMLAL, NOFLAGS)
umlalhi reg, reg, reg, reg		= mulaccum(HI, UMLAL, NOFLAGS)
umlalls reg, reg, reg, reg		= mulaccum(LS, UMLAL, NOFLAGS)
umlalge reg, reg, reg, reg		= mulaccum(GE, UMLAL, NOFLAGS)
umlallt reg, reg, reg, reg		= mulaccum(LT, UMLAL, NOFLAGS)
umlalgt reg, reg, reg, reg		= mulaccum(GT, UMLAL, NOFLAGS)
umlalle reg, reg, reg, reg		= mulaccum(LE, UMLAL, NOFLAGS)
umlalal reg, reg, reg, reg		= mulaccum(AL, UMLAL, NOFLAGS)

umlals reg, reg, reg, reg		= mulaccum(AL, UMLAL, SETFLAGS)
umlaleqs reg, reg, reg, reg		= mulaccum(EQ, UMLAL, SETFLAGS)
umlalnes reg, reg, reg, reg		= mulaccum(NE, UMLAL, SETFLAGS)
umlalcss reg, reg, reg, reg		= mulaccum(CS, UMLAL, SETFLAGS)
umlalccs reg, reg, reg, reg		= mulaccum(CC, UMLAL, SETFLAGS)
umlalmis reg, reg, reg, reg		= mulaccum(MI, UMLAL, SETFLAGS)
umlalpls reg, reg, reg, reg		= mulaccum(PL, UMLAL, SETFLAGS)
umlalvss reg, reg, reg, reg		= mulaccum(VS, UMLAL, SETFLAGS)
umlalvcs reg, reg, reg, reg		= mulaccum(VC, UMLAL, SETFLAGS)
umlalhis reg, reg, reg, reg		= mulaccum(HI, UMLAL, SETFLAGS)
umlallss reg, reg, reg, reg		= mulaccum(LS, UMLAL, SETFLAGS)
umlalges reg, reg, reg, reg		= mulaccum(GE, UMLAL, SETFLAGS)
umlallts reg, reg, reg, reg		= mulaccum(LT, UMLAL, SETFLAGS)
umlalgts reg, reg, reg, reg		= mulaccum(GT, UMLAL, SETFLAGS)
umlalles reg, reg, reg, reg		= mulaccum(LE, UMLAL, SETFLAGS)
umlalals reg, reg, reg, reg		= mulaccum(AL, UMLAL, SETFLAGS)
umlalseq reg, reg, reg, reg		= mulaccum(EQ, UMLAL, SETFLAGS)
umlalsne reg, reg, reg, reg		= mulaccum(NE, UMLAL, SETFLAGS)
umlalscs reg, reg, reg, reg		= mulaccum(CS, UMLAL, SETFLAGS)
umlalscc reg, reg, reg, reg		= mulaccum(CC, UMLAL, SETFLAGS)
umlalsmi reg, reg, reg, reg		= mulaccum(MI, UMLAL, SETFLAGS)
umlalspl reg, reg, reg, reg		= mulaccum(PL, UMLAL, SETFLAGS)
umlalsvs reg, reg, reg, reg		= mulaccum(VS, UMLAL, SETFLAGS)
umlalsvc reg, reg, reg, reg		= mulaccum(VC, UMLAL, SETFLAGS)
umlalshi reg, reg, reg, reg		= mulaccum(HI, UMLAL, SETFLAGS)
umlalsls reg, reg, reg, reg		= mulaccum(LS, UMLAL, SETFLAGS)
umlalsge reg, reg, reg, reg		= mulaccum(GE, UMLAL, SETFLAGS)
umlalslt reg, reg, reg, reg		= mulaccum(LT, UMLAL, SETFLAGS)
umlalsgt reg, reg, reg, reg		= mulaccum(GT, UMLAL, SETFLAGS)
umlalsle reg, reg, reg, reg		= mulaccum(LE, UMLAL, SETFLAGS)
umlalsal reg, reg, reg, reg		= mulaccum(AL, UMLAL, SETFLAGS)

#
# SMLA{BT}{BT}
# v6 pg. a4-141 (pdf page 291)
#

#smlabb reg, reg, reg, reg
#smlabbal reg, reg, reg, reg
#...

#smlabt reg, reg, reg, reg
#smlabtal reg, reg, reg, reg
#...

#smlatb reg, reg, reg, reg
#smlatbal reg, reg, reg, reg
#...

#smlatt reg, reg, reg, reg
#smlattal reg, reg, reg, reg
#...

#
# SMLAL{BT}{BT}
# v6 pg. a4-148 (pdf page 298)
#

#smlalbb reg, reg, reg, reg
#smlalbbal reg, reg, reg, reg
#...

#smlalbt reg, reg, reg, reg
#smlalbtal reg, reg, reg, reg
#...

#smlaltb reg, reg, reg, reg
#smlaltbal reg, reg, reg, reg
#...

#smlaltt reg, reg, reg, reg
#smlalttal reg, reg, reg, reg
#...

#
# SMLAD
# SMLALD
#

#smlad reg, reg, reg, reg
#smladal reg, reg, reg, reg
#...

#smladx reg, reg, reg, reg
#smladxal reg, reg, reg, reg
#...

#smlald reg, reg, reg, reg
#smlaldal reg, reg, reg, reg
#...

#smlaldx reg, reg, reg, reg
#smlaldxal reg, reg, reg, reg
#...

#
# SMLAW{BT}
#

#smlawb reg, reg, reg, reg
#smlawbal reg, reg, reg, reg
#...

#smlawt reg, reg, reg, reg
#smlawtal reg, reg, reg, reg
#...

#
# SMLSD
# SMLSLD
#

#smlsd reg, reg, reg, reg
#smlsdal reg, reg, reg, reg
#...

#smlsdx reg, reg, reg, reg
#smlsdxal reg, reg, reg, reg
#...

#smlsld reg, reg, reg, reg
#smlsldal reg, reg, reg, reg
#...

#smlsldx reg, reg, reg, reg
#smlsldxal reg, reg, reg, reg
#...

#
# SMMLA
#

#smmla reg, reg, reg, reg
#smmlaal reg, reg, reg, reg
#...

#smmlar reg, reg, reg, reg
#smmlaral reg, reg, reg, reg
#...

#
# SMMLS
#

#smmls reg, reg, reg, reg
#smmlsal reg, reg, reg, reg
#...

#smmlsr reg, reg, reg, reg
#smmlsral reg, reg, reg, reg
#...

#
# SMMUL
#

#smmul reg, reg, reg
#smmulal reg, reg, reg
#...

#smmulr reg, reg, reg
#smmulral reg, reg, reg
#...

#
# SMUAD
#

#smuad reg, reg, reg
#smuadal reg, reg, reg
#...

#smuadx reg, reg, reg
#smuadxal reg, reg, reg
#...

#
# SMUSD
#

#smusd reg, reg, reg
#smusdal reg, reg, reg
#...

#smusdx reg, reg, reg
#smusdxal reg, reg, reg
#...

#
# SMUL{BT}{BT}
#

#smulbb reg, reg, reg
#smulbbal reg, reg, reg
#...

#smulbt reg, reg, reg
#smulbtal reg, reg, reg
#...

#smultb reg, reg, reg
#smultbal reg, reg, reg
#...

#smultt reg, reg, reg
#smulttal reg, reg, reg
#...

#
# SMULW{BT}
#

#smulwb reg, reg, reg
#smulwbal reg, reg, reg
#...

#smulwt reg, reg, reg
#smulwtal reg, reg, reg
#...

#
# UMAAL
#

umaal reg, reg, reg, reg		= umaal_(AL)
umaaleq reg, reg, reg, reg		= umaal_(EQ)
umaalne reg, reg, reg, reg		= umaal_(NE)
umaalcs reg, reg, reg, reg		= umaal_(CS)
umaalcc reg, reg, reg, reg		= umaal_(CC)
umaalmi reg, reg, reg, reg		= umaal_(MI)
umaalpl reg, reg, reg, reg		= umaal_(PL)
umaalvs reg, reg, reg, reg		= umaal_(VS)
umaalvc reg, reg, reg, reg		= umaal_(VC)
umaalhi reg, reg, reg, reg		= umaal_(HI)
umaalls reg, reg, reg, reg		= umaal_(LS)
umaalge reg, reg, reg, reg		= umaal_(GE)
umaallt reg, reg, reg, reg		= umaal_(LT)
umaalgt reg, reg, reg, reg		= umaal_(GT)
umaalle reg, reg, reg, reg		= umaal_(LE)
umaalal reg, reg, reg, reg		= umaal_(AL)


############################################################
#                         vector                           #
############################################################

#qadd reg, reg, reg
#qaddal reg, reg, reg
#...

#qadd8 reg, reg, reg
#qadd8al reg, reg, reg
#...

#qadd16 reg, reg, reg
#qadd16al reg, reg, reg
#...

#qsub reg, reg, reg
#qsubal reg, reg, reg
#...

#qsub8 reg, reg, reg
#qsub8al reg, reg, reg
#...

#qsub16 reg, reg, reg
#qsub16al reg, reg, reg
#...

#qaddsubx reg, reg, reg
#qaddsubxal reg, reg, reg
#...

#qsubaddx reg, reg, reg
#qsubaddxal reg, reg, reg
#...

#qdadd reg, reg, reg
#qdaddal reg, reg, reg
#...

#qdsub reg, reg, reg
#qdsubal reg, reg, reg
#...

#uqadd reg, reg, reg
#uqaddal reg, reg, reg
#...

#uqadd8 reg, reg, reg
#uqadd8al reg, reg, reg
#...

#uqadd16 reg, reg, reg
#uqadd16al reg, reg, reg
#...

#uqsub reg, reg, reg
#uqsubal reg, reg, reg
#...

#uqsub8 reg, reg, reg
#uqsub8al reg, reg, reg
#...

#uqsub16 reg, reg, reg
#uqsub16al reg, reg, reg
#...

#uqaddsubx reg, reg, reg
#uqaddsubxal reg, reg, reg
#...

#uqsubaddx reg, reg, reg
#uqsubaddxal reg, reg, reg
#...

#uqdadd reg, reg, reg
#uqdaddal reg, reg, reg
#...

#uqdsub reg, reg, reg
#uqdsubal reg, reg, reg
#...

#sadd8 reg, reg, reg
#sadd8al reg, reg, reg
# ...

#sadd16 reg, reg, reg
#sadd16al reg, reg, reg
# ...

#ssub8 reg, reg, reg
#ssub8al reg, reg, reg
#...

#ssub16 reg, reg, reg
#ssub16al reg, reg, reg
#...

#saddsubx reg, reg, reg
#saddsubxal reg, reg, reg
#...

#ssubaddx reg, reg, reg
#ssubaddxal reg, reg, reg
#...

#shadd8 reg, reg, reg
#shadd8al reg, reg, reg
#...

#shadd16 reg, reg, reg
#shadd16al reg, reg, reg
#...

#shsub8 reg, reg, reg
#shsub8al reg, reg, reg
#...

#shsub16 reg, reg, reg
#shsub16al reg, reg, reg
#...

#shaddsubx reg, reg, reg
#shaddsubxal reg, reg, reg
#...

#shsubaddx reg, reg, reg
#shsubaddxal reg, reg, reg
#...

#uadd8 reg, reg, reg
#uadd8al reg, reg, reg
# ...

#uadd16 reg, reg, reg
#uadd16al reg, reg, reg
# ...

#usub8 reg, reg, reg
#usub8al reg, reg, reg
#...

#usub16 reg, reg, reg
#usub16al reg, reg, reg
#...

#uaddsubx reg, reg, reg
#uaddsubxal reg, reg, reg
#...

#usubaddx reg, reg, reg
#usubaddxal reg, reg, reg
#...

#uhadd8 reg, reg, reg
#uhadd8al reg, reg, reg
#...

#uhadd16 reg, reg, reg
#uhadd16al reg, reg, reg
#...

#uhsub8 reg, reg, reg
#uhsub8al reg, reg, reg
#...

#uhsub16 reg, reg, reg
#uhsub16al reg, reg, reg
#...

#uhaddsubx reg, reg, reg
#uhaddsubxal reg, reg, reg
#...

#uhsubaddx reg, reg, reg
#uhsubaddxal reg, reg, reg
#...

#usad8 reg, reg, reg
#usad8al reg, reg, reg
#...

#usada8 reg, reg, reg
#usada8al reg, reg, reg
#...

#ssat reg, imm, reg
#ssatal reg, imm, reg
#...

# note: shift must be LSL or ASR, and ASR #32 is encoded with 0.
#ssat reg, imm, reg, ishift
#ssatal reg, imm, reg, ishift
#...

#ssat16 rd, imm, reg
#ssat16al rd, imm, reg
#...

#usat reg, imm, reg
#usatal reg, imm, reg
#...

# note: shift must be LSL or ASR, and ASR #32 is encoded with 0.
#usat reg, imm, reg, ishift
#usatal reg, imm, reg, ishift
#...

#usat16 rd, imm, reg
#usat16al rd, imm, reg
#...

#sel reg, reg, reg
#selal reg, reg, reg
#...

############################################################
#                       load/store                         #
############################################################

#
# PLD
# v6 pg. a4-90 (pdf page 240)
# Addressing Mode 2 on v6 page a5-18
# but restricted to offset forms (neither preindexed nor postindexed)
#

#pld am2imm
#pld am2reg

#
# LDR
# v6 pg. a4-43 (pdf page 193)
# Addressing Mode 2 on v6 page a5-18
#

ldr reg, am2imm				= lsimm(AL, LSWORD, LOAD)
ldreq reg, am2imm			= lsimm(EQ, LSWORD, LOAD)
ldrne reg, am2imm			= lsimm(NE, LSWORD, LOAD)
ldrcs reg, am2imm			= lsimm(CS, LSWORD, LOAD)
ldrcc reg, am2imm			= lsimm(CC, LSWORD, LOAD)
ldrmi reg, am2imm			= lsimm(MI, LSWORD, LOAD)
ldrpl reg, am2imm			= lsimm(PL, LSWORD, LOAD)
ldrvs reg, am2imm			= lsimm(VS, LSWORD, LOAD)
ldrvc reg, am2imm			= lsimm(VC, LSWORD, LOAD)
ldrhi reg, am2imm			= lsimm(HI, LSWORD, LOAD)
ldrls reg, am2imm			= lsimm(LS, LSWORD, LOAD)
ldrge reg, am2imm			= lsimm(GE, LSWORD, LOAD)
ldrlt reg, am2imm			= lsimm(LT, LSWORD, LOAD)
ldrgt reg, am2imm			= lsimm(GT, LSWORD, LOAD)
ldrle reg, am2imm			= lsimm(LE, LSWORD, LOAD)
ldral reg, am2imm			= lsimm(AL, LSWORD, LOAD)

ldr reg, am2reg				= lsreg(AL, LSWORD, LOAD)
ldreq reg, am2reg			= lsreg(EQ, LSWORD, LOAD)
ldrne reg, am2reg			= lsreg(NE, LSWORD, LOAD)
ldrcs reg, am2reg			= lsreg(CS, LSWORD, LOAD)
ldrcc reg, am2reg			= lsreg(CC, LSWORD, LOAD)
ldrmi reg, am2reg			= lsreg(MI, LSWORD, LOAD)
ldrpl reg, am2reg			= lsreg(PL, LSWORD, LOAD)
ldrvs reg, am2reg			= lsreg(VS, LSWORD, LOAD)
ldrvc reg, am2reg			= lsreg(VC, LSWORD, LOAD)
ldrhi reg, am2reg			= lsreg(HI, LSWORD, LOAD)
ldrls reg, am2reg			= lsreg(LS, LSWORD, LOAD)
ldrge reg, am2reg			= lsreg(GE, LSWORD, LOAD)
ldrlt reg, am2reg			= lsreg(LT, LSWORD, LOAD)
ldrgt reg, am2reg			= lsreg(GT, LSWORD, LOAD)
ldrle reg, am2reg			= lsreg(LE, LSWORD, LOAD)
ldral reg, am2reg			= lsreg(AL, LSWORD, LOAD)

ldr reg, bracketreg, signedimm12	= lsimm(AL, LSWORD, LOAD)
ldreq reg, bracketreg, signedimm12	= lsimm(EQ, LSWORD, LOAD)
ldrne reg, bracketreg, signedimm12	= lsimm(NE, LSWORD, LOAD)
ldrcs reg, bracketreg, signedimm12	= lsimm(CS, LSWORD, LOAD)
ldrcc reg, bracketreg, signedimm12	= lsimm(CC, LSWORD, LOAD)
ldrmi reg, bracketreg, signedimm12	= lsimm(MI, LSWORD, LOAD)
ldrpl reg, bracketreg, signedimm12	= lsimm(PL, LSWORD, LOAD)
ldrvs reg, bracketreg, signedimm12	= lsimm(VS, LSWORD, LOAD)
ldrvc reg, bracketreg, signedimm12	= lsimm(VC, LSWORD, LOAD)
ldrhi reg, bracketreg, signedimm12	= lsimm(HI, LSWORD, LOAD)
ldrls reg, bracketreg, signedimm12	= lsimm(LS, LSWORD, LOAD)
ldrge reg, bracketreg, signedimm12	= lsimm(GE, LSWORD, LOAD)
ldrlt reg, bracketreg, signedimm12	= lsimm(LT, LSWORD, LOAD)
ldrgt reg, bracketreg, signedimm12	= lsimm(GT, LSWORD, LOAD)
ldrle reg, bracketreg, signedimm12	= lsimm(LE, LSWORD, LOAD)
ldral reg, bracketreg, signedimm12	= lsimm(AL, LSWORD, LOAD)

ldr reg, bracketreg, signedreg		= lsreg(AL, LSWORD, LOAD)
ldreq reg, bracketreg, signedreg	= lsreg(EQ, LSWORD, LOAD)
ldrne reg, bracketreg, signedreg	= lsreg(NE, LSWORD, LOAD)
ldrcs reg, bracketreg, signedreg	= lsreg(CS, LSWORD, LOAD)
ldrcc reg, bracketreg, signedreg	= lsreg(CC, LSWORD, LOAD)
ldrmi reg, bracketreg, signedreg	= lsreg(MI, LSWORD, LOAD)
ldrpl reg, bracketreg, signedreg	= lsreg(PL, LSWORD, LOAD)
ldrvs reg, bracketreg, signedreg	= lsreg(VS, LSWORD, LOAD)
ldrvc reg, bracketreg, signedreg	= lsreg(VC, LSWORD, LOAD)
ldrhi reg, bracketreg, signedreg	= lsreg(HI, LSWORD, LOAD)
ldrls reg, bracketreg, signedreg	= lsreg(LS, LSWORD, LOAD)
ldrge reg, bracketreg, signedreg	= lsreg(GE, LSWORD, LOAD)
ldrlt reg, bracketreg, signedreg	= lsreg(LT, LSWORD, LOAD)
ldrgt reg, bracketreg, signedreg	= lsreg(GT, LSWORD, LOAD)
ldrle reg, bracketreg, signedreg	= lsreg(LE, LSWORD, LOAD)
ldral reg, bracketreg, signedreg	= lsreg(AL, LSWORD, LOAD)

ldr reg, bracketreg, signedreg, ishift	= lsreg(AL, LSWORD, LOAD)
ldreq reg, bracketreg, signedreg, ishift= lsreg(EQ, LSWORD, LOAD)
ldrne reg, bracketreg, signedreg, ishift= lsreg(NE, LSWORD, LOAD)
ldrcs reg, bracketreg, signedreg, ishift= lsreg(CS, LSWORD, LOAD)
ldrcc reg, bracketreg, signedreg, ishift= lsreg(CC, LSWORD, LOAD)
ldrmi reg, bracketreg, signedreg, ishift= lsreg(MI, LSWORD, LOAD)
ldrpl reg, bracketreg, signedreg, ishift= lsreg(PL, LSWORD, LOAD)
ldrvs reg, bracketreg, signedreg, ishift= lsreg(VS, LSWORD, LOAD)
ldrvc reg, bracketreg, signedreg, ishift= lsreg(VC, LSWORD, LOAD)
ldrhi reg, bracketreg, signedreg, ishift= lsreg(HI, LSWORD, LOAD)
ldrls reg, bracketreg, signedreg, ishift= lsreg(LS, LSWORD, LOAD)
ldrge reg, bracketreg, signedreg, ishift= lsreg(GE, LSWORD, LOAD)
ldrlt reg, bracketreg, signedreg, ishift= lsreg(LT, LSWORD, LOAD)
ldrgt reg, bracketreg, signedreg, ishift= lsreg(GT, LSWORD, LOAD)
ldrle reg, bracketreg, signedreg, ishift= lsreg(LE, LSWORD, LOAD)
ldral reg, bracketreg, signedreg, ishift= lsreg(AL, LSWORD, LOAD)

#
# Synthetic variant of LDR that loads the address of a local symbol.
# ldr reg, sym translates to ldr r0, [pc, sym - . - 8]
#
# ldr reg, sym + x translates to ldr r0, [pc, (sym + x) - . - 8]
# which will need to be frobbed to (sym - .) + (x - 8) if we want
# the assembler to fill it in properly.
#

ldr reg, expr				= loadsym(AL)
ldreq reg, expr				= loadsym(EQ)
ldrne reg, expr				= loadsym(NE)
ldrcs reg, expr				= loadsym(CS)
ldrcc reg, expr				= loadsym(CC)
ldrmi reg, expr				= loadsym(MI)
ldrpl reg, expr				= loadsym(PL)
ldrvs reg, expr				= loadsym(VS)
ldrvc reg, expr				= loadsym(VC)
ldrhi reg, expr				= loadsym(HI)
ldrls reg, expr				= loadsym(LS)
ldrge reg, expr				= loadsym(GE)
ldrlt reg, expr				= loadsym(LT)
ldrgt reg, expr				= loadsym(GT)
ldrle reg, expr				= loadsym(LE)
ldral reg, expr				= loadsym(AL)

#
# LDRT
# v6 pg. a4-60 (pdf page 210)
# Addressing Mode 2 on v6 page a5-18
# but restricted to the postindexed forms
#

ldrt reg, bracketreg, signedimm12	= lsimm_unpriv(AL, LSWORD, LOAD)
ldreqt reg, bracketreg, signedimm12	= lsimm_unpriv(EQ, LSWORD, LOAD)
ldrnet reg, bracketreg, signedimm12	= lsimm_unpriv(NE, LSWORD, LOAD)
ldrcst reg, bracketreg, signedimm12	= lsimm_unpriv(CS, LSWORD, LOAD)
ldrcct reg, bracketreg, signedimm12	= lsimm_unpriv(CC, LSWORD, LOAD)
ldrmit reg, bracketreg, signedimm12	= lsimm_unpriv(MI, LSWORD, LOAD)
ldrplt reg, bracketreg, signedimm12	= lsimm_unpriv(PL, LSWORD, LOAD)
ldrvst reg, bracketreg, signedimm12	= lsimm_unpriv(VS, LSWORD, LOAD)
ldrvct reg, bracketreg, signedimm12	= lsimm_unpriv(VC, LSWORD, LOAD)
ldrhit reg, bracketreg, signedimm12	= lsimm_unpriv(HI, LSWORD, LOAD)
ldrlst reg, bracketreg, signedimm12	= lsimm_unpriv(LS, LSWORD, LOAD)
ldrget reg, bracketreg, signedimm12	= lsimm_unpriv(GE, LSWORD, LOAD)
ldrltt reg, bracketreg, signedimm12	= lsimm_unpriv(LT, LSWORD, LOAD)
ldrgtt reg, bracketreg, signedimm12	= lsimm_unpriv(GT, LSWORD, LOAD)
ldrlet reg, bracketreg, signedimm12	= lsimm_unpriv(LE, LSWORD, LOAD)
ldralt reg, bracketreg, signedimm12	= lsimm_unpriv(AL, LSWORD, LOAD)

ldrt reg, bracketreg, signedreg		= lsreg_unpriv(AL, LSWORD, LOAD)
ldreqt reg, bracketreg, signedreg	= lsreg_unpriv(EQ, LSWORD, LOAD)
ldrnet reg, bracketreg, signedreg	= lsreg_unpriv(NE, LSWORD, LOAD)
ldrcst reg, bracketreg, signedreg	= lsreg_unpriv(CS, LSWORD, LOAD)
ldrcct reg, bracketreg, signedreg	= lsreg_unpriv(CC, LSWORD, LOAD)
ldrmit reg, bracketreg, signedreg	= lsreg_unpriv(MI, LSWORD, LOAD)
ldrplt reg, bracketreg, signedreg	= lsreg_unpriv(PL, LSWORD, LOAD)
ldrvst reg, bracketreg, signedreg	= lsreg_unpriv(VS, LSWORD, LOAD)
ldrvct reg, bracketreg, signedreg	= lsreg_unpriv(VC, LSWORD, LOAD)
ldrhit reg, bracketreg, signedreg	= lsreg_unpriv(HI, LSWORD, LOAD)
ldrlst reg, bracketreg, signedreg	= lsreg_unpriv(LS, LSWORD, LOAD)
ldrget reg, bracketreg, signedreg	= lsreg_unpriv(GE, LSWORD, LOAD)
ldrltt reg, bracketreg, signedreg	= lsreg_unpriv(LT, LSWORD, LOAD)
ldrgtt reg, bracketreg, signedreg	= lsreg_unpriv(GT, LSWORD, LOAD)
ldrlet reg, bracketreg, signedreg	= lsreg_unpriv(LE, LSWORD, LOAD)
ldralt reg, bracketreg, signedreg	= lsreg_unpriv(AL, LSWORD, LOAD)

ldrt reg, bracketreg, signedreg, ishift	 = lsreg_unpriv(AL, LSWORD, LOAD)
ldreqt reg, bracketreg, signedreg, ishift= lsreg_unpriv(EQ, LSWORD, LOAD)
ldrnet reg, bracketreg, signedreg, ishift= lsreg_unpriv(NE, LSWORD, LOAD)
ldrcst reg, bracketreg, signedreg, ishift= lsreg_unpriv(CS, LSWORD, LOAD)
ldrcct reg, bracketreg, signedreg, ishift= lsreg_unpriv(CC, LSWORD, LOAD)
ldrmit reg, bracketreg, signedreg, ishift= lsreg_unpriv(MI, LSWORD, LOAD)
ldrplt reg, bracketreg, signedreg, ishift= lsreg_unpriv(PL, LSWORD, LOAD)
ldrvst reg, bracketreg, signedreg, ishift= lsreg_unpriv(VS, LSWORD, LOAD)
ldrvct reg, bracketreg, signedreg, ishift= lsreg_unpriv(VC, LSWORD, LOAD)
ldrhit reg, bracketreg, signedreg, ishift= lsreg_unpriv(HI, LSWORD, LOAD)
ldrlst reg, bracketreg, signedreg, ishift= lsreg_unpriv(LS, LSWORD, LOAD)
ldrget reg, bracketreg, signedreg, ishift= lsreg_unpriv(GE, LSWORD, LOAD)
ldrltt reg, bracketreg, signedreg, ishift= lsreg_unpriv(LT, LSWORD, LOAD)
ldrgtt reg, bracketreg, signedreg, ishift= lsreg_unpriv(GT, LSWORD, LOAD)
ldrlet reg, bracketreg, signedreg, ishift= lsreg_unpriv(LE, LSWORD, LOAD)
ldralt reg, bracketreg, signedreg, ishift= lsreg_unpriv(AL, LSWORD, LOAD)

#
# LDRB
# v6 pg. a4-46 (pdf page 196)
# Addressing Mode 2 on v6 page a5-18
#

ldrb reg, am2imm			= lsimm(AL, LSBYTE, LOAD)
ldreqb reg, am2imm			= lsimm(EQ, LSBYTE, LOAD)
ldrneb reg, am2imm			= lsimm(NE, LSBYTE, LOAD)
ldrcsb reg, am2imm			= lsimm(CS, LSBYTE, LOAD)
ldrccb reg, am2imm			= lsimm(CC, LSBYTE, LOAD)
ldrmib reg, am2imm			= lsimm(MI, LSBYTE, LOAD)
ldrplb reg, am2imm			= lsimm(PL, LSBYTE, LOAD)
ldrvsb reg, am2imm			= lsimm(VS, LSBYTE, LOAD)
ldrvcb reg, am2imm			= lsimm(VC, LSBYTE, LOAD)
ldrhib reg, am2imm			= lsimm(HI, LSBYTE, LOAD)
ldrlsb reg, am2imm			= lsimm(LS, LSBYTE, LOAD)
ldrgeb reg, am2imm			= lsimm(GE, LSBYTE, LOAD)
ldrltb reg, am2imm			= lsimm(LT, LSBYTE, LOAD)
ldrgtb reg, am2imm			= lsimm(GT, LSBYTE, LOAD)
ldrleb reg, am2imm			= lsimm(LE, LSBYTE, LOAD)
ldralb reg, am2imm			= lsimm(AL, LSBYTE, LOAD)
ldrbeq reg, am2imm			= lsimm(EQ, LSBYTE, LOAD)
ldrbne reg, am2imm			= lsimm(NE, LSBYTE, LOAD)
ldrbcs reg, am2imm			= lsimm(CS, LSBYTE, LOAD)
ldrbcc reg, am2imm			= lsimm(CC, LSBYTE, LOAD)
ldrbmi reg, am2imm			= lsimm(MI, LSBYTE, LOAD)
ldrbpl reg, am2imm			= lsimm(PL, LSBYTE, LOAD)
ldrbvs reg, am2imm			= lsimm(VS, LSBYTE, LOAD)
ldrbvc reg, am2imm			= lsimm(VC, LSBYTE, LOAD)
ldrbhi reg, am2imm			= lsimm(HI, LSBYTE, LOAD)
ldrbls reg, am2imm			= lsimm(LS, LSBYTE, LOAD)
ldrbge reg, am2imm			= lsimm(GE, LSBYTE, LOAD)
ldrblt reg, am2imm			= lsimm(LT, LSBYTE, LOAD)
ldrbgt reg, am2imm			= lsimm(GT, LSBYTE, LOAD)
ldrble reg, am2imm			= lsimm(LE, LSBYTE, LOAD)
ldrbal reg, am2imm			= lsimm(AL, LSBYTE, LOAD)

ldrb reg, am2reg			= lsreg(AL, LSBYTE, LOAD)
ldreqb reg, am2reg			= lsreg(EQ, LSBYTE, LOAD)
ldrneb reg, am2reg			= lsreg(NE, LSBYTE, LOAD)
ldrcsb reg, am2reg			= lsreg(CS, LSBYTE, LOAD)
ldrccb reg, am2reg			= lsreg(CC, LSBYTE, LOAD)
ldrmib reg, am2reg			= lsreg(MI, LSBYTE, LOAD)
ldrplb reg, am2reg			= lsreg(PL, LSBYTE, LOAD)
ldrvsb reg, am2reg			= lsreg(VS, LSBYTE, LOAD)
ldrvcb reg, am2reg			= lsreg(VC, LSBYTE, LOAD)
ldrhib reg, am2reg			= lsreg(HI, LSBYTE, LOAD)
ldrlsb reg, am2reg			= lsreg(LS, LSBYTE, LOAD)
ldrgeb reg, am2reg			= lsreg(GE, LSBYTE, LOAD)
ldrltb reg, am2reg			= lsreg(LT, LSBYTE, LOAD)
ldrgtb reg, am2reg			= lsreg(GT, LSBYTE, LOAD)
ldrleb reg, am2reg			= lsreg(LE, LSBYTE, LOAD)
ldralb reg, am2reg			= lsreg(AL, LSBYTE, LOAD)
ldrbeq reg, am2reg			= lsreg(EQ, LSBYTE, LOAD)
ldrbne reg, am2reg			= lsreg(NE, LSBYTE, LOAD)
ldrbcs reg, am2reg			= lsreg(CS, LSBYTE, LOAD)
ldrbcc reg, am2reg			= lsreg(CC, LSBYTE, LOAD)
ldrbmi reg, am2reg			= lsreg(MI, LSBYTE, LOAD)
ldrbpl reg, am2reg			= lsreg(PL, LSBYTE, LOAD)
ldrbvs reg, am2reg			= lsreg(VS, LSBYTE, LOAD)
ldrbvc reg, am2reg			= lsreg(VC, LSBYTE, LOAD)
ldrbhi reg, am2reg			= lsreg(HI, LSBYTE, LOAD)
ldrbls reg, am2reg			= lsreg(LS, LSBYTE, LOAD)
ldrbge reg, am2reg			= lsreg(GE, LSBYTE, LOAD)
ldrblt reg, am2reg			= lsreg(LT, LSBYTE, LOAD)
ldrbgt reg, am2reg			= lsreg(GT, LSBYTE, LOAD)
ldrble reg, am2reg			= lsreg(LE, LSBYTE, LOAD)
ldrbal reg, am2reg			= lsreg(AL, LSBYTE, LOAD)

ldrb reg, bracketreg, signedimm12	= lsimm(AL, LSBYTE, LOAD)
ldreqb reg, bracketreg, signedimm12	= lsimm(EQ, LSBYTE, LOAD)
ldrneb reg, bracketreg, signedimm12	= lsimm(NE, LSBYTE, LOAD)
ldrcsb reg, bracketreg, signedimm12	= lsimm(CS, LSBYTE, LOAD)
ldrccb reg, bracketreg, signedimm12	= lsimm(CC, LSBYTE, LOAD)
ldrmib reg, bracketreg, signedimm12	= lsimm(MI, LSBYTE, LOAD)
ldrplb reg, bracketreg, signedimm12	= lsimm(PL, LSBYTE, LOAD)
ldrvsb reg, bracketreg, signedimm12	= lsimm(VS, LSBYTE, LOAD)
ldrvcb reg, bracketreg, signedimm12	= lsimm(VC, LSBYTE, LOAD)
ldrhib reg, bracketreg, signedimm12	= lsimm(HI, LSBYTE, LOAD)
ldrlsb reg, bracketreg, signedimm12	= lsimm(LS, LSBYTE, LOAD)
ldrgeb reg, bracketreg, signedimm12	= lsimm(GE, LSBYTE, LOAD)
ldrltb reg, bracketreg, signedimm12	= lsimm(LT, LSBYTE, LOAD)
ldrgtb reg, bracketreg, signedimm12	= lsimm(GT, LSBYTE, LOAD)
ldrleb reg, bracketreg, signedimm12	= lsimm(LE, LSBYTE, LOAD)
ldralb reg, bracketreg, signedimm12	= lsimm(AL, LSBYTE, LOAD)
ldrbeq reg, bracketreg, signedimm12	= lsimm(EQ, LSBYTE, LOAD)
ldrbne reg, bracketreg, signedimm12	= lsimm(NE, LSBYTE, LOAD)
ldrbcs reg, bracketreg, signedimm12	= lsimm(CS, LSBYTE, LOAD)
ldrbcc reg, bracketreg, signedimm12	= lsimm(CC, LSBYTE, LOAD)
ldrbmi reg, bracketreg, signedimm12	= lsimm(MI, LSBYTE, LOAD)
ldrbpl reg, bracketreg, signedimm12	= lsimm(PL, LSBYTE, LOAD)
ldrbvs reg, bracketreg, signedimm12	= lsimm(VS, LSBYTE, LOAD)
ldrbvc reg, bracketreg, signedimm12	= lsimm(VC, LSBYTE, LOAD)
ldrbhi reg, bracketreg, signedimm12	= lsimm(HI, LSBYTE, LOAD)
ldrbls reg, bracketreg, signedimm12	= lsimm(LS, LSBYTE, LOAD)
ldrbge reg, bracketreg, signedimm12	= lsimm(GE, LSBYTE, LOAD)
ldrblt reg, bracketreg, signedimm12	= lsimm(LT, LSBYTE, LOAD)
ldrbgt reg, bracketreg, signedimm12	= lsimm(GT, LSBYTE, LOAD)
ldrble reg, bracketreg, signedimm12	= lsimm(LE, LSBYTE, LOAD)
ldrbal reg, bracketreg, signedimm12	= lsimm(AL, LSBYTE, LOAD)

ldrb reg, bracketreg, signedreg		= lsreg(AL, LSBYTE, LOAD)
ldreqb reg, bracketreg, signedreg	= lsreg(EQ, LSBYTE, LOAD)
ldrneb reg, bracketreg, signedreg	= lsreg(NE, LSBYTE, LOAD)
ldrcsb reg, bracketreg, signedreg	= lsreg(CS, LSBYTE, LOAD)
ldrccb reg, bracketreg, signedreg	= lsreg(CC, LSBYTE, LOAD)
ldrmib reg, bracketreg, signedreg	= lsreg(MI, LSBYTE, LOAD)
ldrplb reg, bracketreg, signedreg	= lsreg(PL, LSBYTE, LOAD)
ldrvsb reg, bracketreg, signedreg	= lsreg(VS, LSBYTE, LOAD)
ldrvcb reg, bracketreg, signedreg	= lsreg(VC, LSBYTE, LOAD)
ldrhib reg, bracketreg, signedreg	= lsreg(HI, LSBYTE, LOAD)
ldrlsb reg, bracketreg, signedreg	= lsreg(LS, LSBYTE, LOAD)
ldrgeb reg, bracketreg, signedreg	= lsreg(GE, LSBYTE, LOAD)
ldrltb reg, bracketreg, signedreg	= lsreg(LT, LSBYTE, LOAD)
ldrgtb reg, bracketreg, signedreg	= lsreg(GT, LSBYTE, LOAD)
ldrleb reg, bracketreg, signedreg	= lsreg(LE, LSBYTE, LOAD)
ldralb reg, bracketreg, signedreg	= lsreg(AL, LSBYTE, LOAD)
ldrbeq reg, bracketreg, signedreg	= lsreg(EQ, LSBYTE, LOAD)
ldrbne reg, bracketreg, signedreg	= lsreg(NE, LSBYTE, LOAD)
ldrbcs reg, bracketreg, signedreg	= lsreg(CS, LSBYTE, LOAD)
ldrbcc reg, bracketreg, signedreg	= lsreg(CC, LSBYTE, LOAD)
ldrbmi reg, bracketreg, signedreg	= lsreg(MI, LSBYTE, LOAD)
ldrbpl reg, bracketreg, signedreg	= lsreg(PL, LSBYTE, LOAD)
ldrbvs reg, bracketreg, signedreg	= lsreg(VS, LSBYTE, LOAD)
ldrbvc reg, bracketreg, signedreg	= lsreg(VC, LSBYTE, LOAD)
ldrbhi reg, bracketreg, signedreg	= lsreg(HI, LSBYTE, LOAD)
ldrbls reg, bracketreg, signedreg	= lsreg(LS, LSBYTE, LOAD)
ldrbge reg, bracketreg, signedreg	= lsreg(GE, LSBYTE, LOAD)
ldrblt reg, bracketreg, signedreg	= lsreg(LT, LSBYTE, LOAD)
ldrbgt reg, bracketreg, signedreg	= lsreg(GT, LSBYTE, LOAD)
ldrble reg, bracketreg, signedreg	= lsreg(LE, LSBYTE, LOAD)
ldrbal reg, bracketreg, signedreg	= lsreg(AL, LSBYTE, LOAD)

ldrb reg, bracketreg, signedreg, ishift	= lsreg(AL, LSBYTE, LOAD)
ldreqb reg, bracketreg, signedreg, ishift= lsreg(EQ, LSBYTE, LOAD)
ldrneb reg, bracketreg, signedreg, ishift= lsreg(NE, LSBYTE, LOAD)
ldrcsb reg, bracketreg, signedreg, ishift= lsreg(CS, LSBYTE, LOAD)
ldrccb reg, bracketreg, signedreg, ishift= lsreg(CC, LSBYTE, LOAD)
ldrmib reg, bracketreg, signedreg, ishift= lsreg(MI, LSBYTE, LOAD)
ldrplb reg, bracketreg, signedreg, ishift= lsreg(PL, LSBYTE, LOAD)
ldrvsb reg, bracketreg, signedreg, ishift= lsreg(VS, LSBYTE, LOAD)
ldrvcb reg, bracketreg, signedreg, ishift= lsreg(VC, LSBYTE, LOAD)
ldrhib reg, bracketreg, signedreg, ishift= lsreg(HI, LSBYTE, LOAD)
ldrlsb reg, bracketreg, signedreg, ishift= lsreg(LS, LSBYTE, LOAD)
ldrgeb reg, bracketreg, signedreg, ishift= lsreg(GE, LSBYTE, LOAD)
ldrltb reg, bracketreg, signedreg, ishift= lsreg(LT, LSBYTE, LOAD)
ldrgtb reg, bracketreg, signedreg, ishift= lsreg(GT, LSBYTE, LOAD)
ldrleb reg, bracketreg, signedreg, ishift= lsreg(LE, LSBYTE, LOAD)
ldralb reg, bracketreg, signedreg, ishift= lsreg(AL, LSBYTE, LOAD)
ldrbeq reg, bracketreg, signedreg, ishift= lsreg(EQ, LSBYTE, LOAD)
ldrbne reg, bracketreg, signedreg, ishift= lsreg(NE, LSBYTE, LOAD)
ldrbcs reg, bracketreg, signedreg, ishift= lsreg(CS, LSBYTE, LOAD)
ldrbcc reg, bracketreg, signedreg, ishift= lsreg(CC, LSBYTE, LOAD)
ldrbmi reg, bracketreg, signedreg, ishift= lsreg(MI, LSBYTE, LOAD)
ldrbpl reg, bracketreg, signedreg, ishift= lsreg(PL, LSBYTE, LOAD)
ldrbvs reg, bracketreg, signedreg, ishift= lsreg(VS, LSBYTE, LOAD)
ldrbvc reg, bracketreg, signedreg, ishift= lsreg(VC, LSBYTE, LOAD)
ldrbhi reg, bracketreg, signedreg, ishift= lsreg(HI, LSBYTE, LOAD)
ldrbls reg, bracketreg, signedreg, ishift= lsreg(LS, LSBYTE, LOAD)
ldrbge reg, bracketreg, signedreg, ishift= lsreg(GE, LSBYTE, LOAD)
ldrblt reg, bracketreg, signedreg, ishift= lsreg(LT, LSBYTE, LOAD)
ldrbgt reg, bracketreg, signedreg, ishift= lsreg(GT, LSBYTE, LOAD)
ldrble reg, bracketreg, signedreg, ishift= lsreg(LE, LSBYTE, LOAD)
ldrbal reg, bracketreg, signedreg, ishift= lsreg(AL, LSBYTE, LOAD)

#
# LDRBT
# v6 pg. a4-48 (pdf page 198)
# Addressing Mode 2 on v6 page a5-18
# but restricted to the postindexed forms
#

ldrbt reg, bracketreg, signedimm12	= lsimm_unpriv(AL, LSWORD, LOAD)
ldreqbt reg, bracketreg, signedimm12	= lsimm_unpriv(EQ, LSWORD, LOAD)
ldrnebt reg, bracketreg, signedimm12	= lsimm_unpriv(NE, LSWORD, LOAD)
ldrcsbt reg, bracketreg, signedimm12	= lsimm_unpriv(CS, LSWORD, LOAD)
ldrccbt reg, bracketreg, signedimm12	= lsimm_unpriv(CC, LSWORD, LOAD)
ldrmibt reg, bracketreg, signedimm12	= lsimm_unpriv(MI, LSWORD, LOAD)
ldrplbt reg, bracketreg, signedimm12	= lsimm_unpriv(PL, LSWORD, LOAD)
ldrvsbt reg, bracketreg, signedimm12	= lsimm_unpriv(VS, LSWORD, LOAD)
ldrvcbt reg, bracketreg, signedimm12	= lsimm_unpriv(VC, LSWORD, LOAD)
ldrhibt reg, bracketreg, signedimm12	= lsimm_unpriv(HI, LSWORD, LOAD)
ldrlsbt reg, bracketreg, signedimm12	= lsimm_unpriv(LS, LSWORD, LOAD)
ldrgebt reg, bracketreg, signedimm12	= lsimm_unpriv(GE, LSWORD, LOAD)
ldrltbt reg, bracketreg, signedimm12	= lsimm_unpriv(LT, LSWORD, LOAD)
ldrgtbt reg, bracketreg, signedimm12	= lsimm_unpriv(GT, LSWORD, LOAD)
ldrlebt reg, bracketreg, signedimm12	= lsimm_unpriv(LE, LSWORD, LOAD)
ldralbt reg, bracketreg, signedimm12	= lsimm_unpriv(AL, LSWORD, LOAD)

ldrbt reg, bracketreg, signedreg	= lsreg_unpriv(AL, LSWORD, LOAD)
ldreqbt reg, bracketreg, signedreg	= lsreg_unpriv(EQ, LSWORD, LOAD)
ldrnebt reg, bracketreg, signedreg	= lsreg_unpriv(NE, LSWORD, LOAD)
ldrcsbt reg, bracketreg, signedreg	= lsreg_unpriv(CS, LSWORD, LOAD)
ldrccbt reg, bracketreg, signedreg	= lsreg_unpriv(CC, LSWORD, LOAD)
ldrmibt reg, bracketreg, signedreg	= lsreg_unpriv(MI, LSWORD, LOAD)
ldrplbt reg, bracketreg, signedreg	= lsreg_unpriv(PL, LSWORD, LOAD)
ldrvsbt reg, bracketreg, signedreg	= lsreg_unpriv(VS, LSWORD, LOAD)
ldrvcbt reg, bracketreg, signedreg	= lsreg_unpriv(VC, LSWORD, LOAD)
ldrhibt reg, bracketreg, signedreg	= lsreg_unpriv(HI, LSWORD, LOAD)
ldrlsbt reg, bracketreg, signedreg	= lsreg_unpriv(LS, LSWORD, LOAD)
ldrgebt reg, bracketreg, signedreg	= lsreg_unpriv(GE, LSWORD, LOAD)
ldrltbt reg, bracketreg, signedreg	= lsreg_unpriv(LT, LSWORD, LOAD)
ldrgtbt reg, bracketreg, signedreg	= lsreg_unpriv(GT, LSWORD, LOAD)
ldrlebt reg, bracketreg, signedreg	= lsreg_unpriv(LE, LSWORD, LOAD)
ldralbt reg, bracketreg, signedreg	= lsreg_unpriv(AL, LSWORD, LOAD)

ldrbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(AL, LSWORD, LOAD)
ldreqbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(EQ, LSWORD, LOAD)
ldrnebt reg, bracketreg, signedreg, ishift = lsreg_unpriv(NE, LSWORD, LOAD)
ldrcsbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(CS, LSWORD, LOAD)
ldrccbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(CC, LSWORD, LOAD)
ldrmibt reg, bracketreg, signedreg, ishift = lsreg_unpriv(MI, LSWORD, LOAD)
ldrplbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(PL, LSWORD, LOAD)
ldrvsbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(VS, LSWORD, LOAD)
ldrvcbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(VC, LSWORD, LOAD)
ldrhibt reg, bracketreg, signedreg, ishift = lsreg_unpriv(HI, LSWORD, LOAD)
ldrlsbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(LS, LSWORD, LOAD)
ldrgebt reg, bracketreg, signedreg, ishift = lsreg_unpriv(GE, LSWORD, LOAD)
ldrltbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(LT, LSWORD, LOAD)
ldrgtbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(GT, LSWORD, LOAD)
ldrlebt reg, bracketreg, signedreg, ishift = lsreg_unpriv(LE, LSWORD, LOAD)
ldralbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(AL, LSWORD, LOAD)

#
# LDRSB
# v6 pg. a4-56 (pdf page 206)
# Addressing mode 3 on v6 page a5-33
#

ldrsb reg, am3imm			= ls3imm(AL, LOAD, LDRD_LDRSB)
ldreqsb reg, am3imm			= ls3imm(EQ, LOAD, LDRD_LDRSB)
ldrnesb reg, am3imm			= ls3imm(NE, LOAD, LDRD_LDRSB)
ldrcssb reg, am3imm			= ls3imm(CS, LOAD, LDRD_LDRSB)
ldrccsb reg, am3imm			= ls3imm(CC, LOAD, LDRD_LDRSB)
ldrmisb reg, am3imm			= ls3imm(MI, LOAD, LDRD_LDRSB)
ldrplsb reg, am3imm			= ls3imm(PL, LOAD, LDRD_LDRSB)
ldrvssb reg, am3imm			= ls3imm(VS, LOAD, LDRD_LDRSB)
ldrvcsb reg, am3imm			= ls3imm(VC, LOAD, LDRD_LDRSB)
ldrhisb reg, am3imm			= ls3imm(HI, LOAD, LDRD_LDRSB)
ldrlssb reg, am3imm			= ls3imm(LS, LOAD, LDRD_LDRSB)
ldrgesb reg, am3imm			= ls3imm(GE, LOAD, LDRD_LDRSB)
ldrltsb reg, am3imm			= ls3imm(LT, LOAD, LDRD_LDRSB)
ldrgtsb reg, am3imm			= ls3imm(GT, LOAD, LDRD_LDRSB)
ldrlesb reg, am3imm			= ls3imm(LE, LOAD, LDRD_LDRSB)
ldralsb reg, am3imm			= ls3imm(AL, LOAD, LDRD_LDRSB)
ldrsbeq reg, am3imm			= ls3imm(EQ, LOAD, LDRD_LDRSB)
ldrsbne reg, am3imm			= ls3imm(NE, LOAD, LDRD_LDRSB)
ldrsbcs reg, am3imm			= ls3imm(CS, LOAD, LDRD_LDRSB)
ldrsbcc reg, am3imm			= ls3imm(CC, LOAD, LDRD_LDRSB)
ldrsbmi reg, am3imm			= ls3imm(MI, LOAD, LDRD_LDRSB)
ldrsbpl reg, am3imm			= ls3imm(PL, LOAD, LDRD_LDRSB)
ldrsbvs reg, am3imm			= ls3imm(VS, LOAD, LDRD_LDRSB)
ldrsbvc reg, am3imm			= ls3imm(VC, LOAD, LDRD_LDRSB)
ldrsbhi reg, am3imm			= ls3imm(HI, LOAD, LDRD_LDRSB)
ldrsbls reg, am3imm			= ls3imm(LS, LOAD, LDRD_LDRSB)
ldrsbge reg, am3imm			= ls3imm(GE, LOAD, LDRD_LDRSB)
ldrsblt reg, am3imm			= ls3imm(LT, LOAD, LDRD_LDRSB)
ldrsbgt reg, am3imm			= ls3imm(GT, LOAD, LDRD_LDRSB)
ldrsble reg, am3imm			= ls3imm(LE, LOAD, LDRD_LDRSB)
ldrsbal reg, am3imm			= ls3imm(AL, LOAD, LDRD_LDRSB)

ldrsb reg, am3reg			= ls3reg(AL, LOAD, LDRD_LDRSB)
ldreqsb reg, am3reg			= ls3reg(EQ, LOAD, LDRD_LDRSB)
ldrnesb reg, am3reg			= ls3reg(NE, LOAD, LDRD_LDRSB)
ldrcssb reg, am3reg			= ls3reg(CS, LOAD, LDRD_LDRSB)
ldrccsb reg, am3reg			= ls3reg(CC, LOAD, LDRD_LDRSB)
ldrmisb reg, am3reg			= ls3reg(MI, LOAD, LDRD_LDRSB)
ldrplsb reg, am3reg			= ls3reg(PL, LOAD, LDRD_LDRSB)
ldrvssb reg, am3reg			= ls3reg(VS, LOAD, LDRD_LDRSB)
ldrvcsb reg, am3reg			= ls3reg(VC, LOAD, LDRD_LDRSB)
ldrhisb reg, am3reg			= ls3reg(HI, LOAD, LDRD_LDRSB)
ldrlssb reg, am3reg			= ls3reg(LS, LOAD, LDRD_LDRSB)
ldrgesb reg, am3reg			= ls3reg(GE, LOAD, LDRD_LDRSB)
ldrltsb reg, am3reg			= ls3reg(LT, LOAD, LDRD_LDRSB)
ldrgtsb reg, am3reg			= ls3reg(GT, LOAD, LDRD_LDRSB)
ldrlesb reg, am3reg			= ls3reg(LE, LOAD, LDRD_LDRSB)
ldralsb reg, am3reg			= ls3reg(AL, LOAD, LDRD_LDRSB)
ldrsbeq reg, am3reg			= ls3reg(EQ, LOAD, LDRD_LDRSB)
ldrsbne reg, am3reg			= ls3reg(NE, LOAD, LDRD_LDRSB)
ldrsbcs reg, am3reg			= ls3reg(CS, LOAD, LDRD_LDRSB)
ldrsbcc reg, am3reg			= ls3reg(CC, LOAD, LDRD_LDRSB)
ldrsbmi reg, am3reg			= ls3reg(MI, LOAD, LDRD_LDRSB)
ldrsbpl reg, am3reg			= ls3reg(PL, LOAD, LDRD_LDRSB)
ldrsbvs reg, am3reg			= ls3reg(VS, LOAD, LDRD_LDRSB)
ldrsbvc reg, am3reg			= ls3reg(VC, LOAD, LDRD_LDRSB)
ldrsbhi reg, am3reg			= ls3reg(HI, LOAD, LDRD_LDRSB)
ldrsbls reg, am3reg			= ls3reg(LS, LOAD, LDRD_LDRSB)
ldrsbge reg, am3reg			= ls3reg(GE, LOAD, LDRD_LDRSB)
ldrsblt reg, am3reg			= ls3reg(LT, LOAD, LDRD_LDRSB)
ldrsbgt reg, am3reg			= ls3reg(GT, LOAD, LDRD_LDRSB)
ldrsble reg, am3reg			= ls3reg(LE, LOAD, LDRD_LDRSB)
ldrsbal reg, am3reg			= ls3reg(AL, LOAD, LDRD_LDRSB)

ldrsb reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, LDRD_LDRSB)
ldreqsb reg, bracketreg, signedimm8	= ls3imm(EQ, LOAD, LDRD_LDRSB)
ldrnesb reg, bracketreg, signedimm8	= ls3imm(NE, LOAD, LDRD_LDRSB)
ldrcssb reg, bracketreg, signedimm8	= ls3imm(CS, LOAD, LDRD_LDRSB)
ldrccsb reg, bracketreg, signedimm8	= ls3imm(CC, LOAD, LDRD_LDRSB)
ldrmisb reg, bracketreg, signedimm8	= ls3imm(MI, LOAD, LDRD_LDRSB)
ldrplsb reg, bracketreg, signedimm8	= ls3imm(PL, LOAD, LDRD_LDRSB)
ldrvssb reg, bracketreg, signedimm8	= ls3imm(VS, LOAD, LDRD_LDRSB)
ldrvcsb reg, bracketreg, signedimm8	= ls3imm(VC, LOAD, LDRD_LDRSB)
ldrhisb reg, bracketreg, signedimm8	= ls3imm(HI, LOAD, LDRD_LDRSB)
ldrlssb reg, bracketreg, signedimm8	= ls3imm(LS, LOAD, LDRD_LDRSB)
ldrgesb reg, bracketreg, signedimm8	= ls3imm(GE, LOAD, LDRD_LDRSB)
ldrltsb reg, bracketreg, signedimm8	= ls3imm(LT, LOAD, LDRD_LDRSB)
ldrgtsb reg, bracketreg, signedimm8	= ls3imm(GT, LOAD, LDRD_LDRSB)
ldrlesb reg, bracketreg, signedimm8	= ls3imm(LE, LOAD, LDRD_LDRSB)
ldralsb reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, LDRD_LDRSB)
ldrsbeq reg, bracketreg, signedimm8	= ls3imm(EQ, LOAD, LDRD_LDRSB)
ldrsbne reg, bracketreg, signedimm8	= ls3imm(NE, LOAD, LDRD_LDRSB)
ldrsbcs reg, bracketreg, signedimm8	= ls3imm(CS, LOAD, LDRD_LDRSB)
ldrsbcc reg, bracketreg, signedimm8	= ls3imm(CC, LOAD, LDRD_LDRSB)
ldrsbmi reg, bracketreg, signedimm8	= ls3imm(MI, LOAD, LDRD_LDRSB)
ldrsbpl reg, bracketreg, signedimm8	= ls3imm(PL, LOAD, LDRD_LDRSB)
ldrsbvs reg, bracketreg, signedimm8	= ls3imm(VS, LOAD, LDRD_LDRSB)
ldrsbvc reg, bracketreg, signedimm8	= ls3imm(VC, LOAD, LDRD_LDRSB)
ldrsbhi reg, bracketreg, signedimm8	= ls3imm(HI, LOAD, LDRD_LDRSB)
ldrsbls reg, bracketreg, signedimm8	= ls3imm(LS, LOAD, LDRD_LDRSB)
ldrsbge reg, bracketreg, signedimm8	= ls3imm(GE, LOAD, LDRD_LDRSB)
ldrsblt reg, bracketreg, signedimm8	= ls3imm(LT, LOAD, LDRD_LDRSB)
ldrsbgt reg, bracketreg, signedimm8	= ls3imm(GT, LOAD, LDRD_LDRSB)
ldrsble reg, bracketreg, signedimm8	= ls3imm(LE, LOAD, LDRD_LDRSB)
ldrsbal reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, LDRD_LDRSB)

ldrsb reg, bracketreg, signedreg	= ls3reg(AL, LOAD, LDRD_LDRSB)
ldreqsb reg, bracketreg, signedreg	= ls3reg(EQ, LOAD, LDRD_LDRSB)
ldrnesb reg, bracketreg, signedreg	= ls3reg(NE, LOAD, LDRD_LDRSB)
ldrcssb reg, bracketreg, signedreg	= ls3reg(CS, LOAD, LDRD_LDRSB)
ldrccsb reg, bracketreg, signedreg	= ls3reg(CC, LOAD, LDRD_LDRSB)
ldrmisb reg, bracketreg, signedreg	= ls3reg(MI, LOAD, LDRD_LDRSB)
ldrplsb reg, bracketreg, signedreg	= ls3reg(PL, LOAD, LDRD_LDRSB)
ldrvssb reg, bracketreg, signedreg	= ls3reg(VS, LOAD, LDRD_LDRSB)
ldrvcsb reg, bracketreg, signedreg	= ls3reg(VC, LOAD, LDRD_LDRSB)
ldrhisb reg, bracketreg, signedreg	= ls3reg(HI, LOAD, LDRD_LDRSB)
ldrlssb reg, bracketreg, signedreg	= ls3reg(LS, LOAD, LDRD_LDRSB)
ldrgesb reg, bracketreg, signedreg	= ls3reg(GE, LOAD, LDRD_LDRSB)
ldrltsb reg, bracketreg, signedreg	= ls3reg(LT, LOAD, LDRD_LDRSB)
ldrgtsb reg, bracketreg, signedreg	= ls3reg(GT, LOAD, LDRD_LDRSB)
ldrlesb reg, bracketreg, signedreg	= ls3reg(LE, LOAD, LDRD_LDRSB)
ldralsb reg, bracketreg, signedreg	= ls3reg(AL, LOAD, LDRD_LDRSB)
ldrsbeq reg, bracketreg, signedreg	= ls3reg(EQ, LOAD, LDRD_LDRSB)
ldrsbne reg, bracketreg, signedreg	= ls3reg(NE, LOAD, LDRD_LDRSB)
ldrsbcs reg, bracketreg, signedreg	= ls3reg(CS, LOAD, LDRD_LDRSB)
ldrsbcc reg, bracketreg, signedreg	= ls3reg(CC, LOAD, LDRD_LDRSB)
ldrsbmi reg, bracketreg, signedreg	= ls3reg(MI, LOAD, LDRD_LDRSB)
ldrsbpl reg, bracketreg, signedreg	= ls3reg(PL, LOAD, LDRD_LDRSB)
ldrsbvs reg, bracketreg, signedreg	= ls3reg(VS, LOAD, LDRD_LDRSB)
ldrsbvc reg, bracketreg, signedreg	= ls3reg(VC, LOAD, LDRD_LDRSB)
ldrsbhi reg, bracketreg, signedreg	= ls3reg(HI, LOAD, LDRD_LDRSB)
ldrsbls reg, bracketreg, signedreg	= ls3reg(LS, LOAD, LDRD_LDRSB)
ldrsbge reg, bracketreg, signedreg	= ls3reg(GE, LOAD, LDRD_LDRSB)
ldrsblt reg, bracketreg, signedreg	= ls3reg(LT, LOAD, LDRD_LDRSB)
ldrsbgt reg, bracketreg, signedreg	= ls3reg(GT, LOAD, LDRD_LDRSB)
ldrsble reg, bracketreg, signedreg	= ls3reg(LE, LOAD, LDRD_LDRSB)
ldrsbal reg, bracketreg, signedreg	= ls3reg(AL, LOAD, LDRD_LDRSB)

#
# LDRH
# v6 pg. a4-54 (pdf page 204)
# Addressing mode 3 on v6 page a5-33
#

ldrh reg, am3imm			= ls3imm(AL, LOAD, STRH_LDRH)
ldreqh reg, am3imm			= ls3imm(EQ, LOAD, STRH_LDRH)
ldrneh reg, am3imm			= ls3imm(NE, LOAD, STRH_LDRH)
ldrcsh reg, am3imm			= ls3imm(CS, LOAD, STRH_LDRH)
ldrcch reg, am3imm			= ls3imm(CC, LOAD, STRH_LDRH)
ldrmih reg, am3imm			= ls3imm(MI, LOAD, STRH_LDRH)
ldrplh reg, am3imm			= ls3imm(PL, LOAD, STRH_LDRH)
ldrvsh reg, am3imm			= ls3imm(VS, LOAD, STRH_LDRH)
ldrvch reg, am3imm			= ls3imm(VC, LOAD, STRH_LDRH)
ldrhih reg, am3imm			= ls3imm(HI, LOAD, STRH_LDRH)
ldrlsh reg, am3imm			= ls3imm(LS, LOAD, STRH_LDRH)
ldrgeh reg, am3imm			= ls3imm(GE, LOAD, STRH_LDRH)
ldrlth reg, am3imm			= ls3imm(LT, LOAD, STRH_LDRH)
ldrgth reg, am3imm			= ls3imm(GT, LOAD, STRH_LDRH)
ldrleh reg, am3imm			= ls3imm(LE, LOAD, STRH_LDRH)
ldralh reg, am3imm			= ls3imm(AL, LOAD, STRH_LDRH)
ldrheq reg, am3imm			= ls3imm(EQ, LOAD, STRH_LDRH)
ldrhne reg, am3imm			= ls3imm(NE, LOAD, STRH_LDRH)
ldrhcs reg, am3imm			= ls3imm(CS, LOAD, STRH_LDRH)
ldrhcc reg, am3imm			= ls3imm(CC, LOAD, STRH_LDRH)
ldrhmi reg, am3imm			= ls3imm(MI, LOAD, STRH_LDRH)
ldrhpl reg, am3imm			= ls3imm(PL, LOAD, STRH_LDRH)
ldrhvs reg, am3imm			= ls3imm(VS, LOAD, STRH_LDRH)
ldrhvc reg, am3imm			= ls3imm(VC, LOAD, STRH_LDRH)
ldrhhi reg, am3imm			= ls3imm(HI, LOAD, STRH_LDRH)
ldrhls reg, am3imm			= ls3imm(LS, LOAD, STRH_LDRH)
ldrhge reg, am3imm			= ls3imm(GE, LOAD, STRH_LDRH)
ldrhlt reg, am3imm			= ls3imm(LT, LOAD, STRH_LDRH)
ldrhgt reg, am3imm			= ls3imm(GT, LOAD, STRH_LDRH)
ldrhle reg, am3imm			= ls3imm(LE, LOAD, STRH_LDRH)
ldrhal reg, am3imm			= ls3imm(AL, LOAD, STRH_LDRH)

ldrh reg, am3reg			= ls3reg(AL, LOAD, STRH_LDRH)
ldreqh reg, am3reg			= ls3reg(EQ, LOAD, STRH_LDRH)
ldrneh reg, am3reg			= ls3reg(NE, LOAD, STRH_LDRH)
ldrcsh reg, am3reg			= ls3reg(CS, LOAD, STRH_LDRH)
ldrcch reg, am3reg			= ls3reg(CC, LOAD, STRH_LDRH)
ldrmih reg, am3reg			= ls3reg(MI, LOAD, STRH_LDRH)
ldrplh reg, am3reg			= ls3reg(PL, LOAD, STRH_LDRH)
ldrvsh reg, am3reg			= ls3reg(VS, LOAD, STRH_LDRH)
ldrvch reg, am3reg			= ls3reg(VC, LOAD, STRH_LDRH)
ldrhih reg, am3reg			= ls3reg(HI, LOAD, STRH_LDRH)
ldrlsh reg, am3reg			= ls3reg(LS, LOAD, STRH_LDRH)
ldrgeh reg, am3reg			= ls3reg(GE, LOAD, STRH_LDRH)
ldrlth reg, am3reg			= ls3reg(LT, LOAD, STRH_LDRH)
ldrgth reg, am3reg			= ls3reg(GT, LOAD, STRH_LDRH)
ldrleh reg, am3reg			= ls3reg(LE, LOAD, STRH_LDRH)
ldralh reg, am3reg			= ls3reg(AL, LOAD, STRH_LDRH)
ldrheq reg, am3reg			= ls3reg(EQ, LOAD, STRH_LDRH)
ldrhne reg, am3reg			= ls3reg(NE, LOAD, STRH_LDRH)
ldrhcs reg, am3reg			= ls3reg(CS, LOAD, STRH_LDRH)
ldrhcc reg, am3reg			= ls3reg(CC, LOAD, STRH_LDRH)
ldrhmi reg, am3reg			= ls3reg(MI, LOAD, STRH_LDRH)
ldrhpl reg, am3reg			= ls3reg(PL, LOAD, STRH_LDRH)
ldrhvs reg, am3reg			= ls3reg(VS, LOAD, STRH_LDRH)
ldrhvc reg, am3reg			= ls3reg(VC, LOAD, STRH_LDRH)
ldrhhi reg, am3reg			= ls3reg(HI, LOAD, STRH_LDRH)
ldrhls reg, am3reg			= ls3reg(LS, LOAD, STRH_LDRH)
ldrhge reg, am3reg			= ls3reg(GE, LOAD, STRH_LDRH)
ldrhlt reg, am3reg			= ls3reg(LT, LOAD, STRH_LDRH)
ldrhgt reg, am3reg			= ls3reg(GT, LOAD, STRH_LDRH)
ldrhle reg, am3reg			= ls3reg(LE, LOAD, STRH_LDRH)
ldrhal reg, am3reg			= ls3reg(AL, LOAD, STRH_LDRH)

ldrh reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, STRH_LDRH)
ldreqh reg, bracketreg, signedimm8	= ls3imm(EQ, LOAD, STRH_LDRH)
ldrneh reg, bracketreg, signedimm8	= ls3imm(NE, LOAD, STRH_LDRH)
ldrcsh reg, bracketreg, signedimm8	= ls3imm(CS, LOAD, STRH_LDRH)
ldrcch reg, bracketreg, signedimm8	= ls3imm(CC, LOAD, STRH_LDRH)
ldrmih reg, bracketreg, signedimm8	= ls3imm(MI, LOAD, STRH_LDRH)
ldrplh reg, bracketreg, signedimm8	= ls3imm(PL, LOAD, STRH_LDRH)
ldrvsh reg, bracketreg, signedimm8	= ls3imm(VS, LOAD, STRH_LDRH)
ldrvch reg, bracketreg, signedimm8	= ls3imm(VC, LOAD, STRH_LDRH)
ldrhih reg, bracketreg, signedimm8	= ls3imm(HI, LOAD, STRH_LDRH)
ldrlsh reg, bracketreg, signedimm8	= ls3imm(LS, LOAD, STRH_LDRH)
ldrgeh reg, bracketreg, signedimm8	= ls3imm(GE, LOAD, STRH_LDRH)
ldrlth reg, bracketreg, signedimm8	= ls3imm(LT, LOAD, STRH_LDRH)
ldrgth reg, bracketreg, signedimm8	= ls3imm(GT, LOAD, STRH_LDRH)
ldrleh reg, bracketreg, signedimm8	= ls3imm(LE, LOAD, STRH_LDRH)
ldralh reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, STRH_LDRH)
ldrheq reg, bracketreg, signedimm8	= ls3imm(EQ, LOAD, STRH_LDRH)
ldrhne reg, bracketreg, signedimm8	= ls3imm(NE, LOAD, STRH_LDRH)
ldrhcs reg, bracketreg, signedimm8	= ls3imm(CS, LOAD, STRH_LDRH)
ldrhcc reg, bracketreg, signedimm8	= ls3imm(CC, LOAD, STRH_LDRH)
ldrhmi reg, bracketreg, signedimm8	= ls3imm(MI, LOAD, STRH_LDRH)
ldrhpl reg, bracketreg, signedimm8	= ls3imm(PL, LOAD, STRH_LDRH)
ldrhvs reg, bracketreg, signedimm8	= ls3imm(VS, LOAD, STRH_LDRH)
ldrhvc reg, bracketreg, signedimm8	= ls3imm(VC, LOAD, STRH_LDRH)
ldrhhi reg, bracketreg, signedimm8	= ls3imm(HI, LOAD, STRH_LDRH)
ldrhls reg, bracketreg, signedimm8	= ls3imm(LS, LOAD, STRH_LDRH)
ldrhge reg, bracketreg, signedimm8	= ls3imm(GE, LOAD, STRH_LDRH)
ldrhlt reg, bracketreg, signedimm8	= ls3imm(LT, LOAD, STRH_LDRH)
ldrhgt reg, bracketreg, signedimm8	= ls3imm(GT, LOAD, STRH_LDRH)
ldrhle reg, bracketreg, signedimm8	= ls3imm(LE, LOAD, STRH_LDRH)
ldrhal reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, STRH_LDRH)

ldrh reg, bracketreg, signedreg		= ls3reg(AL, LOAD, STRH_LDRH)
ldreqh reg, bracketreg, signedreg	= ls3reg(EQ, LOAD, STRH_LDRH)
ldrneh reg, bracketreg, signedreg	= ls3reg(NE, LOAD, STRH_LDRH)
ldrcsh reg, bracketreg, signedreg	= ls3reg(CS, LOAD, STRH_LDRH)
ldrcch reg, bracketreg, signedreg	= ls3reg(CC, LOAD, STRH_LDRH)
ldrmih reg, bracketreg, signedreg	= ls3reg(MI, LOAD, STRH_LDRH)
ldrplh reg, bracketreg, signedreg	= ls3reg(PL, LOAD, STRH_LDRH)
ldrvsh reg, bracketreg, signedreg	= ls3reg(VS, LOAD, STRH_LDRH)
ldrvch reg, bracketreg, signedreg	= ls3reg(VC, LOAD, STRH_LDRH)
ldrhih reg, bracketreg, signedreg	= ls3reg(HI, LOAD, STRH_LDRH)
ldrlsh reg, bracketreg, signedreg	= ls3reg(LS, LOAD, STRH_LDRH)
ldrgeh reg, bracketreg, signedreg	= ls3reg(GE, LOAD, STRH_LDRH)
ldrlth reg, bracketreg, signedreg	= ls3reg(LT, LOAD, STRH_LDRH)
ldrgth reg, bracketreg, signedreg	= ls3reg(GT, LOAD, STRH_LDRH)
ldrleh reg, bracketreg, signedreg	= ls3reg(LE, LOAD, STRH_LDRH)
ldralh reg, bracketreg, signedreg	= ls3reg(AL, LOAD, STRH_LDRH)
ldrheq reg, bracketreg, signedreg	= ls3reg(EQ, LOAD, STRH_LDRH)
ldrhne reg, bracketreg, signedreg	= ls3reg(NE, LOAD, STRH_LDRH)
ldrhcs reg, bracketreg, signedreg	= ls3reg(CS, LOAD, STRH_LDRH)
ldrhcc reg, bracketreg, signedreg	= ls3reg(CC, LOAD, STRH_LDRH)
ldrhmi reg, bracketreg, signedreg	= ls3reg(MI, LOAD, STRH_LDRH)
ldrhpl reg, bracketreg, signedreg	= ls3reg(PL, LOAD, STRH_LDRH)
ldrhvs reg, bracketreg, signedreg	= ls3reg(VS, LOAD, STRH_LDRH)
ldrhvc reg, bracketreg, signedreg	= ls3reg(VC, LOAD, STRH_LDRH)
ldrhhi reg, bracketreg, signedreg	= ls3reg(HI, LOAD, STRH_LDRH)
ldrhls reg, bracketreg, signedreg	= ls3reg(LS, LOAD, STRH_LDRH)
ldrhge reg, bracketreg, signedreg	= ls3reg(GE, LOAD, STRH_LDRH)
ldrhlt reg, bracketreg, signedreg	= ls3reg(LT, LOAD, STRH_LDRH)
ldrhgt reg, bracketreg, signedreg	= ls3reg(GT, LOAD, STRH_LDRH)
ldrhle reg, bracketreg, signedreg	= ls3reg(LE, LOAD, STRH_LDRH)
ldrhal reg, bracketreg, signedreg	= ls3reg(AL, LOAD, STRH_LDRH)

#
# LDRSH
# v6 pg. a4-58 (pdf page 208)
# Addressing mode 3 on v6 page a5-33
#

ldrsh reg, am3imm			= ls3imm(AL, LOAD, STRD_LDRSH)
ldreqsh reg, am3imm			= ls3imm(EQ, LOAD, STRD_LDRSH)
ldrnesh reg, am3imm			= ls3imm(NE, LOAD, STRD_LDRSH)
ldrcssh reg, am3imm			= ls3imm(CS, LOAD, STRD_LDRSH)
ldrccsh reg, am3imm			= ls3imm(CC, LOAD, STRD_LDRSH)
ldrmish reg, am3imm			= ls3imm(MI, LOAD, STRD_LDRSH)
ldrplsh reg, am3imm			= ls3imm(PL, LOAD, STRD_LDRSH)
ldrvssh reg, am3imm			= ls3imm(VS, LOAD, STRD_LDRSH)
ldrvcsh reg, am3imm			= ls3imm(VC, LOAD, STRD_LDRSH)
ldrhish reg, am3imm			= ls3imm(HI, LOAD, STRD_LDRSH)
ldrlssh reg, am3imm			= ls3imm(LS, LOAD, STRD_LDRSH)
ldrgesh reg, am3imm			= ls3imm(GE, LOAD, STRD_LDRSH)
ldrltsh reg, am3imm			= ls3imm(LT, LOAD, STRD_LDRSH)
ldrgtsh reg, am3imm			= ls3imm(GT, LOAD, STRD_LDRSH)
ldrlesh reg, am3imm			= ls3imm(LE, LOAD, STRD_LDRSH)
ldralsh reg, am3imm			= ls3imm(AL, LOAD, STRD_LDRSH)
ldrsheq reg, am3imm			= ls3imm(EQ, LOAD, STRD_LDRSH)
ldrshne reg, am3imm			= ls3imm(NE, LOAD, STRD_LDRSH)
ldrshcs reg, am3imm			= ls3imm(CS, LOAD, STRD_LDRSH)
ldrshcc reg, am3imm			= ls3imm(CC, LOAD, STRD_LDRSH)
ldrshmi reg, am3imm			= ls3imm(MI, LOAD, STRD_LDRSH)
ldrshpl reg, am3imm			= ls3imm(PL, LOAD, STRD_LDRSH)
ldrshvs reg, am3imm			= ls3imm(VS, LOAD, STRD_LDRSH)
ldrshvc reg, am3imm			= ls3imm(VC, LOAD, STRD_LDRSH)
ldrshhi reg, am3imm			= ls3imm(HI, LOAD, STRD_LDRSH)
ldrshls reg, am3imm			= ls3imm(LS, LOAD, STRD_LDRSH)
ldrshge reg, am3imm			= ls3imm(GE, LOAD, STRD_LDRSH)
ldrshlt reg, am3imm			= ls3imm(LT, LOAD, STRD_LDRSH)
ldrshgt reg, am3imm			= ls3imm(GT, LOAD, STRD_LDRSH)
ldrshle reg, am3imm			= ls3imm(LE, LOAD, STRD_LDRSH)
ldrshal reg, am3imm			= ls3imm(AL, LOAD, STRD_LDRSH)

ldrsh reg, am3reg			= ls3reg(AL, LOAD, STRD_LDRSH)
ldreqsh reg, am3reg			= ls3reg(EQ, LOAD, STRD_LDRSH)
ldrnesh reg, am3reg			= ls3reg(NE, LOAD, STRD_LDRSH)
ldrcssh reg, am3reg			= ls3reg(CS, LOAD, STRD_LDRSH)
ldrccsh reg, am3reg			= ls3reg(CC, LOAD, STRD_LDRSH)
ldrmish reg, am3reg			= ls3reg(MI, LOAD, STRD_LDRSH)
ldrplsh reg, am3reg			= ls3reg(PL, LOAD, STRD_LDRSH)
ldrvssh reg, am3reg			= ls3reg(VS, LOAD, STRD_LDRSH)
ldrvcsh reg, am3reg			= ls3reg(VC, LOAD, STRD_LDRSH)
ldrhish reg, am3reg			= ls3reg(HI, LOAD, STRD_LDRSH)
ldrlssh reg, am3reg			= ls3reg(LS, LOAD, STRD_LDRSH)
ldrgesh reg, am3reg			= ls3reg(GE, LOAD, STRD_LDRSH)
ldrltsh reg, am3reg			= ls3reg(LT, LOAD, STRD_LDRSH)
ldrgtsh reg, am3reg			= ls3reg(GT, LOAD, STRD_LDRSH)
ldrlesh reg, am3reg			= ls3reg(LE, LOAD, STRD_LDRSH)
ldralsh reg, am3reg			= ls3reg(AL, LOAD, STRD_LDRSH)
ldrsheq reg, am3reg			= ls3reg(EQ, LOAD, STRD_LDRSH)
ldrshne reg, am3reg			= ls3reg(NE, LOAD, STRD_LDRSH)
ldrshcs reg, am3reg			= ls3reg(CS, LOAD, STRD_LDRSH)
ldrshcc reg, am3reg			= ls3reg(CC, LOAD, STRD_LDRSH)
ldrshmi reg, am3reg			= ls3reg(MI, LOAD, STRD_LDRSH)
ldrshpl reg, am3reg			= ls3reg(PL, LOAD, STRD_LDRSH)
ldrshvs reg, am3reg			= ls3reg(VS, LOAD, STRD_LDRSH)
ldrshvc reg, am3reg			= ls3reg(VC, LOAD, STRD_LDRSH)
ldrshhi reg, am3reg			= ls3reg(HI, LOAD, STRD_LDRSH)
ldrshls reg, am3reg			= ls3reg(LS, LOAD, STRD_LDRSH)
ldrshge reg, am3reg			= ls3reg(GE, LOAD, STRD_LDRSH)
ldrshlt reg, am3reg			= ls3reg(LT, LOAD, STRD_LDRSH)
ldrshgt reg, am3reg			= ls3reg(GT, LOAD, STRD_LDRSH)
ldrshle reg, am3reg			= ls3reg(LE, LOAD, STRD_LDRSH)
ldrshal reg, am3reg			= ls3reg(AL, LOAD, STRD_LDRSH)

ldrsh reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, STRD_LDRSH)
ldreqsh reg, bracketreg, signedimm8	= ls3imm(EQ, LOAD, STRD_LDRSH)
ldrnesh reg, bracketreg, signedimm8	= ls3imm(NE, LOAD, STRD_LDRSH)
ldrcssh reg, bracketreg, signedimm8	= ls3imm(CS, LOAD, STRD_LDRSH)
ldrccsh reg, bracketreg, signedimm8	= ls3imm(CC, LOAD, STRD_LDRSH)
ldrmish reg, bracketreg, signedimm8	= ls3imm(MI, LOAD, STRD_LDRSH)
ldrplsh reg, bracketreg, signedimm8	= ls3imm(PL, LOAD, STRD_LDRSH)
ldrvssh reg, bracketreg, signedimm8	= ls3imm(VS, LOAD, STRD_LDRSH)
ldrvcsh reg, bracketreg, signedimm8	= ls3imm(VC, LOAD, STRD_LDRSH)
ldrhish reg, bracketreg, signedimm8	= ls3imm(HI, LOAD, STRD_LDRSH)
ldrlssh reg, bracketreg, signedimm8	= ls3imm(LS, LOAD, STRD_LDRSH)
ldrgesh reg, bracketreg, signedimm8	= ls3imm(GE, LOAD, STRD_LDRSH)
ldrltsh reg, bracketreg, signedimm8	= ls3imm(LT, LOAD, STRD_LDRSH)
ldrgtsh reg, bracketreg, signedimm8	= ls3imm(GT, LOAD, STRD_LDRSH)
ldrlesh reg, bracketreg, signedimm8	= ls3imm(LE, LOAD, STRD_LDRSH)
ldralsh reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, STRD_LDRSH)
ldrsheq reg, bracketreg, signedimm8	= ls3imm(EQ, LOAD, STRD_LDRSH)
ldrshne reg, bracketreg, signedimm8	= ls3imm(NE, LOAD, STRD_LDRSH)
ldrshcs reg, bracketreg, signedimm8	= ls3imm(CS, LOAD, STRD_LDRSH)
ldrshcc reg, bracketreg, signedimm8	= ls3imm(CC, LOAD, STRD_LDRSH)
ldrshmi reg, bracketreg, signedimm8	= ls3imm(MI, LOAD, STRD_LDRSH)
ldrshpl reg, bracketreg, signedimm8	= ls3imm(PL, LOAD, STRD_LDRSH)
ldrshvs reg, bracketreg, signedimm8	= ls3imm(VS, LOAD, STRD_LDRSH)
ldrshvc reg, bracketreg, signedimm8	= ls3imm(VC, LOAD, STRD_LDRSH)
ldrshhi reg, bracketreg, signedimm8	= ls3imm(HI, LOAD, STRD_LDRSH)
ldrshls reg, bracketreg, signedimm8	= ls3imm(LS, LOAD, STRD_LDRSH)
ldrshge reg, bracketreg, signedimm8	= ls3imm(GE, LOAD, STRD_LDRSH)
ldrshlt reg, bracketreg, signedimm8	= ls3imm(LT, LOAD, STRD_LDRSH)
ldrshgt reg, bracketreg, signedimm8	= ls3imm(GT, LOAD, STRD_LDRSH)
ldrshle reg, bracketreg, signedimm8	= ls3imm(LE, LOAD, STRD_LDRSH)
ldrshal reg, bracketreg, signedimm8	= ls3imm(AL, LOAD, STRD_LDRSH)

ldrsh reg, bracketreg, signedreg	= ls3reg(AL, LOAD, STRD_LDRSH)
ldreqsh reg, bracketreg, signedreg	= ls3reg(EQ, LOAD, STRD_LDRSH)
ldrnesh reg, bracketreg, signedreg	= ls3reg(NE, LOAD, STRD_LDRSH)
ldrcssh reg, bracketreg, signedreg	= ls3reg(CS, LOAD, STRD_LDRSH)
ldrccsh reg, bracketreg, signedreg	= ls3reg(CC, LOAD, STRD_LDRSH)
ldrmish reg, bracketreg, signedreg	= ls3reg(MI, LOAD, STRD_LDRSH)
ldrplsh reg, bracketreg, signedreg	= ls3reg(PL, LOAD, STRD_LDRSH)
ldrvssh reg, bracketreg, signedreg	= ls3reg(VS, LOAD, STRD_LDRSH)
ldrvcsh reg, bracketreg, signedreg	= ls3reg(VC, LOAD, STRD_LDRSH)
ldrhish reg, bracketreg, signedreg	= ls3reg(HI, LOAD, STRD_LDRSH)
ldrlssh reg, bracketreg, signedreg	= ls3reg(LS, LOAD, STRD_LDRSH)
ldrgesh reg, bracketreg, signedreg	= ls3reg(GE, LOAD, STRD_LDRSH)
ldrltsh reg, bracketreg, signedreg	= ls3reg(LT, LOAD, STRD_LDRSH)
ldrgtsh reg, bracketreg, signedreg	= ls3reg(GT, LOAD, STRD_LDRSH)
ldrlesh reg, bracketreg, signedreg	= ls3reg(LE, LOAD, STRD_LDRSH)
ldralsh reg, bracketreg, signedreg	= ls3reg(AL, LOAD, STRD_LDRSH)
ldrsheq reg, bracketreg, signedreg	= ls3reg(EQ, LOAD, STRD_LDRSH)
ldrshne reg, bracketreg, signedreg	= ls3reg(NE, LOAD, STRD_LDRSH)
ldrshcs reg, bracketreg, signedreg	= ls3reg(CS, LOAD, STRD_LDRSH)
ldrshcc reg, bracketreg, signedreg	= ls3reg(CC, LOAD, STRD_LDRSH)
ldrshmi reg, bracketreg, signedreg	= ls3reg(MI, LOAD, STRD_LDRSH)
ldrshpl reg, bracketreg, signedreg	= ls3reg(PL, LOAD, STRD_LDRSH)
ldrshvs reg, bracketreg, signedreg	= ls3reg(VS, LOAD, STRD_LDRSH)
ldrshvc reg, bracketreg, signedreg	= ls3reg(VC, LOAD, STRD_LDRSH)
ldrshhi reg, bracketreg, signedreg	= ls3reg(HI, LOAD, STRD_LDRSH)
ldrshls reg, bracketreg, signedreg	= ls3reg(LS, LOAD, STRD_LDRSH)
ldrshge reg, bracketreg, signedreg	= ls3reg(GE, LOAD, STRD_LDRSH)
ldrshlt reg, bracketreg, signedreg	= ls3reg(LT, LOAD, STRD_LDRSH)
ldrshgt reg, bracketreg, signedreg	= ls3reg(GT, LOAD, STRD_LDRSH)
ldrshle reg, bracketreg, signedreg	= ls3reg(LE, LOAD, STRD_LDRSH)
ldrshal reg, bracketreg, signedreg	= ls3reg(AL, LOAD, STRD_LDRSH)

#
# LDRD
# v6 pg. a4-50 (pdf page 200)
# Addressing mode 3 on v6 page a5-33
# yes it's a "store"
#

ldrd reg, am3imm			= ls3imm(AL, STORE, LDRD_LDRSB)
ldreqd reg, am3imm			= ls3imm(EQ, STORE, LDRD_LDRSB)
ldrned reg, am3imm			= ls3imm(NE, STORE, LDRD_LDRSB)
ldrcsd reg, am3imm			= ls3imm(CS, STORE, LDRD_LDRSB)
ldrccd reg, am3imm			= ls3imm(CC, STORE, LDRD_LDRSB)
ldrmid reg, am3imm			= ls3imm(MI, STORE, LDRD_LDRSB)
ldrpld reg, am3imm			= ls3imm(PL, STORE, LDRD_LDRSB)
ldrvsd reg, am3imm			= ls3imm(VS, STORE, LDRD_LDRSB)
ldrvcd reg, am3imm			= ls3imm(VC, STORE, LDRD_LDRSB)
ldrhid reg, am3imm			= ls3imm(HI, STORE, LDRD_LDRSB)
ldrlsd reg, am3imm			= ls3imm(LS, STORE, LDRD_LDRSB)
ldrged reg, am3imm			= ls3imm(GE, STORE, LDRD_LDRSB)
ldrltd reg, am3imm			= ls3imm(LT, STORE, LDRD_LDRSB)
ldrgtd reg, am3imm			= ls3imm(GT, STORE, LDRD_LDRSB)
ldrled reg, am3imm			= ls3imm(LE, STORE, LDRD_LDRSB)
ldrald reg, am3imm			= ls3imm(AL, STORE, LDRD_LDRSB)
ldrdeq reg, am3imm			= ls3imm(EQ, STORE, LDRD_LDRSB)
ldrdne reg, am3imm			= ls3imm(NE, STORE, LDRD_LDRSB)
ldrdcs reg, am3imm			= ls3imm(CS, STORE, LDRD_LDRSB)
ldrdcc reg, am3imm			= ls3imm(CC, STORE, LDRD_LDRSB)
ldrdmi reg, am3imm			= ls3imm(MI, STORE, LDRD_LDRSB)
ldrdpl reg, am3imm			= ls3imm(PL, STORE, LDRD_LDRSB)
ldrdvs reg, am3imm			= ls3imm(VS, STORE, LDRD_LDRSB)
ldrdvc reg, am3imm			= ls3imm(VC, STORE, LDRD_LDRSB)
ldrdhi reg, am3imm			= ls3imm(HI, STORE, LDRD_LDRSB)
ldrdls reg, am3imm			= ls3imm(LS, STORE, LDRD_LDRSB)
ldrdge reg, am3imm			= ls3imm(GE, STORE, LDRD_LDRSB)
ldrdlt reg, am3imm			= ls3imm(LT, STORE, LDRD_LDRSB)
ldrdgt reg, am3imm			= ls3imm(GT, STORE, LDRD_LDRSB)
ldrdle reg, am3imm			= ls3imm(LE, STORE, LDRD_LDRSB)
ldrdal reg, am3imm			= ls3imm(AL, STORE, LDRD_LDRSB)

ldrd reg, am3reg			= ls3reg(AL, STORE, LDRD_LDRSB)
ldreqd reg, am3reg			= ls3reg(EQ, STORE, LDRD_LDRSB)
ldrned reg, am3reg			= ls3reg(NE, STORE, LDRD_LDRSB)
ldrcsd reg, am3reg			= ls3reg(CS, STORE, LDRD_LDRSB)
ldrccd reg, am3reg			= ls3reg(CC, STORE, LDRD_LDRSB)
ldrmid reg, am3reg			= ls3reg(MI, STORE, LDRD_LDRSB)
ldrpld reg, am3reg			= ls3reg(PL, STORE, LDRD_LDRSB)
ldrvsd reg, am3reg			= ls3reg(VS, STORE, LDRD_LDRSB)
ldrvcd reg, am3reg			= ls3reg(VC, STORE, LDRD_LDRSB)
ldrhid reg, am3reg			= ls3reg(HI, STORE, LDRD_LDRSB)
ldrlsd reg, am3reg			= ls3reg(LS, STORE, LDRD_LDRSB)
ldrged reg, am3reg			= ls3reg(GE, STORE, LDRD_LDRSB)
ldrltd reg, am3reg			= ls3reg(LT, STORE, LDRD_LDRSB)
ldrgtd reg, am3reg			= ls3reg(GT, STORE, LDRD_LDRSB)
ldrled reg, am3reg			= ls3reg(LE, STORE, LDRD_LDRSB)
ldrald reg, am3reg			= ls3reg(AL, STORE, LDRD_LDRSB)
ldrdeq reg, am3reg			= ls3reg(EQ, STORE, LDRD_LDRSB)
ldrdne reg, am3reg			= ls3reg(NE, STORE, LDRD_LDRSB)
ldrdcs reg, am3reg			= ls3reg(CS, STORE, LDRD_LDRSB)
ldrdcc reg, am3reg			= ls3reg(CC, STORE, LDRD_LDRSB)
ldrdmi reg, am3reg			= ls3reg(MI, STORE, LDRD_LDRSB)
ldrdpl reg, am3reg			= ls3reg(PL, STORE, LDRD_LDRSB)
ldrdvs reg, am3reg			= ls3reg(VS, STORE, LDRD_LDRSB)
ldrdvc reg, am3reg			= ls3reg(VC, STORE, LDRD_LDRSB)
ldrdhi reg, am3reg			= ls3reg(HI, STORE, LDRD_LDRSB)
ldrdls reg, am3reg			= ls3reg(LS, STORE, LDRD_LDRSB)
ldrdge reg, am3reg			= ls3reg(GE, STORE, LDRD_LDRSB)
ldrdlt reg, am3reg			= ls3reg(LT, STORE, LDRD_LDRSB)
ldrdgt reg, am3reg			= ls3reg(GT, STORE, LDRD_LDRSB)
ldrdle reg, am3reg			= ls3reg(LE, STORE, LDRD_LDRSB)
ldrdal reg, am3reg			= ls3reg(AL, STORE, LDRD_LDRSB)

ldrd reg, bracketreg, signedimm8	= ls3imm(AL, STORE, LDRD_LDRSB)
ldreqd reg, bracketreg, signedimm8	= ls3imm(EQ, STORE, LDRD_LDRSB)
ldrned reg, bracketreg, signedimm8	= ls3imm(NE, STORE, LDRD_LDRSB)
ldrcsd reg, bracketreg, signedimm8	= ls3imm(CS, STORE, LDRD_LDRSB)
ldrccd reg, bracketreg, signedimm8	= ls3imm(CC, STORE, LDRD_LDRSB)
ldrmid reg, bracketreg, signedimm8	= ls3imm(MI, STORE, LDRD_LDRSB)
ldrpld reg, bracketreg, signedimm8	= ls3imm(PL, STORE, LDRD_LDRSB)
ldrvsd reg, bracketreg, signedimm8	= ls3imm(VS, STORE, LDRD_LDRSB)
ldrvcd reg, bracketreg, signedimm8	= ls3imm(VC, STORE, LDRD_LDRSB)
ldrhid reg, bracketreg, signedimm8	= ls3imm(HI, STORE, LDRD_LDRSB)
ldrlsd reg, bracketreg, signedimm8	= ls3imm(LS, STORE, LDRD_LDRSB)
ldrged reg, bracketreg, signedimm8	= ls3imm(GE, STORE, LDRD_LDRSB)
ldrltd reg, bracketreg, signedimm8	= ls3imm(LT, STORE, LDRD_LDRSB)
ldrgtd reg, bracketreg, signedimm8	= ls3imm(GT, STORE, LDRD_LDRSB)
ldrled reg, bracketreg, signedimm8	= ls3imm(LE, STORE, LDRD_LDRSB)
ldrald reg, bracketreg, signedimm8	= ls3imm(AL, STORE, LDRD_LDRSB)
ldrdeq reg, bracketreg, signedimm8	= ls3imm(EQ, STORE, LDRD_LDRSB)
ldrdne reg, bracketreg, signedimm8	= ls3imm(NE, STORE, LDRD_LDRSB)
ldrdcs reg, bracketreg, signedimm8	= ls3imm(CS, STORE, LDRD_LDRSB)
ldrdcc reg, bracketreg, signedimm8	= ls3imm(CC, STORE, LDRD_LDRSB)
ldrdmi reg, bracketreg, signedimm8	= ls3imm(MI, STORE, LDRD_LDRSB)
ldrdpl reg, bracketreg, signedimm8	= ls3imm(PL, STORE, LDRD_LDRSB)
ldrdvs reg, bracketreg, signedimm8	= ls3imm(VS, STORE, LDRD_LDRSB)
ldrdvc reg, bracketreg, signedimm8	= ls3imm(VC, STORE, LDRD_LDRSB)
ldrdhi reg, bracketreg, signedimm8	= ls3imm(HI, STORE, LDRD_LDRSB)
ldrdls reg, bracketreg, signedimm8	= ls3imm(LS, STORE, LDRD_LDRSB)
ldrdge reg, bracketreg, signedimm8	= ls3imm(GE, STORE, LDRD_LDRSB)
ldrdlt reg, bracketreg, signedimm8	= ls3imm(LT, STORE, LDRD_LDRSB)
ldrdgt reg, bracketreg, signedimm8	= ls3imm(GT, STORE, LDRD_LDRSB)
ldrdle reg, bracketreg, signedimm8	= ls3imm(LE, STORE, LDRD_LDRSB)
ldrdal reg, bracketreg, signedimm8	= ls3imm(AL, STORE, LDRD_LDRSB)

ldrd reg, bracketreg, signedreg		= ls3reg(AL, STORE, LDRD_LDRSB)
ldreqd reg, bracketreg, signedreg	= ls3reg(EQ, STORE, LDRD_LDRSB)
ldrned reg, bracketreg, signedreg	= ls3reg(NE, STORE, LDRD_LDRSB)
ldrcsd reg, bracketreg, signedreg	= ls3reg(CS, STORE, LDRD_LDRSB)
ldrccd reg, bracketreg, signedreg	= ls3reg(CC, STORE, LDRD_LDRSB)
ldrmid reg, bracketreg, signedreg	= ls3reg(MI, STORE, LDRD_LDRSB)
ldrpld reg, bracketreg, signedreg	= ls3reg(PL, STORE, LDRD_LDRSB)
ldrvsd reg, bracketreg, signedreg	= ls3reg(VS, STORE, LDRD_LDRSB)
ldrvcd reg, bracketreg, signedreg	= ls3reg(VC, STORE, LDRD_LDRSB)
ldrhid reg, bracketreg, signedreg	= ls3reg(HI, STORE, LDRD_LDRSB)
ldrlsd reg, bracketreg, signedreg	= ls3reg(LS, STORE, LDRD_LDRSB)
ldrged reg, bracketreg, signedreg	= ls3reg(GE, STORE, LDRD_LDRSB)
ldrltd reg, bracketreg, signedreg	= ls3reg(LT, STORE, LDRD_LDRSB)
ldrgtd reg, bracketreg, signedreg	= ls3reg(GT, STORE, LDRD_LDRSB)
ldrled reg, bracketreg, signedreg	= ls3reg(LE, STORE, LDRD_LDRSB)
ldrald reg, bracketreg, signedreg	= ls3reg(AL, STORE, LDRD_LDRSB)
ldrdeq reg, bracketreg, signedreg	= ls3reg(EQ, STORE, LDRD_LDRSB)
ldrdne reg, bracketreg, signedreg	= ls3reg(NE, STORE, LDRD_LDRSB)
ldrdcs reg, bracketreg, signedreg	= ls3reg(CS, STORE, LDRD_LDRSB)
ldrdcc reg, bracketreg, signedreg	= ls3reg(CC, STORE, LDRD_LDRSB)
ldrdmi reg, bracketreg, signedreg	= ls3reg(MI, STORE, LDRD_LDRSB)
ldrdpl reg, bracketreg, signedreg	= ls3reg(PL, STORE, LDRD_LDRSB)
ldrdvs reg, bracketreg, signedreg	= ls3reg(VS, STORE, LDRD_LDRSB)
ldrdvc reg, bracketreg, signedreg	= ls3reg(VC, STORE, LDRD_LDRSB)
ldrdhi reg, bracketreg, signedreg	= ls3reg(HI, STORE, LDRD_LDRSB)
ldrdls reg, bracketreg, signedreg	= ls3reg(LS, STORE, LDRD_LDRSB)
ldrdge reg, bracketreg, signedreg	= ls3reg(GE, STORE, LDRD_LDRSB)
ldrdlt reg, bracketreg, signedreg	= ls3reg(LT, STORE, LDRD_LDRSB)
ldrdgt reg, bracketreg, signedreg	= ls3reg(GT, STORE, LDRD_LDRSB)
ldrdle reg, bracketreg, signedreg	= ls3reg(LE, STORE, LDRD_LDRSB)
ldrdal reg, bracketreg, signedreg	= ls3reg(AL, STORE, LDRD_LDRSB)


#
# STR
# Addressing Mode 2 on v6 page a5-18
#

str reg, am2imm				= lsimm(AL, LSWORD, STORE)
streq reg, am2imm			= lsimm(EQ, LSWORD, STORE)
strne reg, am2imm			= lsimm(NE, LSWORD, STORE)
strcs reg, am2imm			= lsimm(CS, LSWORD, STORE)
strcc reg, am2imm			= lsimm(CC, LSWORD, STORE)
strmi reg, am2imm			= lsimm(MI, LSWORD, STORE)
strpl reg, am2imm			= lsimm(PL, LSWORD, STORE)
strvs reg, am2imm			= lsimm(VS, LSWORD, STORE)
strvc reg, am2imm			= lsimm(VC, LSWORD, STORE)
strhi reg, am2imm			= lsimm(HI, LSWORD, STORE)
strls reg, am2imm			= lsimm(LS, LSWORD, STORE)
strge reg, am2imm			= lsimm(GE, LSWORD, STORE)
strlt reg, am2imm			= lsimm(LT, LSWORD, STORE)
strgt reg, am2imm			= lsimm(GT, LSWORD, STORE)
strle reg, am2imm			= lsimm(LE, LSWORD, STORE)
stral reg, am2imm			= lsimm(AL, LSWORD, STORE)

str reg, am2reg				= lsreg(AL, LSWORD, STORE)
streq reg, am2reg			= lsreg(EQ, LSWORD, STORE)
strne reg, am2reg			= lsreg(NE, LSWORD, STORE)
strcs reg, am2reg			= lsreg(CS, LSWORD, STORE)
strcc reg, am2reg			= lsreg(CC, LSWORD, STORE)
strmi reg, am2reg			= lsreg(MI, LSWORD, STORE)
strpl reg, am2reg			= lsreg(PL, LSWORD, STORE)
strvs reg, am2reg			= lsreg(VS, LSWORD, STORE)
strvc reg, am2reg			= lsreg(VC, LSWORD, STORE)
strhi reg, am2reg			= lsreg(HI, LSWORD, STORE)
strls reg, am2reg			= lsreg(LS, LSWORD, STORE)
strge reg, am2reg			= lsreg(GE, LSWORD, STORE)
strlt reg, am2reg			= lsreg(LT, LSWORD, STORE)
strgt reg, am2reg			= lsreg(GT, LSWORD, STORE)
strle reg, am2reg			= lsreg(LE, LSWORD, STORE)
stral reg, am2reg			= lsreg(AL, LSWORD, STORE)

str reg, bracketreg, signedimm12	= lsimm(AL, LSWORD, STORE)
streq reg, bracketreg, signedimm12	= lsimm(EQ, LSWORD, STORE)
strne reg, bracketreg, signedimm12	= lsimm(NE, LSWORD, STORE)
strcs reg, bracketreg, signedimm12	= lsimm(CS, LSWORD, STORE)
strcc reg, bracketreg, signedimm12	= lsimm(CC, LSWORD, STORE)
strmi reg, bracketreg, signedimm12	= lsimm(MI, LSWORD, STORE)
strpl reg, bracketreg, signedimm12	= lsimm(PL, LSWORD, STORE)
strvs reg, bracketreg, signedimm12	= lsimm(VS, LSWORD, STORE)
strvc reg, bracketreg, signedimm12	= lsimm(VC, LSWORD, STORE)
strhi reg, bracketreg, signedimm12	= lsimm(HI, LSWORD, STORE)
strls reg, bracketreg, signedimm12	= lsimm(LS, LSWORD, STORE)
strge reg, bracketreg, signedimm12	= lsimm(GE, LSWORD, STORE)
strlt reg, bracketreg, signedimm12	= lsimm(LT, LSWORD, STORE)
strgt reg, bracketreg, signedimm12	= lsimm(GT, LSWORD, STORE)
strle reg, bracketreg, signedimm12	= lsimm(LE, LSWORD, STORE)
stral reg, bracketreg, signedimm12	= lsimm(AL, LSWORD, STORE)

str reg, bracketreg, signedreg		= lsreg(AL, LSWORD, STORE)
streq reg, bracketreg, signedreg	= lsreg(EQ, LSWORD, STORE)
strne reg, bracketreg, signedreg	= lsreg(NE, LSWORD, STORE)
strcs reg, bracketreg, signedreg	= lsreg(CS, LSWORD, STORE)
strcc reg, bracketreg, signedreg	= lsreg(CC, LSWORD, STORE)
strmi reg, bracketreg, signedreg	= lsreg(MI, LSWORD, STORE)
strpl reg, bracketreg, signedreg	= lsreg(PL, LSWORD, STORE)
strvs reg, bracketreg, signedreg	= lsreg(VS, LSWORD, STORE)
strvc reg, bracketreg, signedreg	= lsreg(VC, LSWORD, STORE)
strhi reg, bracketreg, signedreg	= lsreg(HI, LSWORD, STORE)
strls reg, bracketreg, signedreg	= lsreg(LS, LSWORD, STORE)
strge reg, bracketreg, signedreg	= lsreg(GE, LSWORD, STORE)
strlt reg, bracketreg, signedreg	= lsreg(LT, LSWORD, STORE)
strgt reg, bracketreg, signedreg	= lsreg(GT, LSWORD, STORE)
strle reg, bracketreg, signedreg	= lsreg(LE, LSWORD, STORE)
stral reg, bracketreg, signedreg	= lsreg(AL, LSWORD, STORE)

str reg, bracketreg, signedreg, ishift	= lsreg(AL, LSWORD, STORE)
streq reg, bracketreg, signedreg, ishift= lsreg(EQ, LSWORD, STORE)
strne reg, bracketreg, signedreg, ishift= lsreg(NE, LSWORD, STORE)
strcs reg, bracketreg, signedreg, ishift= lsreg(CS, LSWORD, STORE)
strcc reg, bracketreg, signedreg, ishift= lsreg(CC, LSWORD, STORE)
strmi reg, bracketreg, signedreg, ishift= lsreg(MI, LSWORD, STORE)
strpl reg, bracketreg, signedreg, ishift= lsreg(PL, LSWORD, STORE)
strvs reg, bracketreg, signedreg, ishift= lsreg(VS, LSWORD, STORE)
strvc reg, bracketreg, signedreg, ishift= lsreg(VC, LSWORD, STORE)
strhi reg, bracketreg, signedreg, ishift= lsreg(HI, LSWORD, STORE)
strls reg, bracketreg, signedreg, ishift= lsreg(LS, LSWORD, STORE)
strge reg, bracketreg, signedreg, ishift= lsreg(GE, LSWORD, STORE)
strlt reg, bracketreg, signedreg, ishift= lsreg(LT, LSWORD, STORE)
strgt reg, bracketreg, signedreg, ishift= lsreg(GT, LSWORD, STORE)
strle reg, bracketreg, signedreg, ishift= lsreg(LE, LSWORD, STORE)
stral reg, bracketreg, signedreg, ishift= lsreg(AL, LSWORD, STORE)

#
# STRT
# Addressing Mode 2 on v6 page a5-18
# but restricted to the postindexed forms
#

strt reg, bracketreg, signedimm12	= lsimm_unpriv(AL, LSWORD, STORE)
streqt reg, bracketreg, signedimm12	= lsimm_unpriv(EQ, LSWORD, STORE)
strnet reg, bracketreg, signedimm12	= lsimm_unpriv(NE, LSWORD, STORE)
strcst reg, bracketreg, signedimm12	= lsimm_unpriv(CS, LSWORD, STORE)
strcct reg, bracketreg, signedimm12	= lsimm_unpriv(CC, LSWORD, STORE)
strmit reg, bracketreg, signedimm12	= lsimm_unpriv(MI, LSWORD, STORE)
strplt reg, bracketreg, signedimm12	= lsimm_unpriv(PL, LSWORD, STORE)
strvst reg, bracketreg, signedimm12	= lsimm_unpriv(VS, LSWORD, STORE)
strvct reg, bracketreg, signedimm12	= lsimm_unpriv(VC, LSWORD, STORE)
strhit reg, bracketreg, signedimm12	= lsimm_unpriv(HI, LSWORD, STORE)
strlst reg, bracketreg, signedimm12	= lsimm_unpriv(LS, LSWORD, STORE)
strget reg, bracketreg, signedimm12	= lsimm_unpriv(GE, LSWORD, STORE)
strltt reg, bracketreg, signedimm12	= lsimm_unpriv(LT, LSWORD, STORE)
strgtt reg, bracketreg, signedimm12	= lsimm_unpriv(GT, LSWORD, STORE)
strlet reg, bracketreg, signedimm12	= lsimm_unpriv(LE, LSWORD, STORE)
stralt reg, bracketreg, signedimm12	= lsimm_unpriv(AL, LSWORD, STORE)

strt reg, bracketreg, signedreg		= lsreg_unpriv(AL, LSWORD, STORE)
streqt reg, bracketreg, signedreg	= lsreg_unpriv(EQ, LSWORD, STORE)
strnet reg, bracketreg, signedreg	= lsreg_unpriv(NE, LSWORD, STORE)
strcst reg, bracketreg, signedreg	= lsreg_unpriv(CS, LSWORD, STORE)
strcct reg, bracketreg, signedreg	= lsreg_unpriv(CC, LSWORD, STORE)
strmit reg, bracketreg, signedreg	= lsreg_unpriv(MI, LSWORD, STORE)
strplt reg, bracketreg, signedreg	= lsreg_unpriv(PL, LSWORD, STORE)
strvst reg, bracketreg, signedreg	= lsreg_unpriv(VS, LSWORD, STORE)
strvct reg, bracketreg, signedreg	= lsreg_unpriv(VC, LSWORD, STORE)
strhit reg, bracketreg, signedreg	= lsreg_unpriv(HI, LSWORD, STORE)
strlst reg, bracketreg, signedreg	= lsreg_unpriv(LS, LSWORD, STORE)
strget reg, bracketreg, signedreg	= lsreg_unpriv(GE, LSWORD, STORE)
strltt reg, bracketreg, signedreg	= lsreg_unpriv(LT, LSWORD, STORE)
strgtt reg, bracketreg, signedreg	= lsreg_unpriv(GT, LSWORD, STORE)
strlet reg, bracketreg, signedreg	= lsreg_unpriv(LE, LSWORD, STORE)
stralt reg, bracketreg, signedreg	= lsreg_unpriv(AL, LSWORD, STORE)

strt reg, bracketreg, signedreg, ishift	= lsreg_unpriv(AL, LSWORD, STORE)
streqt reg, bracketreg, signedreg, ishift= lsreg_unpriv(EQ, LSWORD, STORE)
strnet reg, bracketreg, signedreg, ishift= lsreg_unpriv(NE, LSWORD, STORE)
strcst reg, bracketreg, signedreg, ishift= lsreg_unpriv(CS, LSWORD, STORE)
strcct reg, bracketreg, signedreg, ishift= lsreg_unpriv(CC, LSWORD, STORE)
strmit reg, bracketreg, signedreg, ishift= lsreg_unpriv(MI, LSWORD, STORE)
strplt reg, bracketreg, signedreg, ishift= lsreg_unpriv(PL, LSWORD, STORE)
strvst reg, bracketreg, signedreg, ishift= lsreg_unpriv(VS, LSWORD, STORE)
strvct reg, bracketreg, signedreg, ishift= lsreg_unpriv(VC, LSWORD, STORE)
strhit reg, bracketreg, signedreg, ishift= lsreg_unpriv(HI, LSWORD, STORE)
strlst reg, bracketreg, signedreg, ishift= lsreg_unpriv(LS, LSWORD, STORE)
strget reg, bracketreg, signedreg, ishift= lsreg_unpriv(GE, LSWORD, STORE)
strltt reg, bracketreg, signedreg, ishift= lsreg_unpriv(LT, LSWORD, STORE)
strgtt reg, bracketreg, signedreg, ishift= lsreg_unpriv(GT, LSWORD, STORE)
strlet reg, bracketreg, signedreg, ishift= lsreg_unpriv(LE, LSWORD, STORE)
stralt reg, bracketreg, signedreg, ishift= lsreg_unpriv(AL, LSWORD, STORE)

#
# STRB
# Addressing Mode 2 on v6 page a5-18
# XXX this appears to need both the streqb and strbeq name forms
# (therefore, so do the other loads and stores probably)
#

strb reg, am2imm			= lsimm(AL, LSBYTE, STORE)
streqb reg, am2imm			= lsimm(EQ, LSBYTE, STORE)
strneb reg, am2imm			= lsimm(NE, LSBYTE, STORE)
strcsb reg, am2imm			= lsimm(CS, LSBYTE, STORE)
strccb reg, am2imm			= lsimm(CC, LSBYTE, STORE)
strmib reg, am2imm			= lsimm(MI, LSBYTE, STORE)
strplb reg, am2imm			= lsimm(PL, LSBYTE, STORE)
strvsb reg, am2imm			= lsimm(VS, LSBYTE, STORE)
strvcb reg, am2imm			= lsimm(VC, LSBYTE, STORE)
strhib reg, am2imm			= lsimm(HI, LSBYTE, STORE)
strlsb reg, am2imm			= lsimm(LS, LSBYTE, STORE)
strgeb reg, am2imm			= lsimm(GE, LSBYTE, STORE)
strltb reg, am2imm			= lsimm(LT, LSBYTE, STORE)
strgtb reg, am2imm			= lsimm(GT, LSBYTE, STORE)
strleb reg, am2imm			= lsimm(LE, LSBYTE, STORE)
stralb reg, am2imm			= lsimm(AL, LSBYTE, STORE)
strbeq reg, am2imm			= lsimm(EQ, LSBYTE, STORE)
strbne reg, am2imm			= lsimm(NE, LSBYTE, STORE)
strbcs reg, am2imm			= lsimm(CS, LSBYTE, STORE)
strbcc reg, am2imm			= lsimm(CC, LSBYTE, STORE)
strbmi reg, am2imm			= lsimm(MI, LSBYTE, STORE)
strbpl reg, am2imm			= lsimm(PL, LSBYTE, STORE)
strbvs reg, am2imm			= lsimm(VS, LSBYTE, STORE)
strbvc reg, am2imm			= lsimm(VC, LSBYTE, STORE)
strbhi reg, am2imm			= lsimm(HI, LSBYTE, STORE)
strbls reg, am2imm			= lsimm(LS, LSBYTE, STORE)
strbge reg, am2imm			= lsimm(GE, LSBYTE, STORE)
strblt reg, am2imm			= lsimm(LT, LSBYTE, STORE)
strbgt reg, am2imm			= lsimm(GT, LSBYTE, STORE)
strble reg, am2imm			= lsimm(LE, LSBYTE, STORE)
strbal reg, am2imm			= lsimm(AL, LSBYTE, STORE)

strb reg, am2reg			= lsreg(AL, LSBYTE, STORE)
streqb reg, am2reg			= lsreg(EQ, LSBYTE, STORE)
strneb reg, am2reg			= lsreg(NE, LSBYTE, STORE)
strcsb reg, am2reg			= lsreg(CS, LSBYTE, STORE)
strccb reg, am2reg			= lsreg(CC, LSBYTE, STORE)
strmib reg, am2reg			= lsreg(MI, LSBYTE, STORE)
strplb reg, am2reg			= lsreg(PL, LSBYTE, STORE)
strvsb reg, am2reg			= lsreg(VS, LSBYTE, STORE)
strvcb reg, am2reg			= lsreg(VC, LSBYTE, STORE)
strhib reg, am2reg			= lsreg(HI, LSBYTE, STORE)
strlsb reg, am2reg			= lsreg(LS, LSBYTE, STORE)
strgeb reg, am2reg			= lsreg(GE, LSBYTE, STORE)
strltb reg, am2reg			= lsreg(LT, LSBYTE, STORE)
strgtb reg, am2reg			= lsreg(GT, LSBYTE, STORE)
strleb reg, am2reg			= lsreg(LE, LSBYTE, STORE)
stralb reg, am2reg			= lsreg(AL, LSBYTE, STORE)
strbeq reg, am2reg			= lsreg(EQ, LSBYTE, STORE)
strbne reg, am2reg			= lsreg(NE, LSBYTE, STORE)
strbcs reg, am2reg			= lsreg(CS, LSBYTE, STORE)
strbcc reg, am2reg			= lsreg(CC, LSBYTE, STORE)
strbmi reg, am2reg			= lsreg(MI, LSBYTE, STORE)
strbpl reg, am2reg			= lsreg(PL, LSBYTE, STORE)
strbvs reg, am2reg			= lsreg(VS, LSBYTE, STORE)
strbvc reg, am2reg			= lsreg(VC, LSBYTE, STORE)
strbhi reg, am2reg			= lsreg(HI, LSBYTE, STORE)
strbls reg, am2reg			= lsreg(LS, LSBYTE, STORE)
strbge reg, am2reg			= lsreg(GE, LSBYTE, STORE)
strblt reg, am2reg			= lsreg(LT, LSBYTE, STORE)
strbgt reg, am2reg			= lsreg(GT, LSBYTE, STORE)
strble reg, am2reg			= lsreg(LE, LSBYTE, STORE)
strbal reg, am2reg			= lsreg(AL, LSBYTE, STORE)

strb reg, bracketreg, signedimm12	= lsimm(AL, LSBYTE, STORE)
streqb reg, bracketreg, signedimm12	= lsimm(EQ, LSBYTE, STORE)
strneb reg, bracketreg, signedimm12	= lsimm(NE, LSBYTE, STORE)
strcsb reg, bracketreg, signedimm12	= lsimm(CS, LSBYTE, STORE)
strccb reg, bracketreg, signedimm12	= lsimm(CC, LSBYTE, STORE)
strmib reg, bracketreg, signedimm12	= lsimm(MI, LSBYTE, STORE)
strplb reg, bracketreg, signedimm12	= lsimm(PL, LSBYTE, STORE)
strvsb reg, bracketreg, signedimm12	= lsimm(VS, LSBYTE, STORE)
strvcb reg, bracketreg, signedimm12	= lsimm(VC, LSBYTE, STORE)
strhib reg, bracketreg, signedimm12	= lsimm(HI, LSBYTE, STORE)
strlsb reg, bracketreg, signedimm12	= lsimm(LS, LSBYTE, STORE)
strgeb reg, bracketreg, signedimm12	= lsimm(GE, LSBYTE, STORE)
strltb reg, bracketreg, signedimm12	= lsimm(LT, LSBYTE, STORE)
strgtb reg, bracketreg, signedimm12	= lsimm(GT, LSBYTE, STORE)
strleb reg, bracketreg, signedimm12	= lsimm(LE, LSBYTE, STORE)
stralb reg, bracketreg, signedimm12	= lsimm(AL, LSBYTE, STORE)
strbeq reg, bracketreg, signedimm12	= lsimm(EQ, LSBYTE, STORE)
strbne reg, bracketreg, signedimm12	= lsimm(NE, LSBYTE, STORE)
strbcs reg, bracketreg, signedimm12	= lsimm(CS, LSBYTE, STORE)
strbcc reg, bracketreg, signedimm12	= lsimm(CC, LSBYTE, STORE)
strbmi reg, bracketreg, signedimm12	= lsimm(MI, LSBYTE, STORE)
strbpl reg, bracketreg, signedimm12	= lsimm(PL, LSBYTE, STORE)
strbvs reg, bracketreg, signedimm12	= lsimm(VS, LSBYTE, STORE)
strbvc reg, bracketreg, signedimm12	= lsimm(VC, LSBYTE, STORE)
strbhi reg, bracketreg, signedimm12	= lsimm(HI, LSBYTE, STORE)
strbls reg, bracketreg, signedimm12	= lsimm(LS, LSBYTE, STORE)
strbge reg, bracketreg, signedimm12	= lsimm(GE, LSBYTE, STORE)
strblt reg, bracketreg, signedimm12	= lsimm(LT, LSBYTE, STORE)
strbgt reg, bracketreg, signedimm12	= lsimm(GT, LSBYTE, STORE)
strble reg, bracketreg, signedimm12	= lsimm(LE, LSBYTE, STORE)
strbal reg, bracketreg, signedimm12	= lsimm(AL, LSBYTE, STORE)

strb reg, bracketreg, signedreg		= lsreg(AL, LSBYTE, STORE)
streqb reg, bracketreg, signedreg	= lsreg(EQ, LSBYTE, STORE)
strneb reg, bracketreg, signedreg	= lsreg(NE, LSBYTE, STORE)
strcsb reg, bracketreg, signedreg	= lsreg(CS, LSBYTE, STORE)
strccb reg, bracketreg, signedreg	= lsreg(CC, LSBYTE, STORE)
strmib reg, bracketreg, signedreg	= lsreg(MI, LSBYTE, STORE)
strplb reg, bracketreg, signedreg	= lsreg(PL, LSBYTE, STORE)
strvsb reg, bracketreg, signedreg	= lsreg(VS, LSBYTE, STORE)
strvcb reg, bracketreg, signedreg	= lsreg(VC, LSBYTE, STORE)
strhib reg, bracketreg, signedreg	= lsreg(HI, LSBYTE, STORE)
strlsb reg, bracketreg, signedreg	= lsreg(LS, LSBYTE, STORE)
strgeb reg, bracketreg, signedreg	= lsreg(GE, LSBYTE, STORE)
strltb reg, bracketreg, signedreg	= lsreg(LT, LSBYTE, STORE)
strgtb reg, bracketreg, signedreg	= lsreg(GT, LSBYTE, STORE)
strleb reg, bracketreg, signedreg	= lsreg(LE, LSBYTE, STORE)
stralb reg, bracketreg, signedreg	= lsreg(AL, LSBYTE, STORE)
strbeq reg, bracketreg, signedreg	= lsreg(EQ, LSBYTE, STORE)
strbne reg, bracketreg, signedreg	= lsreg(NE, LSBYTE, STORE)
strbcs reg, bracketreg, signedreg	= lsreg(CS, LSBYTE, STORE)
strbcc reg, bracketreg, signedreg	= lsreg(CC, LSBYTE, STORE)
strbmi reg, bracketreg, signedreg	= lsreg(MI, LSBYTE, STORE)
strbpl reg, bracketreg, signedreg	= lsreg(PL, LSBYTE, STORE)
strbvs reg, bracketreg, signedreg	= lsreg(VS, LSBYTE, STORE)
strbvc reg, bracketreg, signedreg	= lsreg(VC, LSBYTE, STORE)
strbhi reg, bracketreg, signedreg	= lsreg(HI, LSBYTE, STORE)
strbls reg, bracketreg, signedreg	= lsreg(LS, LSBYTE, STORE)
strbge reg, bracketreg, signedreg	= lsreg(GE, LSBYTE, STORE)
strblt reg, bracketreg, signedreg	= lsreg(LT, LSBYTE, STORE)
strbgt reg, bracketreg, signedreg	= lsreg(GT, LSBYTE, STORE)
strble reg, bracketreg, signedreg	= lsreg(LE, LSBYTE, STORE)
strbal reg, bracketreg, signedreg	= lsreg(AL, LSBYTE, STORE)

strb reg, bracketreg, signedreg, ishift	= lsreg(AL, LSBYTE, STORE)
streqb reg, bracketreg, signedreg, ishift= lsreg(EQ, LSBYTE, STORE)
strneb reg, bracketreg, signedreg, ishift= lsreg(NE, LSBYTE, STORE)
strcsb reg, bracketreg, signedreg, ishift= lsreg(CS, LSBYTE, STORE)
strccb reg, bracketreg, signedreg, ishift= lsreg(CC, LSBYTE, STORE)
strmib reg, bracketreg, signedreg, ishift= lsreg(MI, LSBYTE, STORE)
strplb reg, bracketreg, signedreg, ishift= lsreg(PL, LSBYTE, STORE)
strvsb reg, bracketreg, signedreg, ishift= lsreg(VS, LSBYTE, STORE)
strvcb reg, bracketreg, signedreg, ishift= lsreg(VC, LSBYTE, STORE)
strhib reg, bracketreg, signedreg, ishift= lsreg(HI, LSBYTE, STORE)
strlsb reg, bracketreg, signedreg, ishift= lsreg(LS, LSBYTE, STORE)
strgeb reg, bracketreg, signedreg, ishift= lsreg(GE, LSBYTE, STORE)
strltb reg, bracketreg, signedreg, ishift= lsreg(LT, LSBYTE, STORE)
strgtb reg, bracketreg, signedreg, ishift= lsreg(GT, LSBYTE, STORE)
strleb reg, bracketreg, signedreg, ishift= lsreg(LE, LSBYTE, STORE)
stralb reg, bracketreg, signedreg, ishift= lsreg(AL, LSBYTE, STORE)
strbeq reg, bracketreg, signedreg, ishift= lsreg(EQ, LSBYTE, STORE)
strbne reg, bracketreg, signedreg, ishift= lsreg(NE, LSBYTE, STORE)
strbcs reg, bracketreg, signedreg, ishift= lsreg(CS, LSBYTE, STORE)
strbcc reg, bracketreg, signedreg, ishift= lsreg(CC, LSBYTE, STORE)
strbmi reg, bracketreg, signedreg, ishift= lsreg(MI, LSBYTE, STORE)
strbpl reg, bracketreg, signedreg, ishift= lsreg(PL, LSBYTE, STORE)
strbvs reg, bracketreg, signedreg, ishift= lsreg(VS, LSBYTE, STORE)
strbvc reg, bracketreg, signedreg, ishift= lsreg(VC, LSBYTE, STORE)
strbhi reg, bracketreg, signedreg, ishift= lsreg(HI, LSBYTE, STORE)
strbls reg, bracketreg, signedreg, ishift= lsreg(LS, LSBYTE, STORE)
strbge reg, bracketreg, signedreg, ishift= lsreg(GE, LSBYTE, STORE)
strblt reg, bracketreg, signedreg, ishift= lsreg(LT, LSBYTE, STORE)
strbgt reg, bracketreg, signedreg, ishift= lsreg(GT, LSBYTE, STORE)
strble reg, bracketreg, signedreg, ishift= lsreg(LE, LSBYTE, STORE)
strbal reg, bracketreg, signedreg, ishift= lsreg(AL, LSBYTE, STORE)

#
# STRBT
# Addressing Mode 2 on v6 page a5-18
# but restricted to the postindexed forms
#

strbt reg, bracketreg, signedimm12	= lsimm_unpriv(AL, LSBYTE, STORE)
streqbt reg, bracketreg, signedimm12	= lsimm_unpriv(EQ, LSBYTE, STORE)
strnebt reg, bracketreg, signedimm12	= lsimm_unpriv(NE, LSBYTE, STORE)
strcsbt reg, bracketreg, signedimm12	= lsimm_unpriv(CS, LSBYTE, STORE)
strccbt reg, bracketreg, signedimm12	= lsimm_unpriv(CC, LSBYTE, STORE)
strmibt reg, bracketreg, signedimm12	= lsimm_unpriv(MI, LSBYTE, STORE)
strplbt reg, bracketreg, signedimm12	= lsimm_unpriv(PL, LSBYTE, STORE)
strvsbt reg, bracketreg, signedimm12	= lsimm_unpriv(VS, LSBYTE, STORE)
strvcbt reg, bracketreg, signedimm12	= lsimm_unpriv(VC, LSBYTE, STORE)
strhibt reg, bracketreg, signedimm12	= lsimm_unpriv(HI, LSBYTE, STORE)
strlsbt reg, bracketreg, signedimm12	= lsimm_unpriv(LS, LSBYTE, STORE)
strgebt reg, bracketreg, signedimm12	= lsimm_unpriv(GE, LSBYTE, STORE)
strltbt reg, bracketreg, signedimm12	= lsimm_unpriv(LT, LSBYTE, STORE)
strgtbt reg, bracketreg, signedimm12	= lsimm_unpriv(GT, LSBYTE, STORE)
strlebt reg, bracketreg, signedimm12	= lsimm_unpriv(LE, LSBYTE, STORE)
stralbt reg, bracketreg, signedimm12	= lsimm_unpriv(AL, LSBYTE, STORE)

strbt reg, bracketreg, signedreg	= lsreg_unpriv(AL, LSBYTE, STORE)
streqbt reg, bracketreg, signedreg	= lsreg_unpriv(EQ, LSBYTE, STORE)
strnebt reg, bracketreg, signedreg	= lsreg_unpriv(NE, LSBYTE, STORE)
strcsbt reg, bracketreg, signedreg	= lsreg_unpriv(CS, LSBYTE, STORE)
strccbt reg, bracketreg, signedreg	= lsreg_unpriv(CC, LSBYTE, STORE)
strmibt reg, bracketreg, signedreg	= lsreg_unpriv(MI, LSBYTE, STORE)
strplbt reg, bracketreg, signedreg	= lsreg_unpriv(PL, LSBYTE, STORE)
strvsbt reg, bracketreg, signedreg	= lsreg_unpriv(VS, LSBYTE, STORE)
strvcbt reg, bracketreg, signedreg	= lsreg_unpriv(VC, LSBYTE, STORE)
strhibt reg, bracketreg, signedreg	= lsreg_unpriv(HI, LSBYTE, STORE)
strlsbt reg, bracketreg, signedreg	= lsreg_unpriv(LS, LSBYTE, STORE)
strgebt reg, bracketreg, signedreg	= lsreg_unpriv(GE, LSBYTE, STORE)
strltbt reg, bracketreg, signedreg	= lsreg_unpriv(LT, LSBYTE, STORE)
strgtbt reg, bracketreg, signedreg	= lsreg_unpriv(GT, LSBYTE, STORE)
strlebt reg, bracketreg, signedreg	= lsreg_unpriv(LE, LSBYTE, STORE)
stralbt reg, bracketreg, signedreg	= lsreg_unpriv(AL, LSBYTE, STORE)

strbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(AL, LSBYTE, STORE)
streqbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(EQ, LSBYTE, STORE)
strnebt reg, bracketreg, signedreg, ishift = lsreg_unpriv(NE, LSBYTE, STORE)
strcsbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(CS, LSBYTE, STORE)
strccbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(CC, LSBYTE, STORE)
strmibt reg, bracketreg, signedreg, ishift = lsreg_unpriv(MI, LSBYTE, STORE)
strplbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(PL, LSBYTE, STORE)
strvsbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(VS, LSBYTE, STORE)
strvcbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(VC, LSBYTE, STORE)
strhibt reg, bracketreg, signedreg, ishift = lsreg_unpriv(HI, LSBYTE, STORE)
strlsbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(LS, LSBYTE, STORE)
strgebt reg, bracketreg, signedreg, ishift = lsreg_unpriv(GE, LSBYTE, STORE)
strltbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(LT, LSBYTE, STORE)
strgtbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(GT, LSBYTE, STORE)
strlebt reg, bracketreg, signedreg, ishift = lsreg_unpriv(LE, LSBYTE, STORE)
stralbt reg, bracketreg, signedreg, ishift = lsreg_unpriv(AL, LSBYTE, STORE)

#
# STRH
# Addressing mode 3 on v6 page a5-33
#

strh reg, am3imm			= ls3imm(AL, STORE, STRH_LDRH)
streqh reg, am3imm			= ls3imm(EQ, STORE, STRH_LDRH)
strneh reg, am3imm			= ls3imm(NE, STORE, STRH_LDRH)
strcsh reg, am3imm			= ls3imm(CS, STORE, STRH_LDRH)
strcch reg, am3imm			= ls3imm(CC, STORE, STRH_LDRH)
strmih reg, am3imm			= ls3imm(MI, STORE, STRH_LDRH)
strplh reg, am3imm			= ls3imm(PL, STORE, STRH_LDRH)
strvsh reg, am3imm			= ls3imm(VS, STORE, STRH_LDRH)
strvch reg, am3imm			= ls3imm(VC, STORE, STRH_LDRH)
strhih reg, am3imm			= ls3imm(HI, STORE, STRH_LDRH)
strlsh reg, am3imm			= ls3imm(LS, STORE, STRH_LDRH)
strgeh reg, am3imm			= ls3imm(GE, STORE, STRH_LDRH)
strlth reg, am3imm			= ls3imm(LT, STORE, STRH_LDRH)
strgth reg, am3imm			= ls3imm(GT, STORE, STRH_LDRH)
strleh reg, am3imm			= ls3imm(LE, STORE, STRH_LDRH)
stralh reg, am3imm			= ls3imm(AL, STORE, STRH_LDRH)
strheq reg, am3imm			= ls3imm(EQ, STORE, STRH_LDRH)
strhne reg, am3imm			= ls3imm(NE, STORE, STRH_LDRH)
strhcs reg, am3imm			= ls3imm(CS, STORE, STRH_LDRH)
strhcc reg, am3imm			= ls3imm(CC, STORE, STRH_LDRH)
strhmi reg, am3imm			= ls3imm(MI, STORE, STRH_LDRH)
strhpl reg, am3imm			= ls3imm(PL, STORE, STRH_LDRH)
strhvs reg, am3imm			= ls3imm(VS, STORE, STRH_LDRH)
strhvc reg, am3imm			= ls3imm(VC, STORE, STRH_LDRH)
strhhi reg, am3imm			= ls3imm(HI, STORE, STRH_LDRH)
strhls reg, am3imm			= ls3imm(LS, STORE, STRH_LDRH)
strhge reg, am3imm			= ls3imm(GE, STORE, STRH_LDRH)
strhlt reg, am3imm			= ls3imm(LT, STORE, STRH_LDRH)
strhgt reg, am3imm			= ls3imm(GT, STORE, STRH_LDRH)
strhle reg, am3imm			= ls3imm(LE, STORE, STRH_LDRH)
strhal reg, am3imm			= ls3imm(AL, STORE, STRH_LDRH)

strh reg, am3reg			= ls3reg(AL, STORE, STRH_LDRH)
streqh reg, am3reg			= ls3reg(EQ, STORE, STRH_LDRH)
strneh reg, am3reg			= ls3reg(NE, STORE, STRH_LDRH)
strcsh reg, am3reg			= ls3reg(CS, STORE, STRH_LDRH)
strcch reg, am3reg			= ls3reg(CC, STORE, STRH_LDRH)
strmih reg, am3reg			= ls3reg(MI, STORE, STRH_LDRH)
strplh reg, am3reg			= ls3reg(PL, STORE, STRH_LDRH)
strvsh reg, am3reg			= ls3reg(VS, STORE, STRH_LDRH)
strvch reg, am3reg			= ls3reg(VC, STORE, STRH_LDRH)
strhih reg, am3reg			= ls3reg(HI, STORE, STRH_LDRH)
strlsh reg, am3reg			= ls3reg(LS, STORE, STRH_LDRH)
strgeh reg, am3reg			= ls3reg(GE, STORE, STRH_LDRH)
strlth reg, am3reg			= ls3reg(LT, STORE, STRH_LDRH)
strgth reg, am3reg			= ls3reg(GT, STORE, STRH_LDRH)
strleh reg, am3reg			= ls3reg(LE, STORE, STRH_LDRH)
stralh reg, am3reg			= ls3reg(AL, STORE, STRH_LDRH)
strheq reg, am3reg			= ls3reg(EQ, STORE, STRH_LDRH)
strhne reg, am3reg			= ls3reg(NE, STORE, STRH_LDRH)
strhcs reg, am3reg			= ls3reg(CS, STORE, STRH_LDRH)
strhcc reg, am3reg			= ls3reg(CC, STORE, STRH_LDRH)
strhmi reg, am3reg			= ls3reg(MI, STORE, STRH_LDRH)
strhpl reg, am3reg			= ls3reg(PL, STORE, STRH_LDRH)
strhvs reg, am3reg			= ls3reg(VS, STORE, STRH_LDRH)
strhvc reg, am3reg			= ls3reg(VC, STORE, STRH_LDRH)
strhhi reg, am3reg			= ls3reg(HI, STORE, STRH_LDRH)
strhls reg, am3reg			= ls3reg(LS, STORE, STRH_LDRH)
strhge reg, am3reg			= ls3reg(GE, STORE, STRH_LDRH)
strhlt reg, am3reg			= ls3reg(LT, STORE, STRH_LDRH)
strhgt reg, am3reg			= ls3reg(GT, STORE, STRH_LDRH)
strhle reg, am3reg			= ls3reg(LE, STORE, STRH_LDRH)
strhal reg, am3reg			= ls3reg(AL, STORE, STRH_LDRH)

strh reg, bracketreg, signedimm8	= ls3imm(AL, STORE, STRH_LDRH)
streqh reg, bracketreg, signedimm8	= ls3imm(EQ, STORE, STRH_LDRH)
strneh reg, bracketreg, signedimm8	= ls3imm(NE, STORE, STRH_LDRH)
strcsh reg, bracketreg, signedimm8	= ls3imm(CS, STORE, STRH_LDRH)
strcch reg, bracketreg, signedimm8	= ls3imm(CC, STORE, STRH_LDRH)
strmih reg, bracketreg, signedimm8	= ls3imm(MI, STORE, STRH_LDRH)
strplh reg, bracketreg, signedimm8	= ls3imm(PL, STORE, STRH_LDRH)
strvsh reg, bracketreg, signedimm8	= ls3imm(VS, STORE, STRH_LDRH)
strvch reg, bracketreg, signedimm8	= ls3imm(VC, STORE, STRH_LDRH)
strhih reg, bracketreg, signedimm8	= ls3imm(HI, STORE, STRH_LDRH)
strlsh reg, bracketreg, signedimm8	= ls3imm(LS, STORE, STRH_LDRH)
strgeh reg, bracketreg, signedimm8	= ls3imm(GE, STORE, STRH_LDRH)
strlth reg, bracketreg, signedimm8	= ls3imm(LT, STORE, STRH_LDRH)
strgth reg, bracketreg, signedimm8	= ls3imm(GT, STORE, STRH_LDRH)
strleh reg, bracketreg, signedimm8	= ls3imm(LE, STORE, STRH_LDRH)
stralh reg, bracketreg, signedimm8	= ls3imm(AL, STORE, STRH_LDRH)
strheq reg, bracketreg, signedimm8	= ls3imm(EQ, STORE, STRH_LDRH)
strhne reg, bracketreg, signedimm8	= ls3imm(NE, STORE, STRH_LDRH)
strhcs reg, bracketreg, signedimm8	= ls3imm(CS, STORE, STRH_LDRH)
strhcc reg, bracketreg, signedimm8	= ls3imm(CC, STORE, STRH_LDRH)
strhmi reg, bracketreg, signedimm8	= ls3imm(MI, STORE, STRH_LDRH)
strhpl reg, bracketreg, signedimm8	= ls3imm(PL, STORE, STRH_LDRH)
strhvs reg, bracketreg, signedimm8	= ls3imm(VS, STORE, STRH_LDRH)
strhvc reg, bracketreg, signedimm8	= ls3imm(VC, STORE, STRH_LDRH)
strhhi reg, bracketreg, signedimm8	= ls3imm(HI, STORE, STRH_LDRH)
strhls reg, bracketreg, signedimm8	= ls3imm(LS, STORE, STRH_LDRH)
strhge reg, bracketreg, signedimm8	= ls3imm(GE, STORE, STRH_LDRH)
strhlt reg, bracketreg, signedimm8	= ls3imm(LT, STORE, STRH_LDRH)
strhgt reg, bracketreg, signedimm8	= ls3imm(GT, STORE, STRH_LDRH)
strhle reg, bracketreg, signedimm8	= ls3imm(LE, STORE, STRH_LDRH)
strhal reg, bracketreg, signedimm8	= ls3imm(AL, STORE, STRH_LDRH)

strh reg, bracketreg, signedreg		= ls3reg(AL, STORE, STRH_LDRH)
streqh reg, bracketreg, signedreg	= ls3reg(EQ, STORE, STRH_LDRH)
strneh reg, bracketreg, signedreg	= ls3reg(NE, STORE, STRH_LDRH)
strcsh reg, bracketreg, signedreg	= ls3reg(CS, STORE, STRH_LDRH)
strcch reg, bracketreg, signedreg	= ls3reg(CC, STORE, STRH_LDRH)
strmih reg, bracketreg, signedreg	= ls3reg(MI, STORE, STRH_LDRH)
strplh reg, bracketreg, signedreg	= ls3reg(PL, STORE, STRH_LDRH)
strvsh reg, bracketreg, signedreg	= ls3reg(VS, STORE, STRH_LDRH)
strvch reg, bracketreg, signedreg	= ls3reg(VC, STORE, STRH_LDRH)
strhih reg, bracketreg, signedreg	= ls3reg(HI, STORE, STRH_LDRH)
strlsh reg, bracketreg, signedreg	= ls3reg(LS, STORE, STRH_LDRH)
strgeh reg, bracketreg, signedreg	= ls3reg(GE, STORE, STRH_LDRH)
strlth reg, bracketreg, signedreg	= ls3reg(LT, STORE, STRH_LDRH)
strgth reg, bracketreg, signedreg	= ls3reg(GT, STORE, STRH_LDRH)
strleh reg, bracketreg, signedreg	= ls3reg(LE, STORE, STRH_LDRH)
stralh reg, bracketreg, signedreg	= ls3reg(AL, STORE, STRH_LDRH)
strheq reg, bracketreg, signedreg	= ls3reg(EQ, STORE, STRH_LDRH)
strhne reg, bracketreg, signedreg	= ls3reg(NE, STORE, STRH_LDRH)
strhcs reg, bracketreg, signedreg	= ls3reg(CS, STORE, STRH_LDRH)
strhcc reg, bracketreg, signedreg	= ls3reg(CC, STORE, STRH_LDRH)
strhmi reg, bracketreg, signedreg	= ls3reg(MI, STORE, STRH_LDRH)
strhpl reg, bracketreg, signedreg	= ls3reg(PL, STORE, STRH_LDRH)
strhvs reg, bracketreg, signedreg	= ls3reg(VS, STORE, STRH_LDRH)
strhvc reg, bracketreg, signedreg	= ls3reg(VC, STORE, STRH_LDRH)
strhhi reg, bracketreg, signedreg	= ls3reg(HI, STORE, STRH_LDRH)
strhls reg, bracketreg, signedreg	= ls3reg(LS, STORE, STRH_LDRH)
strhge reg, bracketreg, signedreg	= ls3reg(GE, STORE, STRH_LDRH)
strhlt reg, bracketreg, signedreg	= ls3reg(LT, STORE, STRH_LDRH)
strhgt reg, bracketreg, signedreg	= ls3reg(GT, STORE, STRH_LDRH)
strhle reg, bracketreg, signedreg	= ls3reg(LE, STORE, STRH_LDRH)
strhal reg, bracketreg, signedreg	= ls3reg(AL, STORE, STRH_LDRH)

#
# STRD
# Addressing mode 3 on v6 page a5-33
#

strd reg, am3imm			= ls3imm(AL, STORE, STRD_LDRSH)
streqd reg, am3imm			= ls3imm(EQ, STORE, STRD_LDRSH)
strned reg, am3imm			= ls3imm(NE, STORE, STRD_LDRSH)
strcsd reg, am3imm			= ls3imm(CS, STORE, STRD_LDRSH)
strccd reg, am3imm			= ls3imm(CC, STORE, STRD_LDRSH)
strmid reg, am3imm			= ls3imm(MI, STORE, STRD_LDRSH)
strpld reg, am3imm			= ls3imm(PL, STORE, STRD_LDRSH)
strvsd reg, am3imm			= ls3imm(VS, STORE, STRD_LDRSH)
strvcd reg, am3imm			= ls3imm(VC, STORE, STRD_LDRSH)
strhid reg, am3imm			= ls3imm(HI, STORE, STRD_LDRSH)
strlsd reg, am3imm			= ls3imm(LS, STORE, STRD_LDRSH)
strged reg, am3imm			= ls3imm(GE, STORE, STRD_LDRSH)
strltd reg, am3imm			= ls3imm(LT, STORE, STRD_LDRSH)
strgtd reg, am3imm			= ls3imm(GT, STORE, STRD_LDRSH)
strled reg, am3imm			= ls3imm(LE, STORE, STRD_LDRSH)
strald reg, am3imm			= ls3imm(AL, STORE, STRD_LDRSH)
strdeq reg, am3imm			= ls3imm(EQ, STORE, STRD_LDRSH)
strdne reg, am3imm			= ls3imm(NE, STORE, STRD_LDRSH)
strdcs reg, am3imm			= ls3imm(CS, STORE, STRD_LDRSH)
strdcc reg, am3imm			= ls3imm(CC, STORE, STRD_LDRSH)
strdmi reg, am3imm			= ls3imm(MI, STORE, STRD_LDRSH)
strdpl reg, am3imm			= ls3imm(PL, STORE, STRD_LDRSH)
strdvs reg, am3imm			= ls3imm(VS, STORE, STRD_LDRSH)
strdvc reg, am3imm			= ls3imm(VC, STORE, STRD_LDRSH)
strdhi reg, am3imm			= ls3imm(HI, STORE, STRD_LDRSH)
strdls reg, am3imm			= ls3imm(LS, STORE, STRD_LDRSH)
strdge reg, am3imm			= ls3imm(GE, STORE, STRD_LDRSH)
strdlt reg, am3imm			= ls3imm(LT, STORE, STRD_LDRSH)
strdgt reg, am3imm			= ls3imm(GT, STORE, STRD_LDRSH)
strdle reg, am3imm			= ls3imm(LE, STORE, STRD_LDRSH)
strdal reg, am3imm			= ls3imm(AL, STORE, STRD_LDRSH)

strd reg, am3reg			= ls3reg(AL, STORE, STRD_LDRSH)
streqd reg, am3reg			= ls3reg(EQ, STORE, STRD_LDRSH)
strned reg, am3reg			= ls3reg(NE, STORE, STRD_LDRSH)
strcsd reg, am3reg			= ls3reg(CS, STORE, STRD_LDRSH)
strccd reg, am3reg			= ls3reg(CC, STORE, STRD_LDRSH)
strmid reg, am3reg			= ls3reg(MI, STORE, STRD_LDRSH)
strpld reg, am3reg			= ls3reg(PL, STORE, STRD_LDRSH)
strvsd reg, am3reg			= ls3reg(VS, STORE, STRD_LDRSH)
strvcd reg, am3reg			= ls3reg(VC, STORE, STRD_LDRSH)
strhid reg, am3reg			= ls3reg(HI, STORE, STRD_LDRSH)
strlsd reg, am3reg			= ls3reg(LS, STORE, STRD_LDRSH)
strged reg, am3reg			= ls3reg(GE, STORE, STRD_LDRSH)
strltd reg, am3reg			= ls3reg(LT, STORE, STRD_LDRSH)
strgtd reg, am3reg			= ls3reg(GT, STORE, STRD_LDRSH)
strled reg, am3reg			= ls3reg(LE, STORE, STRD_LDRSH)
strald reg, am3reg			= ls3reg(AL, STORE, STRD_LDRSH)
strdeq reg, am3reg			= ls3reg(EQ, STORE, STRD_LDRSH)
strdne reg, am3reg			= ls3reg(NE, STORE, STRD_LDRSH)
strdcs reg, am3reg			= ls3reg(CS, STORE, STRD_LDRSH)
strdcc reg, am3reg			= ls3reg(CC, STORE, STRD_LDRSH)
strdmi reg, am3reg			= ls3reg(MI, STORE, STRD_LDRSH)
strdpl reg, am3reg			= ls3reg(PL, STORE, STRD_LDRSH)
strdvs reg, am3reg			= ls3reg(VS, STORE, STRD_LDRSH)
strdvc reg, am3reg			= ls3reg(VC, STORE, STRD_LDRSH)
strdhi reg, am3reg			= ls3reg(HI, STORE, STRD_LDRSH)
strdls reg, am3reg			= ls3reg(LS, STORE, STRD_LDRSH)
strdge reg, am3reg			= ls3reg(GE, STORE, STRD_LDRSH)
strdlt reg, am3reg			= ls3reg(LT, STORE, STRD_LDRSH)
strdgt reg, am3reg			= ls3reg(GT, STORE, STRD_LDRSH)
strdle reg, am3reg			= ls3reg(LE, STORE, STRD_LDRSH)
strdal reg, am3reg			= ls3reg(AL, STORE, STRD_LDRSH)

strd reg, bracketreg, signedimm8	= ls3imm(AL, STORE, STRD_LDRSH)
streqd reg, bracketreg, signedimm8	= ls3imm(EQ, STORE, STRD_LDRSH)
strned reg, bracketreg, signedimm8	= ls3imm(NE, STORE, STRD_LDRSH)
strcsd reg, bracketreg, signedimm8	= ls3imm(CS, STORE, STRD_LDRSH)
strccd reg, bracketreg, signedimm8	= ls3imm(CC, STORE, STRD_LDRSH)
strmid reg, bracketreg, signedimm8	= ls3imm(MI, STORE, STRD_LDRSH)
strpld reg, bracketreg, signedimm8	= ls3imm(PL, STORE, STRD_LDRSH)
strvsd reg, bracketreg, signedimm8	= ls3imm(VS, STORE, STRD_LDRSH)
strvcd reg, bracketreg, signedimm8	= ls3imm(VC, STORE, STRD_LDRSH)
strhid reg, bracketreg, signedimm8	= ls3imm(HI, STORE, STRD_LDRSH)
strlsd reg, bracketreg, signedimm8	= ls3imm(LS, STORE, STRD_LDRSH)
strged reg, bracketreg, signedimm8	= ls3imm(GE, STORE, STRD_LDRSH)
strltd reg, bracketreg, signedimm8	= ls3imm(LT, STORE, STRD_LDRSH)
strgtd reg, bracketreg, signedimm8	= ls3imm(GT, STORE, STRD_LDRSH)
strled reg, bracketreg, signedimm8	= ls3imm(LE, STORE, STRD_LDRSH)
strald reg, bracketreg, signedimm8	= ls3imm(AL, STORE, STRD_LDRSH)
strdeq reg, bracketreg, signedimm8	= ls3imm(EQ, STORE, STRD_LDRSH)
strdne reg, bracketreg, signedimm8	= ls3imm(NE, STORE, STRD_LDRSH)
strdcs reg, bracketreg, signedimm8	= ls3imm(CS, STORE, STRD_LDRSH)
strdcc reg, bracketreg, signedimm8	= ls3imm(CC, STORE, STRD_LDRSH)
strdmi reg, bracketreg, signedimm8	= ls3imm(MI, STORE, STRD_LDRSH)
strdpl reg, bracketreg, signedimm8	= ls3imm(PL, STORE, STRD_LDRSH)
strdvs reg, bracketreg, signedimm8	= ls3imm(VS, STORE, STRD_LDRSH)
strdvc reg, bracketreg, signedimm8	= ls3imm(VC, STORE, STRD_LDRSH)
strdhi reg, bracketreg, signedimm8	= ls3imm(HI, STORE, STRD_LDRSH)
strdls reg, bracketreg, signedimm8	= ls3imm(LS, STORE, STRD_LDRSH)
strdge reg, bracketreg, signedimm8	= ls3imm(GE, STORE, STRD_LDRSH)
strdlt reg, bracketreg, signedimm8	= ls3imm(LT, STORE, STRD_LDRSH)
strdgt reg, bracketreg, signedimm8	= ls3imm(GT, STORE, STRD_LDRSH)
strdle reg, bracketreg, signedimm8	= ls3imm(LE, STORE, STRD_LDRSH)
strdal reg, bracketreg, signedimm8	= ls3imm(AL, STORE, STRD_LDRSH)

strd reg, bracketreg, signedreg		= ls3reg(AL, STORE, STRD_LDRSH)
streqd reg, bracketreg, signedreg	= ls3reg(EQ, STORE, STRD_LDRSH)
strned reg, bracketreg, signedreg	= ls3reg(NE, STORE, STRD_LDRSH)
strcsd reg, bracketreg, signedreg	= ls3reg(CS, STORE, STRD_LDRSH)
strccd reg, bracketreg, signedreg	= ls3reg(CC, STORE, STRD_LDRSH)
strmid reg, bracketreg, signedreg	= ls3reg(MI, STORE, STRD_LDRSH)
strpld reg, bracketreg, signedreg	= ls3reg(PL, STORE, STRD_LDRSH)
strvsd reg, bracketreg, signedreg	= ls3reg(VS, STORE, STRD_LDRSH)
strvcd reg, bracketreg, signedreg	= ls3reg(VC, STORE, STRD_LDRSH)
strhid reg, bracketreg, signedreg	= ls3reg(HI, STORE, STRD_LDRSH)
strlsd reg, bracketreg, signedreg	= ls3reg(LS, STORE, STRD_LDRSH)
strged reg, bracketreg, signedreg	= ls3reg(GE, STORE, STRD_LDRSH)
strltd reg, bracketreg, signedreg	= ls3reg(LT, STORE, STRD_LDRSH)
strgtd reg, bracketreg, signedreg	= ls3reg(GT, STORE, STRD_LDRSH)
strled reg, bracketreg, signedreg	= ls3reg(LE, STORE, STRD_LDRSH)
strald reg, bracketreg, signedreg	= ls3reg(AL, STORE, STRD_LDRSH)
strdeq reg, bracketreg, signedreg	= ls3reg(EQ, STORE, STRD_LDRSH)
strdne reg, bracketreg, signedreg	= ls3reg(NE, STORE, STRD_LDRSH)
strdcs reg, bracketreg, signedreg	= ls3reg(CS, STORE, STRD_LDRSH)
strdcc reg, bracketreg, signedreg	= ls3reg(CC, STORE, STRD_LDRSH)
strdmi reg, bracketreg, signedreg	= ls3reg(MI, STORE, STRD_LDRSH)
strdpl reg, bracketreg, signedreg	= ls3reg(PL, STORE, STRD_LDRSH)
strdvs reg, bracketreg, signedreg	= ls3reg(VS, STORE, STRD_LDRSH)
strdvc reg, bracketreg, signedreg	= ls3reg(VC, STORE, STRD_LDRSH)
strdhi reg, bracketreg, signedreg	= ls3reg(HI, STORE, STRD_LDRSH)
strdls reg, bracketreg, signedreg	= ls3reg(LS, STORE, STRD_LDRSH)
strdge reg, bracketreg, signedreg	= ls3reg(GE, STORE, STRD_LDRSH)
strdlt reg, bracketreg, signedreg	= ls3reg(LT, STORE, STRD_LDRSH)
strdgt reg, bracketreg, signedreg	= ls3reg(GT, STORE, STRD_LDRSH)
strdle reg, bracketreg, signedreg	= ls3reg(LE, STORE, STRD_LDRSH)
strdal reg, bracketreg, signedreg	= ls3reg(AL, STORE, STRD_LDRSH)


#
# LDREX
# v6 pg. a4-52 (pdf page 202)
#

#ldrex reg
#ldralex reg
#...
#ldrex reg, reg
#ldralex reg, reg
#...

#
# STREX
# v6 pg. a4-202 (pdf page 352)
#

# XXX is it really ldralex and strexal? that seems weird, crosscheck.

#strex reg, reg
#strexal reg, reg
#...
#strex reg, reg, reg
#strexal reg, reg, reg
#...

#
# SWP
# SWPB
#

#swp reg, reg
#swpal reg, reg
#...

#swp reg, reg, reg
#swpal reg, reg, reg
#...

#swpb reg, reg
#swpalb reg, reg
#...

#swpb reg, reg, reg
#swpalb reg, reg, reg
#...

#
# LDM
# v6 pg. a4-36 (pdf page 186)
#

# plain ldm is ldmia
ldm bangreg, reglist		= lsmult(AL, IA, LOAD)
ldmeq bangreg, reglist		= lsmult(EQ, IA, LOAD)
ldmne bangreg, reglist		= lsmult(NE, IA, LOAD)
ldmcs bangreg, reglist		= lsmult(CS, IA, LOAD)
ldmcc bangreg, reglist		= lsmult(CC, IA, LOAD)
ldmmi bangreg, reglist		= lsmult(MI, IA, LOAD)
ldmpl bangreg, reglist		= lsmult(PL, IA, LOAD)
ldmvs bangreg, reglist		= lsmult(VS, IA, LOAD)
ldmvc bangreg, reglist		= lsmult(VC, IA, LOAD)
ldmhi bangreg, reglist		= lsmult(HI, IA, LOAD)
ldmls bangreg, reglist		= lsmult(LS, IA, LOAD)
ldmge bangreg, reglist		= lsmult(GE, IA, LOAD)
ldmlt bangreg, reglist		= lsmult(LT, IA, LOAD)
ldmgt bangreg, reglist		= lsmult(GT, IA, LOAD)
ldmle bangreg, reglist		= lsmult(LE, IA, LOAD)
ldmal bangreg, reglist		= lsmult(AL, IA, LOAD)

ldmia bangreg, reglist		= lsmult(AL, IA, LOAD)
ldmeqia bangreg, reglist	= lsmult(EQ, IA, LOAD)
ldmneia bangreg, reglist	= lsmult(NE, IA, LOAD)
ldmcsia bangreg, reglist	= lsmult(CS, IA, LOAD)
ldmccia bangreg, reglist	= lsmult(CC, IA, LOAD)
ldmmiia bangreg, reglist	= lsmult(MI, IA, LOAD)
ldmplia bangreg, reglist	= lsmult(PL, IA, LOAD)
ldmvsia bangreg, reglist	= lsmult(VS, IA, LOAD)
ldmvcia bangreg, reglist	= lsmult(VC, IA, LOAD)
ldmhiia bangreg, reglist	= lsmult(HI, IA, LOAD)
ldmlsia bangreg, reglist	= lsmult(LS, IA, LOAD)
ldmgeia bangreg, reglist	= lsmult(GE, IA, LOAD)
ldmltia bangreg, reglist	= lsmult(LT, IA, LOAD)
ldmgtia bangreg, reglist	= lsmult(GT, IA, LOAD)
ldmleia bangreg, reglist	= lsmult(LE, IA, LOAD)
ldmalia bangreg, reglist	= lsmult(AL, IA, LOAD)
ldmiaeq bangreg, reglist	= lsmult(EQ, IA, LOAD)
ldmiane bangreg, reglist	= lsmult(NE, IA, LOAD)
ldmiacs bangreg, reglist	= lsmult(CS, IA, LOAD)
ldmiacc bangreg, reglist	= lsmult(CC, IA, LOAD)
ldmiami bangreg, reglist	= lsmult(MI, IA, LOAD)
ldmiapl bangreg, reglist	= lsmult(PL, IA, LOAD)
ldmiavs bangreg, reglist	= lsmult(VS, IA, LOAD)
ldmiavc bangreg, reglist	= lsmult(VC, IA, LOAD)
ldmiahi bangreg, reglist	= lsmult(HI, IA, LOAD)
ldmials bangreg, reglist	= lsmult(LS, IA, LOAD)
ldmiage bangreg, reglist	= lsmult(GE, IA, LOAD)
ldmialt bangreg, reglist	= lsmult(LT, IA, LOAD)
ldmiagt bangreg, reglist	= lsmult(GT, IA, LOAD)
ldmiale bangreg, reglist	= lsmult(LE, IA, LOAD)
ldmiaal bangreg, reglist	= lsmult(AL, IA, LOAD)

ldmib bangreg, reglist		= lsmult(AL, IB, LOAD)
ldmeqib bangreg, reglist	= lsmult(EQ, IB, LOAD)
ldmneib bangreg, reglist	= lsmult(NE, IB, LOAD)
ldmcsib bangreg, reglist	= lsmult(CS, IB, LOAD)
ldmccib bangreg, reglist	= lsmult(CC, IB, LOAD)
ldmmiib bangreg, reglist	= lsmult(MI, IB, LOAD)
ldmplib bangreg, reglist	= lsmult(PL, IB, LOAD)
ldmvsib bangreg, reglist	= lsmult(VS, IB, LOAD)
ldmvcib bangreg, reglist	= lsmult(VC, IB, LOAD)
ldmhiib bangreg, reglist	= lsmult(HI, IB, LOAD)
ldmlsib bangreg, reglist	= lsmult(LS, IB, LOAD)
ldmgeib bangreg, reglist	= lsmult(GE, IB, LOAD)
ldmltib bangreg, reglist	= lsmult(LT, IB, LOAD)
ldmgtib bangreg, reglist	= lsmult(GT, IB, LOAD)
ldmleib bangreg, reglist	= lsmult(LE, IB, LOAD)
ldmalib bangreg, reglist	= lsmult(AL, IB, LOAD)
ldmibeq bangreg, reglist	= lsmult(EQ, IB, LOAD)
ldmibne bangreg, reglist	= lsmult(NE, IB, LOAD)
ldmibcs bangreg, reglist	= lsmult(CS, IB, LOAD)
ldmibcc bangreg, reglist	= lsmult(CC, IB, LOAD)
ldmibmi bangreg, reglist	= lsmult(MI, IB, LOAD)
ldmibpl bangreg, reglist	= lsmult(PL, IB, LOAD)
ldmibvs bangreg, reglist	= lsmult(VS, IB, LOAD)
ldmibvc bangreg, reglist	= lsmult(VC, IB, LOAD)
ldmibhi bangreg, reglist	= lsmult(HI, IB, LOAD)
ldmibls bangreg, reglist	= lsmult(LS, IB, LOAD)
ldmibge bangreg, reglist	= lsmult(GE, IB, LOAD)
ldmiblt bangreg, reglist	= lsmult(LT, IB, LOAD)
ldmibgt bangreg, reglist	= lsmult(GT, IB, LOAD)
ldmible bangreg, reglist	= lsmult(LE, IB, LOAD)
ldmibal bangreg, reglist	= lsmult(AL, IB, LOAD)

ldmda bangreg, reglist		= lsmult(AL, DA, LOAD)
ldmeqda bangreg, reglist	= lsmult(EQ, DA, LOAD)
ldmneda bangreg, reglist	= lsmult(NE, DA, LOAD)
ldmcsda bangreg, reglist	= lsmult(CS, DA, LOAD)
ldmccda bangreg, reglist	= lsmult(CC, DA, LOAD)
ldmmida bangreg, reglist	= lsmult(MI, DA, LOAD)
ldmplda bangreg, reglist	= lsmult(PL, DA, LOAD)
ldmvsda bangreg, reglist	= lsmult(VS, DA, LOAD)
ldmvcda bangreg, reglist	= lsmult(VC, DA, LOAD)
ldmhida bangreg, reglist	= lsmult(HI, DA, LOAD)
ldmlsda bangreg, reglist	= lsmult(LS, DA, LOAD)
ldmgeda bangreg, reglist	= lsmult(GE, DA, LOAD)
ldmltda bangreg, reglist	= lsmult(LT, DA, LOAD)
ldmgtda bangreg, reglist	= lsmult(GT, DA, LOAD)
ldmleda bangreg, reglist	= lsmult(LE, DA, LOAD)
ldmalda bangreg, reglist	= lsmult(AL, DA, LOAD)
ldmdaeq bangreg, reglist	= lsmult(EQ, DA, LOAD)
ldmdane bangreg, reglist	= lsmult(NE, DA, LOAD)
ldmdacs bangreg, reglist	= lsmult(CS, DA, LOAD)
ldmdacc bangreg, reglist	= lsmult(CC, DA, LOAD)
ldmdami bangreg, reglist	= lsmult(MI, DA, LOAD)
ldmdapl bangreg, reglist	= lsmult(PL, DA, LOAD)
ldmdavs bangreg, reglist	= lsmult(VS, DA, LOAD)
ldmdavc bangreg, reglist	= lsmult(VC, DA, LOAD)
ldmdahi bangreg, reglist	= lsmult(HI, DA, LOAD)
ldmdals bangreg, reglist	= lsmult(LS, DA, LOAD)
ldmdage bangreg, reglist	= lsmult(GE, DA, LOAD)
ldmdalt bangreg, reglist	= lsmult(LT, DA, LOAD)
ldmdagt bangreg, reglist	= lsmult(GT, DA, LOAD)
ldmdale bangreg, reglist	= lsmult(LE, DA, LOAD)
ldmdaal bangreg, reglist	= lsmult(AL, DA, LOAD)

ldmdb bangreg, reglist		= lsmult(AL, DB, LOAD)
ldmeqdb bangreg, reglist	= lsmult(EQ, DB, LOAD)
ldmnedb bangreg, reglist	= lsmult(NE, DB, LOAD)
ldmcsdb bangreg, reglist	= lsmult(CS, DB, LOAD)
ldmccdb bangreg, reglist	= lsmult(CC, DB, LOAD)
ldmmidb bangreg, reglist	= lsmult(MI, DB, LOAD)
ldmpldb bangreg, reglist	= lsmult(PL, DB, LOAD)
ldmvsdb bangreg, reglist	= lsmult(VS, DB, LOAD)
ldmvcdb bangreg, reglist	= lsmult(VC, DB, LOAD)
ldmhidb bangreg, reglist	= lsmult(HI, DB, LOAD)
ldmlsdb bangreg, reglist	= lsmult(LS, DB, LOAD)
ldmgedb bangreg, reglist	= lsmult(GE, DB, LOAD)
ldmltdb bangreg, reglist	= lsmult(LT, DB, LOAD)
ldmgtdb bangreg, reglist	= lsmult(GT, DB, LOAD)
ldmledb bangreg, reglist	= lsmult(LE, DB, LOAD)
ldmaldb bangreg, reglist	= lsmult(AL, DB, LOAD)
ldmdbeq bangreg, reglist	= lsmult(EQ, DB, LOAD)
ldmdbne bangreg, reglist	= lsmult(NE, DB, LOAD)
ldmdbcs bangreg, reglist	= lsmult(CS, DB, LOAD)
ldmdbcc bangreg, reglist	= lsmult(CC, DB, LOAD)
ldmdbmi bangreg, reglist	= lsmult(MI, DB, LOAD)
ldmdbpl bangreg, reglist	= lsmult(PL, DB, LOAD)
ldmdbvs bangreg, reglist	= lsmult(VS, DB, LOAD)
ldmdbvc bangreg, reglist	= lsmult(VC, DB, LOAD)
ldmdbhi bangreg, reglist	= lsmult(HI, DB, LOAD)
ldmdbls bangreg, reglist	= lsmult(LS, DB, LOAD)
ldmdbge bangreg, reglist	= lsmult(GE, DB, LOAD)
ldmdblt bangreg, reglist	= lsmult(LT, DB, LOAD)
ldmdbgt bangreg, reglist	= lsmult(GT, DB, LOAD)
ldmdble bangreg, reglist	= lsmult(LE, DB, LOAD)
ldmdbal bangreg, reglist	= lsmult(AL, DB, LOAD)

# ldmfd is ldmia
ldmfd bangreg, reglist		= lsmult(AL, IA, LOAD)
ldmeqfd bangreg, reglist	= lsmult(EQ, IA, LOAD)
ldmnefd bangreg, reglist	= lsmult(NE, IA, LOAD)
ldmcsfd bangreg, reglist	= lsmult(CS, IA, LOAD)
ldmccfd bangreg, reglist	= lsmult(CC, IA, LOAD)
ldmmifd bangreg, reglist	= lsmult(MI, IA, LOAD)
ldmplfd bangreg, reglist	= lsmult(PL, IA, LOAD)
ldmvsfd bangreg, reglist	= lsmult(VS, IA, LOAD)
ldmvcfd bangreg, reglist	= lsmult(VC, IA, LOAD)
ldmhifd bangreg, reglist	= lsmult(HI, IA, LOAD)
ldmlsfd bangreg, reglist	= lsmult(LS, IA, LOAD)
ldmgefd bangreg, reglist	= lsmult(GE, IA, LOAD)
ldmltfd bangreg, reglist	= lsmult(LT, IA, LOAD)
ldmgtfd bangreg, reglist	= lsmult(GT, IA, LOAD)
ldmlefd bangreg, reglist	= lsmult(LE, IA, LOAD)
ldmalfd bangreg, reglist	= lsmult(AL, IA, LOAD)
ldmfdeq bangreg, reglist	= lsmult(EQ, IA, LOAD)
ldmfdne bangreg, reglist	= lsmult(NE, IA, LOAD)
ldmfdcs bangreg, reglist	= lsmult(CS, IA, LOAD)
ldmfdcc bangreg, reglist	= lsmult(CC, IA, LOAD)
ldmfdmi bangreg, reglist	= lsmult(MI, IA, LOAD)
ldmfdpl bangreg, reglist	= lsmult(PL, IA, LOAD)
ldmfdvs bangreg, reglist	= lsmult(VS, IA, LOAD)
ldmfdvc bangreg, reglist	= lsmult(VC, IA, LOAD)
ldmfdhi bangreg, reglist	= lsmult(HI, IA, LOAD)
ldmfdls bangreg, reglist	= lsmult(LS, IA, LOAD)
ldmfdge bangreg, reglist	= lsmult(GE, IA, LOAD)
ldmfdlt bangreg, reglist	= lsmult(LT, IA, LOAD)
ldmfdgt bangreg, reglist	= lsmult(GT, IA, LOAD)
ldmfdle bangreg, reglist	= lsmult(LE, IA, LOAD)
ldmfdal bangreg, reglist	= lsmult(AL, IA, LOAD)

# ldmed is ldmib
ldmed bangreg, reglist		= lsmult(AL, IB, LOAD)
ldmeqed bangreg, reglist	= lsmult(EQ, IB, LOAD)
ldmneed bangreg, reglist	= lsmult(NE, IB, LOAD)
ldmcsed bangreg, reglist	= lsmult(CS, IB, LOAD)
ldmcced bangreg, reglist	= lsmult(CC, IB, LOAD)
ldmmied bangreg, reglist	= lsmult(MI, IB, LOAD)
ldmpled bangreg, reglist	= lsmult(PL, IB, LOAD)
ldmvsed bangreg, reglist	= lsmult(VS, IB, LOAD)
ldmvced bangreg, reglist	= lsmult(VC, IB, LOAD)
ldmhied bangreg, reglist	= lsmult(HI, IB, LOAD)
ldmlsed bangreg, reglist	= lsmult(LS, IB, LOAD)
ldmgeed bangreg, reglist	= lsmult(GE, IB, LOAD)
ldmlted bangreg, reglist	= lsmult(LT, IB, LOAD)
ldmgted bangreg, reglist	= lsmult(GT, IB, LOAD)
ldmleed bangreg, reglist	= lsmult(LE, IB, LOAD)
ldmaled bangreg, reglist	= lsmult(AL, IB, LOAD)
ldmedeq bangreg, reglist	= lsmult(EQ, IB, LOAD)
ldmedne bangreg, reglist	= lsmult(NE, IB, LOAD)
ldmedcs bangreg, reglist	= lsmult(CS, IB, LOAD)
ldmedcc bangreg, reglist	= lsmult(CC, IB, LOAD)
ldmedmi bangreg, reglist	= lsmult(MI, IB, LOAD)
ldmedpl bangreg, reglist	= lsmult(PL, IB, LOAD)
ldmedvs bangreg, reglist	= lsmult(VS, IB, LOAD)
ldmedvc bangreg, reglist	= lsmult(VC, IB, LOAD)
ldmedhi bangreg, reglist	= lsmult(HI, IB, LOAD)
ldmedls bangreg, reglist	= lsmult(LS, IB, LOAD)
ldmedge bangreg, reglist	= lsmult(GE, IB, LOAD)
ldmedlt bangreg, reglist	= lsmult(LT, IB, LOAD)
ldmedgt bangreg, reglist	= lsmult(GT, IB, LOAD)
ldmedle bangreg, reglist	= lsmult(LE, IB, LOAD)
ldmedal bangreg, reglist	= lsmult(AL, IB, LOAD)

# ldmfa is ldmda
ldmfa bangreg, reglist		= lsmult(AL, DA, LOAD)
ldmeqfa bangreg, reglist	= lsmult(EQ, DA, LOAD)
ldmnefa bangreg, reglist	= lsmult(NE, DA, LOAD)
ldmcsfa bangreg, reglist	= lsmult(CS, DA, LOAD)
ldmccfa bangreg, reglist	= lsmult(CC, DA, LOAD)
ldmmifa bangreg, reglist	= lsmult(MI, DA, LOAD)
ldmplfa bangreg, reglist	= lsmult(PL, DA, LOAD)
ldmvsfa bangreg, reglist	= lsmult(VS, DA, LOAD)
ldmvcfa bangreg, reglist	= lsmult(VC, DA, LOAD)
ldmhifa bangreg, reglist	= lsmult(HI, DA, LOAD)
ldmlsfa bangreg, reglist	= lsmult(LS, DA, LOAD)
ldmgefa bangreg, reglist	= lsmult(GE, DA, LOAD)
ldmltfa bangreg, reglist	= lsmult(LT, DA, LOAD)
ldmgtfa bangreg, reglist	= lsmult(GT, DA, LOAD)
ldmlefa bangreg, reglist	= lsmult(LE, DA, LOAD)
ldmalfa bangreg, reglist	= lsmult(AL, DA, LOAD)
ldmfaeq bangreg, reglist	= lsmult(EQ, DA, LOAD)
ldmfane bangreg, reglist	= lsmult(NE, DA, LOAD)
ldmfacs bangreg, reglist	= lsmult(CS, DA, LOAD)
ldmfacc bangreg, reglist	= lsmult(CC, DA, LOAD)
ldmfami bangreg, reglist	= lsmult(MI, DA, LOAD)
ldmfapl bangreg, reglist	= lsmult(PL, DA, LOAD)
ldmfavs bangreg, reglist	= lsmult(VS, DA, LOAD)
ldmfavc bangreg, reglist	= lsmult(VC, DA, LOAD)
ldmfahi bangreg, reglist	= lsmult(HI, DA, LOAD)
ldmfals bangreg, reglist	= lsmult(LS, DA, LOAD)
ldmfage bangreg, reglist	= lsmult(GE, DA, LOAD)
ldmfalt bangreg, reglist	= lsmult(LT, DA, LOAD)
ldmfagt bangreg, reglist	= lsmult(GT, DA, LOAD)
ldmfale bangreg, reglist	= lsmult(LE, DA, LOAD)
ldmfaal bangreg, reglist	= lsmult(AL, DA, LOAD)

# ldmea is ldmdb
ldmea bangreg, reglist		= lsmult(AL, DB, LOAD)
ldmeqea bangreg, reglist	= lsmult(EQ, DB, LOAD)
ldmneea bangreg, reglist	= lsmult(NE, DB, LOAD)
ldmcsea bangreg, reglist	= lsmult(CS, DB, LOAD)
ldmccea bangreg, reglist	= lsmult(CC, DB, LOAD)
ldmmiea bangreg, reglist	= lsmult(MI, DB, LOAD)
ldmplea bangreg, reglist	= lsmult(PL, DB, LOAD)
ldmvsea bangreg, reglist	= lsmult(VS, DB, LOAD)
ldmvcea bangreg, reglist	= lsmult(VC, DB, LOAD)
ldmhiea bangreg, reglist	= lsmult(HI, DB, LOAD)
ldmlsea bangreg, reglist	= lsmult(LS, DB, LOAD)
ldmgeea bangreg, reglist	= lsmult(GE, DB, LOAD)
ldmltea bangreg, reglist	= lsmult(LT, DB, LOAD)
ldmgtea bangreg, reglist	= lsmult(GT, DB, LOAD)
ldmleea bangreg, reglist	= lsmult(LE, DB, LOAD)
ldmalea bangreg, reglist	= lsmult(AL, DB, LOAD)
ldmeaeq bangreg, reglist	= lsmult(EQ, DB, LOAD)
ldmeane bangreg, reglist	= lsmult(NE, DB, LOAD)
ldmeacs bangreg, reglist	= lsmult(CS, DB, LOAD)
ldmeacc bangreg, reglist	= lsmult(CC, DB, LOAD)
ldmeami bangreg, reglist	= lsmult(MI, DB, LOAD)
ldmeapl bangreg, reglist	= lsmult(PL, DB, LOAD)
ldmeavs bangreg, reglist	= lsmult(VS, DB, LOAD)
ldmeavc bangreg, reglist	= lsmult(VC, DB, LOAD)
ldmeahi bangreg, reglist	= lsmult(HI, DB, LOAD)
ldmeals bangreg, reglist	= lsmult(LS, DB, LOAD)
ldmeage bangreg, reglist	= lsmult(GE, DB, LOAD)
ldmealt bangreg, reglist	= lsmult(LT, DB, LOAD)
ldmeagt bangreg, reglist	= lsmult(GT, DB, LOAD)
ldmeale bangreg, reglist	= lsmult(LE, DB, LOAD)
ldmeaal bangreg, reglist	= lsmult(AL, DB, LOAD)

# pop is ldmfd (which is ldmia) with reg = sp!
pop reglist			= lsmult_sp(AL, IA, LOAD)
popeq reglist			= lsmult_sp(EQ, IA, LOAD)
popne reglist			= lsmult_sp(NE, IA, LOAD)
popcs reglist			= lsmult_sp(CS, IA, LOAD)
popcc reglist			= lsmult_sp(CC, IA, LOAD)
popmi reglist			= lsmult_sp(MI, IA, LOAD)
poppl reglist			= lsmult_sp(PL, IA, LOAD)
popvs reglist			= lsmult_sp(VS, IA, LOAD)
popvc reglist			= lsmult_sp(VC, IA, LOAD)
pophi reglist			= lsmult_sp(HI, IA, LOAD)
popls reglist			= lsmult_sp(LS, IA, LOAD)
popge reglist			= lsmult_sp(GE, IA, LOAD)
poplt reglist			= lsmult_sp(LT, IA, LOAD)
popgt reglist			= lsmult_sp(GT, IA, LOAD)
pople reglist			= lsmult_sp(LE, IA, LOAD)
popal reglist			= lsmult_sp(AL, IA, LOAD)

#
# STM
# v6 pg. a4-189 (pdf page 339)
#

# plain stm is stmia
stm bangreg, reglist		= lsmult(AL, IA, STORE)
stmeq bangreg, reglist		= lsmult(EQ, IA, STORE)
stmne bangreg, reglist		= lsmult(NE, IA, STORE)
stmcs bangreg, reglist		= lsmult(CS, IA, STORE)
stmcc bangreg, reglist		= lsmult(CC, IA, STORE)
stmmi bangreg, reglist		= lsmult(MI, IA, STORE)
stmpl bangreg, reglist		= lsmult(PL, IA, STORE)
stmvs bangreg, reglist		= lsmult(VS, IA, STORE)
stmvc bangreg, reglist		= lsmult(VC, IA, STORE)
stmhi bangreg, reglist		= lsmult(HI, IA, STORE)
stmls bangreg, reglist		= lsmult(LS, IA, STORE)
stmge bangreg, reglist		= lsmult(GE, IA, STORE)
stmlt bangreg, reglist		= lsmult(LT, IA, STORE)
stmgt bangreg, reglist		= lsmult(GT, IA, STORE)
stmle bangreg, reglist		= lsmult(LE, IA, STORE)
stmal bangreg, reglist		= lsmult(AL, IA, STORE)

stmia bangreg, reglist		= lsmult(AL, IA, STORE)
stmeqia bangreg, reglist	= lsmult(EQ, IA, STORE)
stmneia bangreg, reglist	= lsmult(NE, IA, STORE)
stmcsia bangreg, reglist	= lsmult(CS, IA, STORE)
stmccia bangreg, reglist	= lsmult(CC, IA, STORE)
stmmiia bangreg, reglist	= lsmult(MI, IA, STORE)
stmplia bangreg, reglist	= lsmult(PL, IA, STORE)
stmvsia bangreg, reglist	= lsmult(VS, IA, STORE)
stmvcia bangreg, reglist	= lsmult(VC, IA, STORE)
stmhiia bangreg, reglist	= lsmult(HI, IA, STORE)
stmlsia bangreg, reglist	= lsmult(LS, IA, STORE)
stmgeia bangreg, reglist	= lsmult(GE, IA, STORE)
stmltia bangreg, reglist	= lsmult(LT, IA, STORE)
stmgtia bangreg, reglist	= lsmult(GT, IA, STORE)
stmleia bangreg, reglist	= lsmult(LE, IA, STORE)
stmalia bangreg, reglist	= lsmult(AL, IA, STORE)
stmiaeq bangreg, reglist	= lsmult(EQ, IA, STORE)
stmiane bangreg, reglist	= lsmult(NE, IA, STORE)
stmiacs bangreg, reglist	= lsmult(CS, IA, STORE)
stmiacc bangreg, reglist	= lsmult(CC, IA, STORE)
stmiami bangreg, reglist	= lsmult(MI, IA, STORE)
stmiapl bangreg, reglist	= lsmult(PL, IA, STORE)
stmiavs bangreg, reglist	= lsmult(VS, IA, STORE)
stmiavc bangreg, reglist	= lsmult(VC, IA, STORE)
stmiahi bangreg, reglist	= lsmult(HI, IA, STORE)
stmials bangreg, reglist	= lsmult(LS, IA, STORE)
stmiage bangreg, reglist	= lsmult(GE, IA, STORE)
stmialt bangreg, reglist	= lsmult(LT, IA, STORE)
stmiagt bangreg, reglist	= lsmult(GT, IA, STORE)
stmiale bangreg, reglist	= lsmult(LE, IA, STORE)
stmiaal bangreg, reglist	= lsmult(AL, IA, STORE)

stmib bangreg, reglist		= lsmult(AL, IB, STORE)
stmeqib bangreg, reglist	= lsmult(EQ, IB, STORE)
stmneib bangreg, reglist	= lsmult(NE, IB, STORE)
stmcsib bangreg, reglist	= lsmult(CS, IB, STORE)
stmccib bangreg, reglist	= lsmult(CC, IB, STORE)
stmmiib bangreg, reglist	= lsmult(MI, IB, STORE)
stmplib bangreg, reglist	= lsmult(PL, IB, STORE)
stmvsib bangreg, reglist	= lsmult(VS, IB, STORE)
stmvcib bangreg, reglist	= lsmult(VC, IB, STORE)
stmhiib bangreg, reglist	= lsmult(HI, IB, STORE)
stmlsib bangreg, reglist	= lsmult(LS, IB, STORE)
stmgeib bangreg, reglist	= lsmult(GE, IB, STORE)
stmltib bangreg, reglist	= lsmult(LT, IB, STORE)
stmgtib bangreg, reglist	= lsmult(GT, IB, STORE)
stmleib bangreg, reglist	= lsmult(LE, IB, STORE)
stmalib bangreg, reglist	= lsmult(AL, IB, STORE)
stmibeq bangreg, reglist	= lsmult(EQ, IB, STORE)
stmibne bangreg, reglist	= lsmult(NE, IB, STORE)
stmibcs bangreg, reglist	= lsmult(CS, IB, STORE)
stmibcc bangreg, reglist	= lsmult(CC, IB, STORE)
stmibmi bangreg, reglist	= lsmult(MI, IB, STORE)
stmibpl bangreg, reglist	= lsmult(PL, IB, STORE)
stmibvs bangreg, reglist	= lsmult(VS, IB, STORE)
stmibvc bangreg, reglist	= lsmult(VC, IB, STORE)
stmibhi bangreg, reglist	= lsmult(HI, IB, STORE)
stmibls bangreg, reglist	= lsmult(LS, IB, STORE)
stmibge bangreg, reglist	= lsmult(GE, IB, STORE)
stmiblt bangreg, reglist	= lsmult(LT, IB, STORE)
stmibgt bangreg, reglist	= lsmult(GT, IB, STORE)
stmible bangreg, reglist	= lsmult(LE, IB, STORE)
stmibal bangreg, reglist	= lsmult(AL, IB, STORE)

stmda bangreg, reglist		= lsmult(AL, DA, STORE)
stmeqda bangreg, reglist	= lsmult(EQ, DA, STORE)
stmneda bangreg, reglist	= lsmult(NE, DA, STORE)
stmcsda bangreg, reglist	= lsmult(CS, DA, STORE)
stmccda bangreg, reglist	= lsmult(CC, DA, STORE)
stmmida bangreg, reglist	= lsmult(MI, DA, STORE)
stmplda bangreg, reglist	= lsmult(PL, DA, STORE)
stmvsda bangreg, reglist	= lsmult(VS, DA, STORE)
stmvcda bangreg, reglist	= lsmult(VC, DA, STORE)
stmhida bangreg, reglist	= lsmult(HI, DA, STORE)
stmlsda bangreg, reglist	= lsmult(LS, DA, STORE)
stmgeda bangreg, reglist	= lsmult(GE, DA, STORE)
stmltda bangreg, reglist	= lsmult(LT, DA, STORE)
stmgtda bangreg, reglist	= lsmult(GT, DA, STORE)
stmleda bangreg, reglist	= lsmult(LE, DA, STORE)
stmalda bangreg, reglist	= lsmult(AL, DA, STORE)
stmdaeq bangreg, reglist	= lsmult(EQ, DA, STORE)
stmdane bangreg, reglist	= lsmult(NE, DA, STORE)
stmdacs bangreg, reglist	= lsmult(CS, DA, STORE)
stmdacc bangreg, reglist	= lsmult(CC, DA, STORE)
stmdami bangreg, reglist	= lsmult(MI, DA, STORE)
stmdapl bangreg, reglist	= lsmult(PL, DA, STORE)
stmdavs bangreg, reglist	= lsmult(VS, DA, STORE)
stmdavc bangreg, reglist	= lsmult(VC, DA, STORE)
stmdahi bangreg, reglist	= lsmult(HI, DA, STORE)
stmdals bangreg, reglist	= lsmult(LS, DA, STORE)
stmdage bangreg, reglist	= lsmult(GE, DA, STORE)
stmdalt bangreg, reglist	= lsmult(LT, DA, STORE)
stmdagt bangreg, reglist	= lsmult(GT, DA, STORE)
stmdale bangreg, reglist	= lsmult(LE, DA, STORE)
stmdaal bangreg, reglist	= lsmult(AL, DA, STORE)

stmdb bangreg, reglist		= lsmult(AL, DB, STORE)
stmeqdb bangreg, reglist	= lsmult(EQ, DB, STORE)
stmnedb bangreg, reglist	= lsmult(NE, DB, STORE)
stmcsdb bangreg, reglist	= lsmult(CS, DB, STORE)
stmccdb bangreg, reglist	= lsmult(CC, DB, STORE)
stmmidb bangreg, reglist	= lsmult(MI, DB, STORE)
stmpldb bangreg, reglist	= lsmult(PL, DB, STORE)
stmvsdb bangreg, reglist	= lsmult(VS, DB, STORE)
stmvcdb bangreg, reglist	= lsmult(VC, DB, STORE)
stmhidb bangreg, reglist	= lsmult(HI, DB, STORE)
stmlsdb bangreg, reglist	= lsmult(LS, DB, STORE)
stmgedb bangreg, reglist	= lsmult(GE, DB, STORE)
stmltdb bangreg, reglist	= lsmult(LT, DB, STORE)
stmgtdb bangreg, reglist	= lsmult(GT, DB, STORE)
stmledb bangreg, reglist	= lsmult(LE, DB, STORE)
stmaldb bangreg, reglist	= lsmult(AL, DB, STORE)
stmdbeq bangreg, reglist	= lsmult(EQ, DB, STORE)
stmdbne bangreg, reglist	= lsmult(NE, DB, STORE)
stmdbcs bangreg, reglist	= lsmult(CS, DB, STORE)
stmdbcc bangreg, reglist	= lsmult(CC, DB, STORE)
stmdbmi bangreg, reglist	= lsmult(MI, DB, STORE)
stmdbpl bangreg, reglist	= lsmult(PL, DB, STORE)
stmdbvs bangreg, reglist	= lsmult(VS, DB, STORE)
stmdbvc bangreg, reglist	= lsmult(VC, DB, STORE)
stmdbhi bangreg, reglist	= lsmult(HI, DB, STORE)
stmdbls bangreg, reglist	= lsmult(LS, DB, STORE)
stmdbge bangreg, reglist	= lsmult(GE, DB, STORE)
stmdblt bangreg, reglist	= lsmult(LT, DB, STORE)
stmdbgt bangreg, reglist	= lsmult(GT, DB, STORE)
stmdble bangreg, reglist	= lsmult(LE, DB, STORE)
stmdbal bangreg, reglist	= lsmult(AL, DB, STORE)

# stmea is stmia
stmea bangreg, reglist		= lsmult(AL, IA, STORE)
stmeqea bangreg, reglist	= lsmult(EQ, IA, STORE)
stmneea bangreg, reglist	= lsmult(NE, IA, STORE)
stmcsea bangreg, reglist	= lsmult(CS, IA, STORE)
stmccea bangreg, reglist	= lsmult(CC, IA, STORE)
stmmiea bangreg, reglist	= lsmult(MI, IA, STORE)
stmplea bangreg, reglist	= lsmult(PL, IA, STORE)
stmvsea bangreg, reglist	= lsmult(VS, IA, STORE)
stmvcea bangreg, reglist	= lsmult(VC, IA, STORE)
stmhiea bangreg, reglist	= lsmult(HI, IA, STORE)
stmlsea bangreg, reglist	= lsmult(LS, IA, STORE)
stmgeea bangreg, reglist	= lsmult(GE, IA, STORE)
stmltea bangreg, reglist	= lsmult(LT, IA, STORE)
stmgtea bangreg, reglist	= lsmult(GT, IA, STORE)
stmleea bangreg, reglist	= lsmult(LE, IA, STORE)
stmalea bangreg, reglist	= lsmult(AL, IA, STORE)
stmeaeq bangreg, reglist	= lsmult(EQ, IA, STORE)
stmeane bangreg, reglist	= lsmult(NE, IA, STORE)
stmeacs bangreg, reglist	= lsmult(CS, IA, STORE)
stmeacc bangreg, reglist	= lsmult(CC, IA, STORE)
stmeami bangreg, reglist	= lsmult(MI, IA, STORE)
stmeapl bangreg, reglist	= lsmult(PL, IA, STORE)
stmeavs bangreg, reglist	= lsmult(VS, IA, STORE)
stmeavc bangreg, reglist	= lsmult(VC, IA, STORE)
stmeahi bangreg, reglist	= lsmult(HI, IA, STORE)
stmeals bangreg, reglist	= lsmult(LS, IA, STORE)
stmeage bangreg, reglist	= lsmult(GE, IA, STORE)
stmealt bangreg, reglist	= lsmult(LT, IA, STORE)
stmeagt bangreg, reglist	= lsmult(GT, IA, STORE)
stmeale bangreg, reglist	= lsmult(LE, IA, STORE)
stmeaal bangreg, reglist	= lsmult(AL, IA, STORE)

# stmfa is stmib
stmfa bangreg, reglist		= lsmult(AL, IB, STORE)
stmeqfa bangreg, reglist	= lsmult(EQ, IB, STORE)
stmnefa bangreg, reglist	= lsmult(NE, IB, STORE)
stmcsfa bangreg, reglist	= lsmult(CS, IB, STORE)
stmccfa bangreg, reglist	= lsmult(CC, IB, STORE)
stmmifa bangreg, reglist	= lsmult(MI, IB, STORE)
stmplfa bangreg, reglist	= lsmult(PL, IB, STORE)
stmvsfa bangreg, reglist	= lsmult(VS, IB, STORE)
stmvcfa bangreg, reglist	= lsmult(VC, IB, STORE)
stmhifa bangreg, reglist	= lsmult(HI, IB, STORE)
stmlsfa bangreg, reglist	= lsmult(LS, IB, STORE)
stmgefa bangreg, reglist	= lsmult(GE, IB, STORE)
stmltfa bangreg, reglist	= lsmult(LT, IB, STORE)
stmgtfa bangreg, reglist	= lsmult(GT, IB, STORE)
stmlefa bangreg, reglist	= lsmult(LE, IB, STORE)
stmalfa bangreg, reglist	= lsmult(AL, IB, STORE)
stmfaeq bangreg, reglist	= lsmult(EQ, IB, STORE)
stmfane bangreg, reglist	= lsmult(NE, IB, STORE)
stmfacs bangreg, reglist	= lsmult(CS, IB, STORE)
stmfacc bangreg, reglist	= lsmult(CC, IB, STORE)
stmfami bangreg, reglist	= lsmult(MI, IB, STORE)
stmfapl bangreg, reglist	= lsmult(PL, IB, STORE)
stmfavs bangreg, reglist	= lsmult(VS, IB, STORE)
stmfavc bangreg, reglist	= lsmult(VC, IB, STORE)
stmfahi bangreg, reglist	= lsmult(HI, IB, STORE)
stmfals bangreg, reglist	= lsmult(LS, IB, STORE)
stmfage bangreg, reglist	= lsmult(GE, IB, STORE)
stmfalt bangreg, reglist	= lsmult(LT, IB, STORE)
stmfagt bangreg, reglist	= lsmult(GT, IB, STORE)
stmfale bangreg, reglist	= lsmult(LE, IB, STORE)
stmfaal bangreg, reglist	= lsmult(AL, IB, STORE)

# stmed is stmda
stmed bangreg, reglist		= lsmult(AL, DA, STORE)
stmeqed bangreg, reglist	= lsmult(EQ, DA, STORE)
stmneed bangreg, reglist	= lsmult(NE, DA, STORE)
stmcsed bangreg, reglist	= lsmult(CS, DA, STORE)
stmcced bangreg, reglist	= lsmult(CC, DA, STORE)
stmmied bangreg, reglist	= lsmult(MI, DA, STORE)
stmpled bangreg, reglist	= lsmult(PL, DA, STORE)
stmvsed bangreg, reglist	= lsmult(VS, DA, STORE)
stmvced bangreg, reglist	= lsmult(VC, DA, STORE)
stmhied bangreg, reglist	= lsmult(HI, DA, STORE)
stmlsed bangreg, reglist	= lsmult(LS, DA, STORE)
stmgeed bangreg, reglist	= lsmult(GE, DA, STORE)
stmlted bangreg, reglist	= lsmult(LT, DA, STORE)
stmgted bangreg, reglist	= lsmult(GT, DA, STORE)
stmleed bangreg, reglist	= lsmult(LE, DA, STORE)
stmaled bangreg, reglist	= lsmult(AL, DA, STORE)
stmedeq bangreg, reglist	= lsmult(EQ, DA, STORE)
stmedne bangreg, reglist	= lsmult(NE, DA, STORE)
stmedcs bangreg, reglist	= lsmult(CS, DA, STORE)
stmedcc bangreg, reglist	= lsmult(CC, DA, STORE)
stmedmi bangreg, reglist	= lsmult(MI, DA, STORE)
stmedpl bangreg, reglist	= lsmult(PL, DA, STORE)
stmedvs bangreg, reglist	= lsmult(VS, DA, STORE)
stmedvc bangreg, reglist	= lsmult(VC, DA, STORE)
stmedhi bangreg, reglist	= lsmult(HI, DA, STORE)
stmedls bangreg, reglist	= lsmult(LS, DA, STORE)
stmedge bangreg, reglist	= lsmult(GE, DA, STORE)
stmedlt bangreg, reglist	= lsmult(LT, DA, STORE)
stmedgt bangreg, reglist	= lsmult(GT, DA, STORE)
stmedle bangreg, reglist	= lsmult(LE, DA, STORE)
stmedal bangreg, reglist	= lsmult(AL, DA, STORE)

# stmfd is stmdb
stmfd bangreg, reglist		= lsmult(AL, DB, STORE)
stmeqfd bangreg, reglist	= lsmult(EQ, DB, STORE)
stmnefd bangreg, reglist	= lsmult(NE, DB, STORE)
stmcsfd bangreg, reglist	= lsmult(CS, DB, STORE)
stmccfd bangreg, reglist	= lsmult(CC, DB, STORE)
stmmifd bangreg, reglist	= lsmult(MI, DB, STORE)
stmplfd bangreg, reglist	= lsmult(PL, DB, STORE)
stmvsfd bangreg, reglist	= lsmult(VS, DB, STORE)
stmvcfd bangreg, reglist	= lsmult(VC, DB, STORE)
stmhifd bangreg, reglist	= lsmult(HI, DB, STORE)
stmlsfd bangreg, reglist	= lsmult(LS, DB, STORE)
stmgefd bangreg, reglist	= lsmult(GE, DB, STORE)
stmltfd bangreg, reglist	= lsmult(LT, DB, STORE)
stmgtfd bangreg, reglist	= lsmult(GT, DB, STORE)
stmlefd bangreg, reglist	= lsmult(LE, DB, STORE)
stmalfd bangreg, reglist	= lsmult(AL, DB, STORE)
stmfdeq bangreg, reglist	= lsmult(EQ, DB, STORE)
stmfdne bangreg, reglist	= lsmult(NE, DB, STORE)
stmfdcs bangreg, reglist	= lsmult(CS, DB, STORE)
stmfdcc bangreg, reglist	= lsmult(CC, DB, STORE)
stmfdmi bangreg, reglist	= lsmult(MI, DB, STORE)
stmfdpl bangreg, reglist	= lsmult(PL, DB, STORE)
stmfdvs bangreg, reglist	= lsmult(VS, DB, STORE)
stmfdvc bangreg, reglist	= lsmult(VC, DB, STORE)
stmfdhi bangreg, reglist	= lsmult(HI, DB, STORE)
stmfdls bangreg, reglist	= lsmult(LS, DB, STORE)
stmfdge bangreg, reglist	= lsmult(GE, DB, STORE)
stmfdlt bangreg, reglist	= lsmult(LT, DB, STORE)
stmfdgt bangreg, reglist	= lsmult(GT, DB, STORE)
stmfdle bangreg, reglist	= lsmult(LE, DB, STORE)
stmfdal bangreg, reglist	= lsmult(AL, DB, STORE)

# push is stmfd (which is stmdb) with reg = sp!
push reglist			= lsmult_sp(AL, DB, STORE)
pusheq reglist			= lsmult_sp(EQ, DB, STORE)
pushne reglist			= lsmult_sp(NE, DB, STORE)
pushcs reglist			= lsmult_sp(CS, DB, STORE)
pushcc reglist			= lsmult_sp(CC, DB, STORE)
pushmi reglist			= lsmult_sp(MI, DB, STORE)
pushpl reglist			= lsmult_sp(PL, DB, STORE)
pushvs reglist			= lsmult_sp(VS, DB, STORE)
pushvc reglist			= lsmult_sp(VC, DB, STORE)
pushhi reglist			= lsmult_sp(HI, DB, STORE)
pushls reglist			= lsmult_sp(LS, DB, STORE)
pushge reglist			= lsmult_sp(GE, DB, STORE)
pushlt reglist			= lsmult_sp(LT, DB, STORE)
pushgt reglist			= lsmult_sp(GT, DB, STORE)
pushle reglist			= lsmult_sp(LE, DB, STORE)
pushal reglist			= lsmult_sp(AL, DB, STORE)

############################################################
#                         branches                         #
############################################################

# apparently for branches the condition comes only after the l for "link",
# unlike with arithmetic and the s flag.

#
# B
# v6 pg. a4-10 (pdf page 160)
#

b symbol				= branch(AL, NOLINK)
beq symbol				= branch(EQ, NOLINK)
bne symbol				= branch(NE, NOLINK)
bcs symbol				= branch(CS, NOLINK)
bcc symbol				= branch(CC, NOLINK)
bmi symbol				= branch(MI, NOLINK)
bpl symbol				= branch(PL, NOLINK)
bvs symbol				= branch(VS, NOLINK)
bvc symbol				= branch(VC, NOLINK)
bhi symbol				= branch(HI, NOLINK)
bls symbol				= branch(LS, NOLINK)
bge symbol				= branch(GE, NOLINK)
blt symbol				= branch(LT, NOLINK)
bgt symbol				= branch(GT, NOLINK)
ble symbol				= branch(LE, NOLINK)
bal symbol				= branch(AL, NOLINK)

#
# BL
# v6 pg. a4-10 (pdf page 160)
#

bl symbol				= branch(AL, LINK)
bleq symbol				= branch(EQ, LINK)
blne symbol				= branch(NE, LINK)
blcs symbol				= branch(CS, LINK)
blcc symbol				= branch(CC, LINK)
blmi symbol				= branch(MI, LINK)
blpl symbol				= branch(PL, LINK)
blvs symbol				= branch(VS, LINK)
blvc symbol				= branch(VC, LINK)
blhi symbol				= branch(HI, LINK)
blls symbol				= branch(LS, LINK)
blge symbol				= branch(GE, LINK)
bllt symbol				= branch(LT, LINK)
blgt symbol				= branch(GT, LINK)
blle symbol				= branch(LE, LINK)
blal symbol				= branch(AL, LINK)

#
# BX
# v6 pg. a4-20 (pdf page 170)
#

bx reg					= bx_(AL)
bxeq reg				= bx_(EQ)
bxne reg				= bx_(NE)
bxcs reg				= bx_(CS)
bxcc reg				= bx_(CC)
bxmi reg				= bx_(MI)
bxpl reg				= bx_(PL)
bxvs reg				= bx_(VS)
bxvc reg				= bx_(VC)
bxhi reg				= bx_(HI)
bxls reg				= bx_(LS)
bxge reg				= bx_(GE)
bxlt reg				= bx_(LT)
bxgt reg				= bx_(GT)
bxle reg				= bx_(LE)
bxal reg				= bx_(AL)

#
# BLX
# v6 pg. a4-16 (pdf page 166)
# v6 pg. a4-18 (pdf page 168)
#

# unconditional, to-thumb only
# don't enable this yet because we don't do thumb yet
#blx symbol

#blx reg
#blxal reg
#...

#
# BXJ
# v6 pg. a4-21 (pdf page 171)
#

#bxj reg
#bxjal reg
#...




############################################################
#                        misc ops                          #
############################################################

#
# CLZ
# v6 pg. a4-25 (pdf page 175)
#

clz reg, reg				= clz_(AL)
clzeq reg, reg				= clz_(EQ)
clzne reg, reg				= clz_(NE)
clzcs reg, reg				= clz_(CS)
clzcc reg, reg				= clz_(CC)
clzmi reg, reg				= clz_(MI)
clzpl reg, reg				= clz_(PL)
clzvs reg, reg				= clz_(VS)
clzvc reg, reg				= clz_(VC)
clzhi reg, reg				= clz_(HI)
clzls reg, reg				= clz_(LS)
clzge reg, reg				= clz_(GE)
clzlt reg, reg				= clz_(LT)
clzgt reg, reg				= clz_(GT)
clzle reg, reg				= clz_(LE)
clzal reg, reg				= clz_(AL)


#
# CPY
#

#cpy reg, reg
#cpyal reg, reg
#...

#
# MRS
#

# statusreg is apparently either "cpsr" or "spsr"
#mrs reg, statusreg
#mrsal reg, statusreg
#...

#
# MSR
#

# statusregfields is apparently either "cpsr" or "spsr"
# followed by a _ (really?) and one or more of "cxsf" which set the
# field mask bits (bits 16-19 in that order)
#msr statusregfields, imm
#msral statusregfields, imm
#...

#msr statusregfields, reg
#msral statusregfields, reg
#...

#
# PKHBT
#

#pkhbt reg, reg, reg
#pkhbtal reg, reg, reg
#...

# the ishift can only be an LSL
#pkhbt reg, reg, reg, ishift
#pkhbtal reg, reg, reg, ishift
#...

#
# PKHTB
#

#pkhtb reg, reg, reg
#pkhtbal reg, reg, reg
#...

# the ishift can only be an ASR
#pkhtb reg, reg, reg, ishift
#pkhtbal reg, reg, reg, ishift
#...

#
# REV
#

#rev reg, reg
#reval reg, reg
#...

#rev16 reg, reg
#rev16al reg, reg
#...

#revsh reg, reg
#revshal reg, reg
#...

#
# SXTAB
# SXTAB16
# SXTAH
#

#sxtab reg, reg, reg
#sxtabal reg, reg, reg
#...

# rot8 is one of ROR #8, ROR #16, or ROR #24
# (writing ROR #0 is apparently not allowed but the same as leaving it off)
#sxtab reg, reg, reg, rot8
#sxtabal reg, reg, reg, rot8
#...

#sxtab16 reg, reg, reg
#sxtab16al reg, reg, reg
#...

#sxtab16 reg, reg, reg, rot8
#sxtab16al reg, reg, reg, rot8
#...

#sxtah reg, reg, reg
#sxtahal reg, reg, reg
#...

#sxtah reg, reg, reg, rot8
#sxtahal reg, reg, reg, rot8
#...

#
# SXTB
# SXTB16
# SXTH
#

#sxtb reg, reg
#sxtbal reg, reg
#...

#sxtb reg, reg, rot8
#sxtbal reg, reg, rot8
#...

#sxtb16 reg, reg
#sxtb16al reg, reg
#...

#sxtb16 reg, reg, rot8
#sxtb16al reg, reg, rot8
#...

#sxth reg, reg
#sxthal reg, reg
#...

#sxth reg, reg, rot8
#sxthal reg, reg, rot8
#...

#
# UXTAB
# UXTAB16
# UXTAH
#

#uxtab reg, reg, reg
#uxtabal reg, reg, reg
#...

#uxtab reg, reg, reg, rot8
#uxtabal reg, reg, reg, rot8
#...

#uxtab16 reg, reg, reg
#uxtab16al reg, reg, reg
#...

#uxtab16 reg, reg, reg, rot8
#uxtab16al reg, reg, reg, rot8
#...

#uxtah reg, reg, reg
#uxtahal reg, reg, reg
#...

#uxtah reg, reg, reg, rot8
#uxtahal reg, reg, reg, rot8
#...

#
# UXTB
# UXTB16
# UXTH
#

#uxtb reg, reg
#uxtbal reg, reg
#...

#uxtb reg, reg, rot8
#uxtbal reg, reg, rot8
#...

#uxtb16 reg, reg
#uxtb16al reg, reg
#...

#uxtb16 reg, reg, rot8
#uxtb16al reg, reg, rot8
#...

#uxth reg, reg
#uxthal reg, reg
#...

############################################################
#                       coprocessor                        #
############################################################

#
# CDP
# v6 pg. a4-23 (pdf page 173)
#

#cdp coproc, number, copreg, copreg, copreg, number
#cdpal coproc, number, copreg, copreg, copreg, number
#...
#cdp2 coproc, number, copreg, copreg, copreg, number

#
# LDC
# v6 pg. a4-34 (pdf page 184)
#

#ldc coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#ldcal coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#...

#ldcl coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#ldcall coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#...

#ldc2 coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#ldc2l coproc, copreg, foo # foo is "addressing mode 5" on page a5-49

#
# STC
# v6 pg. a4-186 (pdf page 336)
#

#stc coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#stcal coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#...

#stcl coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#stcall coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#...

#stc2 coproc, copreg, foo # foo is "addressing mode 5" on page a5-49
#stc2l coproc, copreg, foo # foo is "addressing mode 5" on page a5-49

#
# MCR
# v6 pg. a4-62 (pdf page 212)
#

#mcr coproc, number, reg, copreg, copreg
#mcral coproc, number, reg, copreg, copreg
#...
#mcr2 coproc, number, reg, copreg, copreg

#mcr coproc, number, reg, copreg, copreg, number
#mcral coproc, number, reg, copreg, copreg, number
#...
#mcr2 coproc, number, reg, copreg, copreg, number

#
# MCRR
# v6 pg. a4-64 (pdf page 214)
#

#mcrr coproc, number, reg, reg, copreg
#mcrral coproc, number, reg, reg, copreg
#...
#mcrr2 coproc, number, reg, reg, copreg

#
# MRC
# v6 pg. a4-70 (pdf page 220)
#

#mrc coproc, number, reg, copreg, copreg
#mrcal coproc, number, reg, copreg, copreg
#...
#mrc2 coproc, number, reg, copreg, copreg

#mrc coproc, number, reg, copreg, copreg, number
#mrcal coproc, number, reg, copreg, copreg, number
#...
#mrc2 coproc, number, reg, copreg, copreg, number

#
# MRRC
# v6 pg. a4-64 (pdf page 214)
#

#mrrc coproc, number, reg, reg, copreg
#mrrcal coproc, number, reg, reg, copreg
#...
#mrrc2 coproc, number, reg, reg, copreg


############################################################
#                          others                          #
############################################################

#
# BKPT
# v6 pg. a4-14 (pdf page 164)
#

#bkpt number

#
# SWI
# v6 pg. a4-210 (pdf page 360)
#

#swi number
#swial number
#...

#
# CPS
# v6 pg. a4-29 (pdf page 179)
#

#cpsie iflags
#cpsie iflags, imm
#cpsid iflags
#cpsid iflags, imm
#cps imm

#
# RFE
# v6 pg. a4-113 (pdf page 263)
#

#rfe@ wbreg
# where @ comes from addressing mode 4 on page a5-41
# but the number of registers to load is 2 and the register list is
# {PC, CPSR}

#
# SRS
# v6 pg. a4-174 (pdf page 324)
#

#srs@ wbnumber
# where @ comes from addressing mode 4 on page a5-41
# but the base register is always r13
# the number of registers to store is 2 and the register list is
# {R14, CPSR}
# note: wbnumber is a number with an optional writeback flag (!)

#
# SETEND
# v6 pg. a4-129 (pdf page 279)
#

# endian is either "le" or "be"
#setend endian











#svc


# deprecated (for v5 or earlier)
#swp
#swpb

#ldrex
#ldrexb
#ldrexd
#ldrexh
#strex
#strexb
#strexd
#strexh
#clrex

#dmb domain, accesses
#dsb domain, accesses
#isb

#udf



# "data-processing instructions" come in four forms:
#   insn rd, rn, #imm
#   insn rd, rn, rm
#   insn rd, rn, (rm shift-op #imm)
#   insn rd, rn, (rm shift-op rs)  (arm only, not thumb)
#
# 
# lsl
# lsr
# asr
# ror
# rrx
#
# mla
# mls
# mul
# smlabb
# smlabt
# smlatb
# smlatt
# smlad
# smlal
# smlalbb
# smlalbt
# smlaltb
# smlaltt
# smlald
# smlawb
# smlawt
# smlsd
# smlsld
# smlla
# smmls
# smmul
# smuad
# smulbb
# smulbt
# smultb
# smultt
# smull
# smulwb
# smulwt
# smusd
# umaal
# umlal
# umull
#
# ssat
# ssat16
# usat
# usat16
# qadd
# qsub
# qdadd
# qdsub
#
# pkh
# sxtab
# sxtab16
# sxtah
# sxtb
# sxtb16
# sxth
# uxtab
# uxtab16
# uxtah
# uxtb
# uxtb16
# uxth
#
# sadd16 qadd16 shadd16 uadd16 uqadd16 uhadd16
# sasx   qasx   shasx   uasx   uqasx   uhasx
# ssax   qsax   shsax   usax   uqsax   uhsax
# ssub16 qsub16 shsub16 usub16 uqsub16 uhsub16
# sadd8  qadd8  shadd8  uadd8  uqadd8  uhadd8
# ssub8  qsub8  shsub8  usub8  uqsub8  uhsub8
#
# sdiv
# udiv
#
# bfc
# bfi
# clz
# movt
# rbit
# rev
# rev16
# revsh
# sbfx
# sel
# ubfx
# usad8
# usada8

# register accesses:
#
# cps
# mrs
# msr (immediate)
# msr (register)
# mrs (banked register)
# msr (banked register)

# load/store instructions
# addresses are base + offset
# offset can be an immediate, a register, or a shifted register
# the pc cannot be used as the offset register (or the shift register)
# the offset can be moved to the base register
# (either before or after the access)
# supposedly only loads can use the pc as the base register
# (ah, stores can but this is deprecated in v7)
#
# ldr
# ldrex
# ldrt
# ldrh
# ldrexh
# ldrht
# ldrsh
# ldrsht
# ldrb
# ldrexb
# ldrbt
# ldrsb
# ldrsbt
# ldrd
# ldrexd
#
# str
# strex
# strt
# strh
# strexh
# strht
# strb
# strexb
# strbt
# strd
# strexd
# 
# ldm ldmia ldmfd
# ldmda ldmfa
# ldmdb ldmea
# ldmib ldmed
# pop
# push
# stm stmia stmea
# stmda stmed
# stmdb stmfd
# stmib stmfa

# traps
#
# svc
# swi (old spelling of svc)
# bkpt
# smc
# smi (old spelling of smc)
# hvc

# coprocessor
#
# mcr mcr2
# mcrr mcrr2
# mrc mrc2
# mrrc mrrc2
# ldc ldc2
# stc stc2

# simd/fpu
#
# vldm
# vldr
# vstm
# vstr
# vld1
# vld2
# vld3
# vld4
# vst1
# vst2
# vst3
# vst4
# vdup
# vmov
# vmrs
# vmsr
#
# vadd
# vaddhn
# vaddl
# vaddw
# vhadd
# vhsub
# vpadal
# vpadd
# vpaddl
# vraddhn
# vrhadd
# vrsubhn
# vqadd
# vqsub
# vsub
# vsubhn
# vsubl
# vsubw
# vand
# vbic
# veor
# vbif
# vbit
# vbsl
# vadd
# vmov
# vorr
# vorn
#
# vacge
# vacgt
# vacle
# vaclt
# vceq
# vcge
# vcgt
# vcle
# vclt
# vtst
#
# vqrshl
# vqrshrn
# vqrshrun
# vqshl
# vqshl
# vqshlu
# vqshrn
# vqshrun
# vrshl
# vrshr
# vrsra
# vrshrn
# vshl
# vshll
# vshr
# vshrn
# vsli
# vsra
# vsri
#
# vmla
# vmlal
# vmls
# vmlsl
# vmla
# vmls
# vmul
# vmull
# vmul
# vfma
# vfms
# vqdmlal
# vqdmlsl
# vqdmulh
# vqrdmulh
# vqdmull
#
# vaba
# vabal
# vabd
# vabdl
# vabd
# vabs
# vcvt
# vcls
# vclz
# vcnt
# vdup
# vext
# vaddn
# vaddl
# vmax
# vneg
# vpmax
# vpmin
# vrecpe
# vrecps
# vrsqrte
# vrsqrts
# vrev16
# vreg32
# vreg64
# vqabs
# vqmovn
# vqovun
# vqneg
# vswp
# vtbl
# vtbx
# vtrn
# vuzp
# vzip
#
# vcmp
# vcmpe
# vcvtr
# vcvtb
# vcvtt
# vdiv
# vnmla
# vnmls
# vnmul
# vfnma
# vfnms
# vqsrt

# misc
#
# clrex
# dbg
# dmb
# dsb
# isb
# it
# nop
# pld pldw
# pli
# setend
# sev
# swp swpb
# wfe
# wfi
# yield

# supervisor
#
# srs
# rfe
# eret

# see chapter B9 for system instructions
# see appendix D8 for old thumb instruction names


# this is bogus and is here to work around the existence of the
# sparc64 one (since otherwise the function it calls in the
# assembler code is orphaned)... it should go away once we get
# proper MD directives.
.register reg, rtag
